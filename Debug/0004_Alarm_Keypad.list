
0004_Alarm_Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e90  08007680  08007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008510  08008510  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008510  08008510  00018510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008518  08008518  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008518  08008518  00018518  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800851c  0800851c  0001851c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008520  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000465c  20000074  08008594  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200046d0  08008594  000246d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017a59  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037a6  00000000  00000000  00037b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001138  00000000  00000000  0003c8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c97  00000000  00000000  0003da18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b79f  00000000  00000000  000626af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcaf1  00000000  00000000  0007de4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000061a4  00000000  00000000  0015a940  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00160ae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007668 	.word	0x08007668

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007668 	.word	0x08007668

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <Get_Key>:
*/

#include "Keypad4X4.h"
char key;
char Get_Key(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	int done=1;
 80005c2:	2301      	movs	r3, #1
 80005c4:	607b      	str	r3, [r7, #4]
	while(done)
 80005c6:	e19b      	b.n	8000900 <Get_Key+0x344>
	{
	//COLUMN 3
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_SET);     // Pull the C0 HIGH
 80005c8:	2201      	movs	r2, #1
 80005ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ce:	48b3      	ldr	r0, [pc, #716]	; (800089c <Get_Key+0x2e0>)
 80005d0:	f001 fcfe 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	48b0      	ldr	r0, [pc, #704]	; (800089c <Get_Key+0x2e0>)
 80005da:	f001 fcf9 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80005de:	2200      	movs	r2, #0
 80005e0:	2120      	movs	r1, #32
 80005e2:	48ae      	ldr	r0, [pc, #696]	; (800089c <Get_Key+0x2e0>)
 80005e4:	f001 fcf4 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80005e8:	2200      	movs	r2, #0
 80005ea:	2108      	movs	r1, #8
 80005ec:	48ab      	ldr	r0, [pc, #684]	; (800089c <Get_Key+0x2e0>)
 80005ee:	f001 fcef 	bl	8001fd0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80005f2:	2140      	movs	r1, #64	; 0x40
 80005f4:	48a9      	ldr	r0, [pc, #676]	; (800089c <Get_Key+0x2e0>)
 80005f6:	f001 fcd3 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d00b      	beq.n	8000618 <Get_Key+0x5c>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000600:	bf00      	nop
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	48a5      	ldr	r0, [pc, #660]	; (800089c <Get_Key+0x2e0>)
 8000606:	f001 fccb 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f8      	bne.n	8000602 <Get_Key+0x46>
		key='1';
 8000610:	4ba3      	ldr	r3, [pc, #652]	; (80008a0 <Get_Key+0x2e4>)
 8000612:	2231      	movs	r2, #49	; 0x31
 8000614:	701a      	strb	r2, [r3, #0]
		break;
 8000616:	e177      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000618:	2180      	movs	r1, #128	; 0x80
 800061a:	48a2      	ldr	r0, [pc, #648]	; (80008a4 <Get_Key+0x2e8>)
 800061c:	f001 fcc0 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d00b      	beq.n	800063e <Get_Key+0x82>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000626:	bf00      	nop
 8000628:	2180      	movs	r1, #128	; 0x80
 800062a:	489e      	ldr	r0, [pc, #632]	; (80008a4 <Get_Key+0x2e8>)
 800062c:	f001 fcb8 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d1f8      	bne.n	8000628 <Get_Key+0x6c>
		key='4';
 8000636:	4b9a      	ldr	r3, [pc, #616]	; (80008a0 <Get_Key+0x2e4>)
 8000638:	2234      	movs	r2, #52	; 0x34
 800063a:	701a      	strb	r2, [r3, #0]
		break;
 800063c:	e164      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 800063e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000642:	4899      	ldr	r0, [pc, #612]	; (80008a8 <Get_Key+0x2ec>)
 8000644:	f001 fcac 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <Get_Key+0xac>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 800064e:	bf00      	nop
 8000650:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000654:	4894      	ldr	r0, [pc, #592]	; (80008a8 <Get_Key+0x2ec>)
 8000656:	f001 fca3 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d1f7      	bne.n	8000650 <Get_Key+0x94>
		key='7';
 8000660:	4b8f      	ldr	r3, [pc, #572]	; (80008a0 <Get_Key+0x2e4>)
 8000662:	2237      	movs	r2, #55	; 0x37
 8000664:	701a      	strb	r2, [r3, #0]
		break;
 8000666:	e14f      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066c:	488e      	ldr	r0, [pc, #568]	; (80008a8 <Get_Key+0x2ec>)
 800066e:	f001 fc97 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d00c      	beq.n	8000692 <Get_Key+0xd6>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000678:	bf00      	nop
 800067a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800067e:	488a      	ldr	r0, [pc, #552]	; (80008a8 <Get_Key+0x2ec>)
 8000680:	f001 fc8e 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1f7      	bne.n	800067a <Get_Key+0xbe>
		key='*';
 800068a:	4b85      	ldr	r3, [pc, #532]	; (80008a0 <Get_Key+0x2e4>)
 800068c:	222a      	movs	r2, #42	; 0x2a
 800068e:	701a      	strb	r2, [r3, #0]
		break;
 8000690:	e13a      	b.n	8000908 <Get_Key+0x34c>
	}

	//COLUMN 2
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000692:	2200      	movs	r2, #0
 8000694:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000698:	4880      	ldr	r0, [pc, #512]	; (800089c <Get_Key+0x2e0>)
 800069a:	f001 fc99 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_SET);     // Pull the C1 HIGH
 800069e:	2201      	movs	r2, #1
 80006a0:	2110      	movs	r1, #16
 80006a2:	487e      	ldr	r0, [pc, #504]	; (800089c <Get_Key+0x2e0>)
 80006a4:	f001 fc94 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 80006a8:	2200      	movs	r2, #0
 80006aa:	2120      	movs	r1, #32
 80006ac:	487b      	ldr	r0, [pc, #492]	; (800089c <Get_Key+0x2e0>)
 80006ae:	f001 fc8f 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);   // Pull the C3 LOW
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	4879      	ldr	r0, [pc, #484]	; (800089c <Get_Key+0x2e0>)
 80006b8:	f001 fc8a 	bl	8001fd0 <HAL_GPIO_WritePin>
	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 80006bc:	2140      	movs	r1, #64	; 0x40
 80006be:	4877      	ldr	r0, [pc, #476]	; (800089c <Get_Key+0x2e0>)
 80006c0:	f001 fc6e 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d00b      	beq.n	80006e2 <Get_Key+0x126>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 80006ca:	bf00      	nop
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	4873      	ldr	r0, [pc, #460]	; (800089c <Get_Key+0x2e0>)
 80006d0:	f001 fc66 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d1f8      	bne.n	80006cc <Get_Key+0x110>
		key='2';
 80006da:	4b71      	ldr	r3, [pc, #452]	; (80008a0 <Get_Key+0x2e4>)
 80006dc:	2232      	movs	r2, #50	; 0x32
 80006de:	701a      	strb	r2, [r3, #0]
		break;
 80006e0:	e112      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	486f      	ldr	r0, [pc, #444]	; (80008a4 <Get_Key+0x2e8>)
 80006e6:	f001 fc5b 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d00b      	beq.n	8000708 <Get_Key+0x14c>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80006f0:	bf00      	nop
 80006f2:	2180      	movs	r1, #128	; 0x80
 80006f4:	486b      	ldr	r0, [pc, #428]	; (80008a4 <Get_Key+0x2e8>)
 80006f6:	f001 fc53 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d1f8      	bne.n	80006f2 <Get_Key+0x136>
		key='5';
 8000700:	4b67      	ldr	r3, [pc, #412]	; (80008a0 <Get_Key+0x2e4>)
 8000702:	2235      	movs	r2, #53	; 0x35
 8000704:	701a      	strb	r2, [r3, #0]
		break;
 8000706:	e0ff      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 8000708:	f44f 7100 	mov.w	r1, #512	; 0x200
 800070c:	4866      	ldr	r0, [pc, #408]	; (80008a8 <Get_Key+0x2ec>)
 800070e:	f001 fc47 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00c      	beq.n	8000732 <Get_Key+0x176>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 8000718:	bf00      	nop
 800071a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800071e:	4862      	ldr	r0, [pc, #392]	; (80008a8 <Get_Key+0x2ec>)
 8000720:	f001 fc3e 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d1f7      	bne.n	800071a <Get_Key+0x15e>
		key='8';
 800072a:	4b5d      	ldr	r3, [pc, #372]	; (80008a0 <Get_Key+0x2e4>)
 800072c:	2238      	movs	r2, #56	; 0x38
 800072e:	701a      	strb	r2, [r3, #0]
		break;
 8000730:	e0ea      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 8000732:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000736:	485c      	ldr	r0, [pc, #368]	; (80008a8 <Get_Key+0x2ec>)
 8000738:	f001 fc32 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d00c      	beq.n	800075c <Get_Key+0x1a0>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 8000742:	bf00      	nop
 8000744:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000748:	4857      	ldr	r0, [pc, #348]	; (80008a8 <Get_Key+0x2ec>)
 800074a:	f001 fc29 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d1f7      	bne.n	8000744 <Get_Key+0x188>
		key='0';
 8000754:	4b52      	ldr	r3, [pc, #328]	; (80008a0 <Get_Key+0x2e4>)
 8000756:	2230      	movs	r2, #48	; 0x30
 8000758:	701a      	strb	r2, [r3, #0]
		break;
 800075a:	e0d5      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 1
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);  // Pull the C0 LOW  
 800075c:	2200      	movs	r2, #0
 800075e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000762:	484e      	ldr	r0, [pc, #312]	; (800089c <Get_Key+0x2e0>)
 8000764:	f001 fc34 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);  // Pull the C1 LOW
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	484b      	ldr	r0, [pc, #300]	; (800089c <Get_Key+0x2e0>)
 800076e:	f001 fc2f 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_SET);    // Pull the C2 HIGH
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	4849      	ldr	r0, [pc, #292]	; (800089c <Get_Key+0x2e0>)
 8000778:	f001 fc2a 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_RESET);  // Pull the C3 LOW
 800077c:	2200      	movs	r2, #0
 800077e:	2108      	movs	r1, #8
 8000780:	4846      	ldr	r0, [pc, #280]	; (800089c <Get_Key+0x2e0>)
 8000782:	f001 fc25 	bl	8001fd0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000786:	2140      	movs	r1, #64	; 0x40
 8000788:	4844      	ldr	r0, [pc, #272]	; (800089c <Get_Key+0x2e0>)
 800078a:	f001 fc09 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d00b      	beq.n	80007ac <Get_Key+0x1f0>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 8000794:	bf00      	nop
 8000796:	2140      	movs	r1, #64	; 0x40
 8000798:	4840      	ldr	r0, [pc, #256]	; (800089c <Get_Key+0x2e0>)
 800079a:	f001 fc01 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f8      	bne.n	8000796 <Get_Key+0x1da>
		key='3';
 80007a4:	4b3e      	ldr	r3, [pc, #248]	; (80008a0 <Get_Key+0x2e4>)
 80007a6:	2233      	movs	r2, #51	; 0x33
 80007a8:	701a      	strb	r2, [r3, #0]
		break;
 80007aa:	e0ad      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	483d      	ldr	r0, [pc, #244]	; (80008a4 <Get_Key+0x2e8>)
 80007b0:	f001 fbf6 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d00b      	beq.n	80007d2 <Get_Key+0x216>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 80007ba:	bf00      	nop
 80007bc:	2180      	movs	r1, #128	; 0x80
 80007be:	4839      	ldr	r0, [pc, #228]	; (80008a4 <Get_Key+0x2e8>)
 80007c0:	f001 fbee 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d1f8      	bne.n	80007bc <Get_Key+0x200>
		key='6';
 80007ca:	4b35      	ldr	r3, [pc, #212]	; (80008a0 <Get_Key+0x2e4>)
 80007cc:	2236      	movs	r2, #54	; 0x36
 80007ce:	701a      	strb	r2, [r3, #0]
		break;
 80007d0:	e09a      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80007d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007d6:	4834      	ldr	r0, [pc, #208]	; (80008a8 <Get_Key+0x2ec>)
 80007d8:	f001 fbe2 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d00c      	beq.n	80007fc <Get_Key+0x240>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80007e2:	bf00      	nop
 80007e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e8:	482f      	ldr	r0, [pc, #188]	; (80008a8 <Get_Key+0x2ec>)
 80007ea:	f001 fbd9 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d1f7      	bne.n	80007e4 <Get_Key+0x228>
		key='9';
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <Get_Key+0x2e4>)
 80007f6:	2239      	movs	r2, #57	; 0x39
 80007f8:	701a      	strb	r2, [r3, #0]
		break;
 80007fa:	e085      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80007fc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000800:	4829      	ldr	r0, [pc, #164]	; (80008a8 <Get_Key+0x2ec>)
 8000802:	f001 fbcd 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d00c      	beq.n	8000826 <Get_Key+0x26a>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 800080c:	bf00      	nop
 800080e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000812:	4825      	ldr	r0, [pc, #148]	; (80008a8 <Get_Key+0x2ec>)
 8000814:	f001 fbc4 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d1f7      	bne.n	800080e <Get_Key+0x252>
		key='#';
 800081e:	4b20      	ldr	r3, [pc, #128]	; (80008a0 <Get_Key+0x2e4>)
 8000820:	2223      	movs	r2, #35	; 0x23
 8000822:	701a      	strb	r2, [r3, #0]
		break;
 8000824:	e070      	b.n	8000908 <Get_Key+0x34c>
	}
	//COLUMN 0
	HAL_GPIO_WritePin (KC0_GPIO_Port, KC0_Pin, GPIO_PIN_RESET);   // Pull the C0 LOW  
 8000826:	2200      	movs	r2, #0
 8000828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800082c:	481b      	ldr	r0, [pc, #108]	; (800089c <Get_Key+0x2e0>)
 800082e:	f001 fbcf 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC1_GPIO_Port, KC1_Pin, GPIO_PIN_RESET);   // Pull the C1 LOW
 8000832:	2200      	movs	r2, #0
 8000834:	2110      	movs	r1, #16
 8000836:	4819      	ldr	r0, [pc, #100]	; (800089c <Get_Key+0x2e0>)
 8000838:	f001 fbca 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC2_GPIO_Port, KC2_Pin, GPIO_PIN_RESET);   // Pull the C2 LOW
 800083c:	2200      	movs	r2, #0
 800083e:	2120      	movs	r1, #32
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <Get_Key+0x2e0>)
 8000842:	f001 fbc5 	bl	8001fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin (KC3_GPIO_Port, KC3_Pin, GPIO_PIN_SET);     // Pull the C3 HIGH
 8000846:	2201      	movs	r2, #1
 8000848:	2108      	movs	r1, #8
 800084a:	4814      	ldr	r0, [pc, #80]	; (800089c <Get_Key+0x2e0>)
 800084c:	f001 fbc0 	bl	8001fd0 <HAL_GPIO_WritePin>

	if ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)))   // if R0 is HIGH
 8000850:	2140      	movs	r1, #64	; 0x40
 8000852:	4812      	ldr	r0, [pc, #72]	; (800089c <Get_Key+0x2e0>)
 8000854:	f001 fba4 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <Get_Key+0x2ba>
	{
		while ((HAL_GPIO_ReadPin (KR0_GPIO_Port, KR0_Pin)));   // wait till the button is pressed
 800085e:	bf00      	nop
 8000860:	2140      	movs	r1, #64	; 0x40
 8000862:	480e      	ldr	r0, [pc, #56]	; (800089c <Get_Key+0x2e0>)
 8000864:	f001 fb9c 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d1f8      	bne.n	8000860 <Get_Key+0x2a4>
		key='A';
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <Get_Key+0x2e4>)
 8000870:	2241      	movs	r2, #65	; 0x41
 8000872:	701a      	strb	r2, [r3, #0]
		break;
 8000874:	e048      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)))   // if  R1 is HIGH
 8000876:	2180      	movs	r1, #128	; 0x80
 8000878:	480a      	ldr	r0, [pc, #40]	; (80008a4 <Get_Key+0x2e8>)
 800087a:	f001 fb91 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <Get_Key+0x2f0>
	{
		while ((HAL_GPIO_ReadPin (KR1_GPIO_Port, KR1_Pin)));   // wait till the button is pressed
 8000884:	bf00      	nop
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	4806      	ldr	r0, [pc, #24]	; (80008a4 <Get_Key+0x2e8>)
 800088a:	f001 fb89 	bl	8001fa0 <HAL_GPIO_ReadPin>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d1f8      	bne.n	8000886 <Get_Key+0x2ca>
		key='B';
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <Get_Key+0x2e4>)
 8000896:	2242      	movs	r2, #66	; 0x42
 8000898:	701a      	strb	r2, [r3, #0]
		break;
 800089a:	e035      	b.n	8000908 <Get_Key+0x34c>
 800089c:	40020400 	.word	0x40020400
 80008a0:	20000090 	.word	0x20000090
 80008a4:	40020800 	.word	0x40020800
 80008a8:	40020000 	.word	0x40020000
	}

	if ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)))   // if R2 is HIGH
 80008ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008b0:	481a      	ldr	r0, [pc, #104]	; (800091c <Get_Key+0x360>)
 80008b2:	f001 fb75 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d00c      	beq.n	80008d6 <Get_Key+0x31a>
	{
		while ((HAL_GPIO_ReadPin (KR2_GPIO_Port, KR2_Pin)));   // wait till the button is pressed
 80008bc:	bf00      	nop
 80008be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008c2:	4816      	ldr	r0, [pc, #88]	; (800091c <Get_Key+0x360>)
 80008c4:	f001 fb6c 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d1f7      	bne.n	80008be <Get_Key+0x302>
		key='C';
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <Get_Key+0x364>)
 80008d0:	2243      	movs	r2, #67	; 0x43
 80008d2:	701a      	strb	r2, [r3, #0]
		break;
 80008d4:	e018      	b.n	8000908 <Get_Key+0x34c>
	}

	if ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)))   // if R3 is HIGH
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4810      	ldr	r0, [pc, #64]	; (800091c <Get_Key+0x360>)
 80008dc:	f001 fb60 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d00c      	beq.n	8000900 <Get_Key+0x344>
	{
		while ((HAL_GPIO_ReadPin (KR3_GPIO_Port, KR3_Pin)));   // wait till the button is pressed
 80008e6:	bf00      	nop
 80008e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ec:	480b      	ldr	r0, [pc, #44]	; (800091c <Get_Key+0x360>)
 80008ee:	f001 fb57 	bl	8001fa0 <HAL_GPIO_ReadPin>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d1f7      	bne.n	80008e8 <Get_Key+0x32c>
		key='D';
 80008f8:	4b09      	ldr	r3, [pc, #36]	; (8000920 <Get_Key+0x364>)
 80008fa:	2244      	movs	r2, #68	; 0x44
 80008fc:	701a      	strb	r2, [r3, #0]
		break;
 80008fe:	e003      	b.n	8000908 <Get_Key+0x34c>
	while(done)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	f47f ae60 	bne.w	80005c8 <Get_Key+0xc>
	}
}
	HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000908:	2120      	movs	r1, #32
 800090a:	4804      	ldr	r0, [pc, #16]	; (800091c <Get_Key+0x360>)
 800090c:	f001 fb79 	bl	8002002 <HAL_GPIO_TogglePin>
	return(key);
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Get_Key+0x364>)
 8000912:	781b      	ldrb	r3, [r3, #0]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40020000 	.word	0x40020000
 8000920:	20000090 	.word	0x20000090

08000924 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	60f8      	str	r0, [r7, #12]
 800092c:	60b9      	str	r1, [r7, #8]
 800092e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	4a07      	ldr	r2, [pc, #28]	; (8000950 <vApplicationGetIdleTaskMemory+0x2c>)
 8000934:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000936:	68bb      	ldr	r3, [r7, #8]
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <vApplicationGetIdleTaskMemory+0x30>)
 800093a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	2280      	movs	r2, #128	; 0x80
 8000940:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000942:	bf00      	nop
 8000944:	3714      	adds	r7, #20
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000094 	.word	0x20000094
 8000954:	200000e8 	.word	0x200000e8

08000958 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000958:	b5b0      	push	{r4, r5, r7, lr}
 800095a:	b09e      	sub	sp, #120	; 0x78
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800095e:	f001 f843 	bl	80019e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000962:	f000 f873 	bl	8000a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000966:	f000 f937 	bl	8000bd8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800096a:	f000 f90b 	bl	8000b84 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800096e:	f000 f8db 	bl	8000b28 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
//  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);

    SSD1306_Init();
 8000972:	f000 fba7 	bl	80010c4 <SSD1306_Init>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of armMutex */
  osMutexDef(armMutex);
 8000976:	2300      	movs	r3, #0
 8000978:	673b      	str	r3, [r7, #112]	; 0x70
 800097a:	2300      	movs	r3, #0
 800097c:	677b      	str	r3, [r7, #116]	; 0x74
  armMutexHandle = osMutexCreate(osMutex(armMutex));
 800097e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000982:	4618      	mov	r0, r3
 8000984:	f003 fe7d 	bl	8004682 <osMutexCreate>
 8000988:	4603      	mov	r3, r0
 800098a:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <main+0xd0>)
 800098c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800098e:	4b27      	ldr	r3, [pc, #156]	; (8000a2c <main+0xd4>)
 8000990:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000994:	461d      	mov	r5, r3
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800099e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80009a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80009a6:	2100      	movs	r1, #0
 80009a8:	4618      	mov	r0, r3
 80009aa:	f003 fe0a 	bl	80045c2 <osThreadCreate>
 80009ae:	4603      	mov	r3, r0
 80009b0:	4a1f      	ldr	r2, [pc, #124]	; (8000a30 <main+0xd8>)
 80009b2:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task1 */
  osThreadDef(Task1, StartTask01, osPriorityIdle, 0, 128);
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <main+0xdc>)
 80009b6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80009ba:	461d      	mov	r5, r3
 80009bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task1Handle = osThreadCreate(osThread(Task1), NULL);
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f003 fdf7 	bl	80045c2 <osThreadCreate>
 80009d4:	4603      	mov	r3, r0
 80009d6:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <main+0xe0>)
 80009d8:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, StartTask02, osPriorityIdle, 0, 128);
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <main+0xe4>)
 80009dc:	f107 041c 	add.w	r4, r7, #28
 80009e0:	461d      	mov	r5, r3
 80009e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009e6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80009ea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80009ee:	f107 031c 	add.w	r3, r7, #28
 80009f2:	2100      	movs	r1, #0
 80009f4:	4618      	mov	r0, r3
 80009f6:	f003 fde4 	bl	80045c2 <osThreadCreate>
 80009fa:	4603      	mov	r3, r0
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <main+0xe8>)
 80009fe:	6013      	str	r3, [r2, #0]

  /* definition and creation of Task3 */
  osThreadDef(Task3, StartTask03, osPriorityIdle, 0, 128);
 8000a00:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <main+0xec>)
 8000a02:	463c      	mov	r4, r7
 8000a04:	461d      	mov	r5, r3
 8000a06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task3Handle = osThreadCreate(osThread(Task3), NULL);
 8000a12:	463b      	mov	r3, r7
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fdd3 	bl	80045c2 <osThreadCreate>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <main+0xf0>)
 8000a20:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000a22:	f003 fdc7 	bl	80045b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a26:	e7fe      	b.n	8000a26 <main+0xce>
 8000a28:	20000394 	.word	0x20000394
 8000a2c:	0800768c 	.word	0x0800768c
 8000a30:	20000384 	.word	0x20000384
 8000a34:	080076b0 	.word	0x080076b0
 8000a38:	20000388 	.word	0x20000388
 8000a3c:	080076d4 	.word	0x080076d4
 8000a40:	2000038c 	.word	0x2000038c
 8000a44:	080076f8 	.word	0x080076f8
 8000a48:	20000390 	.word	0x20000390

08000a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b094      	sub	sp, #80	; 0x50
 8000a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a52:	f107 031c 	add.w	r3, r7, #28
 8000a56:	2234      	movs	r2, #52	; 0x34
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f006 f966 	bl	8006d2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b2a      	ldr	r3, [pc, #168]	; (8000b20 <SystemClock_Config+0xd4>)
 8000a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a78:	4a29      	ldr	r2, [pc, #164]	; (8000b20 <SystemClock_Config+0xd4>)
 8000a7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a80:	4b27      	ldr	r3, [pc, #156]	; (8000b20 <SystemClock_Config+0xd4>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	603b      	str	r3, [r7, #0]
 8000a90:	4b24      	ldr	r3, [pc, #144]	; (8000b24 <SystemClock_Config+0xd8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a98:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <SystemClock_Config+0xd8>)
 8000a9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <SystemClock_Config+0xd8>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aac:	2302      	movs	r3, #2
 8000aae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab0:	2301      	movs	r3, #1
 8000ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	2310      	movs	r3, #16
 8000ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000abc:	2300      	movs	r3, #0
 8000abe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac0:	2310      	movs	r3, #16
 8000ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ac4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ac8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000aca:	2304      	movs	r3, #4
 8000acc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ad6:	f107 031c 	add.w	r3, r7, #28
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fbf4 	bl	80032c8 <HAL_RCC_OscConfig>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ae6:	f000 fae7 	bl	80010b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aea:	230f      	movs	r3, #15
 8000aec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aee:	2302      	movs	r3, #2
 8000af0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000afa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	2102      	movs	r1, #2
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f862 	bl	8002bd0 <HAL_RCC_ClockConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b12:	f000 fad1 	bl	80010b8 <Error_Handler>
  }
}
 8000b16:	bf00      	nop
 8000b18:	3750      	adds	r7, #80	; 0x50
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023800 	.word	0x40023800
 8000b24:	40007000 	.word	0x40007000

08000b28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b2e:	4a13      	ldr	r2, [pc, #76]	; (8000b7c <MX_I2C1_Init+0x54>)
 8000b30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000b32:	4b11      	ldr	r3, [pc, #68]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b34:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <MX_I2C1_Init+0x58>)
 8000b36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b38:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4c:	4b0a      	ldr	r3, [pc, #40]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b58:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b5e:	4b06      	ldr	r3, [pc, #24]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b64:	4804      	ldr	r0, [pc, #16]	; (8000b78 <MX_I2C1_Init+0x50>)
 8000b66:	f001 fa67 	bl	8002038 <HAL_I2C_Init>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b70:	f000 faa2 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	200002e8 	.word	0x200002e8
 8000b7c:	40005400 	.word	0x40005400
 8000b80:	00061a80 	.word	0x00061a80

08000b84 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b8a:	4a12      	ldr	r2, [pc, #72]	; (8000bd4 <MX_USART2_UART_Init+0x50>)
 8000b8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b8e:	4b10      	ldr	r3, [pc, #64]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b90:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000baa:	220c      	movs	r2, #12
 8000bac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bae:	4b08      	ldr	r3, [pc, #32]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bba:	4805      	ldr	r0, [pc, #20]	; (8000bd0 <MX_USART2_UART_Init+0x4c>)
 8000bbc:	f003 f8c4 	bl	8003d48 <HAL_UART_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000bc6:	f000 fa77 	bl	80010b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	2000033c 	.word	0x2000033c
 8000bd4:	40004400 	.word	0x40004400

08000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bde:	f107 0314 	add.w	r3, r7, #20
 8000be2:	2200      	movs	r2, #0
 8000be4:	601a      	str	r2, [r3, #0]
 8000be6:	605a      	str	r2, [r3, #4]
 8000be8:	609a      	str	r2, [r3, #8]
 8000bea:	60da      	str	r2, [r3, #12]
 8000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	4b53      	ldr	r3, [pc, #332]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a52      	ldr	r2, [pc, #328]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b50      	ldr	r3, [pc, #320]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	4b4c      	ldr	r3, [pc, #304]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	4a4b      	ldr	r2, [pc, #300]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c18:	6313      	str	r3, [r2, #48]	; 0x30
 8000c1a:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60bb      	str	r3, [r7, #8]
 8000c2a:	4b45      	ldr	r3, [pc, #276]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	4a44      	ldr	r2, [pc, #272]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	6313      	str	r3, [r2, #48]	; 0x30
 8000c36:	4b42      	ldr	r3, [pc, #264]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60bb      	str	r3, [r7, #8]
 8000c40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	4b3e      	ldr	r3, [pc, #248]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b3b      	ldr	r3, [pc, #236]	; (8000d40 <MX_GPIO_Init+0x168>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	210c      	movs	r1, #12
 8000c62:	4838      	ldr	r0, [pc, #224]	; (8000d44 <MX_GPIO_Init+0x16c>)
 8000c64:	f001 f9b4 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5, GPIO_PIN_RESET);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2123      	movs	r1, #35	; 0x23
 8000c6c:	4836      	ldr	r0, [pc, #216]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000c6e:	f001 f9af 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000c78:	4834      	ldr	r0, [pc, #208]	; (8000d4c <MX_GPIO_Init+0x174>)
 8000c7a:	f001 f9a9 	bl	8001fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c7e:	230c      	movs	r3, #12
 8000c80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	; (8000d44 <MX_GPIO_Init+0x16c>)
 8000c96:	f000 ffef 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5;
 8000c9a:	2323      	movs	r3, #35	; 0x23
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 0314 	add.w	r3, r7, #20
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4825      	ldr	r0, [pc, #148]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000cb2:	f000 ffe1 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA7 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8000cb6:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8000cba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	481f      	ldr	r0, [pc, #124]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000ccc:	f000 ffd4 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KC0_Pin KC3_Pin KC1_Pin KC2_Pin */
  GPIO_InitStruct.Pin = KC0_Pin|KC3_Pin|KC1_Pin|KC2_Pin;
 8000cd0:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000cd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4818      	ldr	r0, [pc, #96]	; (8000d4c <MX_GPIO_Init+0x174>)
 8000cea:	f000 ffc5 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR1_Pin */
  GPIO_InitStruct.Pin = KR1_Pin;
 8000cee:	2380      	movs	r3, #128	; 0x80
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4810      	ldr	r0, [pc, #64]	; (8000d44 <MX_GPIO_Init+0x16c>)
 8000d02:	f000 ffb9 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : KR3_Pin KR2_Pin */
  GPIO_InitStruct.Pin = KR3_Pin|KR2_Pin;
 8000d06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d10:	2302      	movs	r3, #2
 8000d12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d14:	f107 0314 	add.w	r3, r7, #20
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480b      	ldr	r0, [pc, #44]	; (8000d48 <MX_GPIO_Init+0x170>)
 8000d1c:	f000 ffac 	bl	8001c78 <HAL_GPIO_Init>

  /*Configure GPIO pin : KR0_Pin */
  GPIO_InitStruct.Pin = KR0_Pin;
 8000d20:	2340      	movs	r3, #64	; 0x40
 8000d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(KR0_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <MX_GPIO_Init+0x174>)
 8000d34:	f000 ffa0 	bl	8001c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d38:	bf00      	nop
 8000d3a:	3728      	adds	r7, #40	; 0x28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400

08000d50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
//	  MX_GPIO_Init();
	for(;;)
	{

		  osDelay(100);
 8000d58:	2064      	movs	r0, #100	; 0x64
 8000d5a:	f003 fc7e 	bl	800465a <osDelay>
		  int val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000d5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d62:	483c      	ldr	r0, [pc, #240]	; (8000e54 <StartDefaultTask+0x104>)
 8000d64:	f001 f91c 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	617b      	str	r3, [r7, #20]
		  osMutexWait(armMutexHandle, osWaitForever);
 8000d6c:	4b3a      	ldr	r3, [pc, #232]	; (8000e58 <StartDefaultTask+0x108>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fc9d 	bl	80046b4 <osMutexWait>
		  int status = armed;
 8000d7a:	4b38      	ldr	r3, [pc, #224]	; (8000e5c <StartDefaultTask+0x10c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
		  osMutexRelease(armMutexHandle);
 8000d80:	4b35      	ldr	r3, [pc, #212]	; (8000e58 <StartDefaultTask+0x108>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4618      	mov	r0, r3
 8000d86:	f003 fce3 	bl	8004750 <osMutexRelease>
		  if (val == GPIO_PIN_SET){
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d151      	bne.n	8000e34 <StartDefaultTask+0xe4>
			  int count = 15;
 8000d90:	230f      	movs	r3, #15
 8000d92:	60fb      	str	r3, [r7, #12]
			  osMutexWait(armMutexHandle, osWaitForever);
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <StartDefaultTask+0x108>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 fc89 	bl	80046b4 <osMutexWait>
			  status = armed;
 8000da2:	4b2e      	ldr	r3, [pc, #184]	; (8000e5c <StartDefaultTask+0x10c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	613b      	str	r3, [r7, #16]
			  osMutexRelease(armMutexHandle);
 8000da8:	4b2b      	ldr	r3, [pc, #172]	; (8000e58 <StartDefaultTask+0x108>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f003 fccf 	bl	8004750 <osMutexRelease>
			  while(status && val){
 8000db2:	e02f      	b.n	8000e14 <StartDefaultTask+0xc4>
				  sprintf(msg, "Timer: %d\n", count);
 8000db4:	68fa      	ldr	r2, [r7, #12]
 8000db6:	492a      	ldr	r1, [pc, #168]	; (8000e60 <StartDefaultTask+0x110>)
 8000db8:	482a      	ldr	r0, [pc, #168]	; (8000e64 <StartDefaultTask+0x114>)
 8000dba:	f005 ff97 	bl	8006cec <siprintf>
				  SSD1306_Puts(msg, &Font_11x18, 1);
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	4929      	ldr	r1, [pc, #164]	; (8000e68 <StartDefaultTask+0x118>)
 8000dc2:	4828      	ldr	r0, [pc, #160]	; (8000e64 <StartDefaultTask+0x114>)
 8000dc4:	f000 fb7e 	bl	80014c4 <SSD1306_Puts>

				  osDelay(1000);
 8000dc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dcc:	f003 fc45 	bl	800465a <osDelay>
				  if(count > 0){
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	dd03      	ble.n	8000dde <StartDefaultTask+0x8e>
					  count--;
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3b01      	subs	r3, #1
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	e004      	b.n	8000de8 <StartDefaultTask+0x98>
				  } else {
					  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8000dde:	2201      	movs	r2, #1
 8000de0:	2108      	movs	r1, #8
 8000de2:	4822      	ldr	r0, [pc, #136]	; (8000e6c <StartDefaultTask+0x11c>)
 8000de4:	f001 f8f4 	bl	8001fd0 <HAL_GPIO_WritePin>
				  }
				  val = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_11);
 8000de8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dec:	4819      	ldr	r0, [pc, #100]	; (8000e54 <StartDefaultTask+0x104>)
 8000dee:	f001 f8d7 	bl	8001fa0 <HAL_GPIO_ReadPin>
 8000df2:	4603      	mov	r3, r0
 8000df4:	617b      	str	r3, [r7, #20]
				  osMutexWait(armMutexHandle, osWaitForever);
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <StartDefaultTask+0x108>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f04f 31ff 	mov.w	r1, #4294967295
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f003 fc58 	bl	80046b4 <osMutexWait>
				  status = armed;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <StartDefaultTask+0x10c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	613b      	str	r3, [r7, #16]
				  osMutexRelease(armMutexHandle);
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <StartDefaultTask+0x108>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f003 fc9e 	bl	8004750 <osMutexRelease>
			  while(status && val){
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d002      	beq.n	8000e20 <StartDefaultTask+0xd0>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1c9      	bne.n	8000db4 <StartDefaultTask+0x64>

			  }
			  SSD1306_Clear();
 8000e20:	f000 fb75 	bl	800150e <SSD1306_Clear>
//					SSD1306_Puts(i, &Font_11x18, 1);
//					osDelay(1000);
//				}
//				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
//			}
			if (pirState == 0){
 8000e24:	4b12      	ldr	r3, [pc, #72]	; (8000e70 <StartDefaultTask+0x120>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d195      	bne.n	8000d58 <StartDefaultTask+0x8>
				pirState =1;
 8000e2c:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <StartDefaultTask+0x120>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e791      	b.n	8000d58 <StartDefaultTask+0x8>
			}
		  } else {
			if(pirState == 1){
 8000e34:	4b0e      	ldr	r3, [pc, #56]	; (8000e70 <StartDefaultTask+0x120>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d18d      	bne.n	8000d58 <StartDefaultTask+0x8>
				if(status == 1){
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d104      	bne.n	8000e4c <StartDefaultTask+0xfc>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2108      	movs	r1, #8
 8000e46:	4809      	ldr	r0, [pc, #36]	; (8000e6c <StartDefaultTask+0x11c>)
 8000e48:	f001 f8c2 	bl	8001fd0 <HAL_GPIO_WritePin>
				}
				pirState = 0;
 8000e4c:	4b08      	ldr	r3, [pc, #32]	; (8000e70 <StartDefaultTask+0x120>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
	{
 8000e52:	e781      	b.n	8000d58 <StartDefaultTask+0x8>
 8000e54:	40020000 	.word	0x40020000
 8000e58:	20000394 	.word	0x20000394
 8000e5c:	20000010 	.word	0x20000010
 8000e60:	08007714 	.word	0x08007714
 8000e64:	2000039c 	.word	0x2000039c
 8000e68:	20000000 	.word	0x20000000
 8000e6c:	40020800 	.word	0x40020800
 8000e70:	20000398 	.word	0x20000398

08000e74 <StartTask01>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask01 */
void StartTask01(void const * argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask01 */
  /* Infinite loop */
	for(;;)
	{
		SSD1306_GotoXY (0,0);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 fa8a 	bl	8001398 <SSD1306_GotoXY>
		//SSD1306_Puts ("Voltage:", &Font_11x18, 1);
		osMutexWait(armMutexHandle, osWaitForever);
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <StartTask01+0x8c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 fc11 	bl	80046b4 <osMutexWait>
		int status = armed;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <StartTask01+0x90>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	60fb      	str	r3, [r7, #12]
		osMutexRelease(armMutexHandle);
 8000e98:	4b19      	ldr	r3, [pc, #100]	; (8000f00 <StartTask01+0x8c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f003 fc57 	bl	8004750 <osMutexRelease>
		if(status==1){
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10f      	bne.n	8000ec8 <StartTask01+0x54>
			SSD1306_Puts ("Armed   ", &Font_11x18, 1);
 8000ea8:	2201      	movs	r2, #1
 8000eaa:	4917      	ldr	r1, [pc, #92]	; (8000f08 <StartTask01+0x94>)
 8000eac:	4817      	ldr	r0, [pc, #92]	; (8000f0c <StartTask01+0x98>)
 8000eae:	f000 fb09 	bl	80014c4 <SSD1306_Puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4816      	ldr	r0, [pc, #88]	; (8000f10 <StartTask01+0x9c>)
 8000eb8:	f001 f88a 	bl	8001fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2102      	movs	r1, #2
 8000ec0:	4813      	ldr	r0, [pc, #76]	; (8000f10 <StartTask01+0x9c>)
 8000ec2:	f001 f885 	bl	8001fd0 <HAL_GPIO_WritePin>
 8000ec6:	e00e      	b.n	8000ee6 <StartTask01+0x72>

		} else {
			SSD1306_Puts ("Disarmed", &Font_11x18, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	490f      	ldr	r1, [pc, #60]	; (8000f08 <StartTask01+0x94>)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <StartTask01+0xa0>)
 8000ece:	f000 faf9 	bl	80014c4 <SSD1306_Puts>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	480e      	ldr	r0, [pc, #56]	; (8000f10 <StartTask01+0x9c>)
 8000ed8:	f001 f87a 	bl	8001fd0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8000edc:	2200      	movs	r2, #0
 8000ede:	2101      	movs	r1, #1
 8000ee0:	480b      	ldr	r0, [pc, #44]	; (8000f10 <StartTask01+0x9c>)
 8000ee2:	f001 f875 	bl	8001fd0 <HAL_GPIO_WritePin>
		}
		SSD1306_GotoXY (0, 30);
 8000ee6:	211e      	movs	r1, #30
 8000ee8:	2000      	movs	r0, #0
 8000eea:	f000 fa55 	bl	8001398 <SSD1306_GotoXY>
		SSD1306_UpdateScreen();
 8000eee:	f000 f9ad 	bl	800124c <SSD1306_UpdateScreen>
//			displayCode[i] = '*';
//		}
//		displayCode[codeLength] = '\0';

//		SSD1306_Puts(displayCode, &Font_11x18, 1);
		SSD1306_UpdateScreen();
 8000ef2:	f000 f9ab 	bl	800124c <SSD1306_UpdateScreen>
		HAL_Delay (50);
 8000ef6:	2032      	movs	r0, #50	; 0x32
 8000ef8:	f000 fdb8 	bl	8001a6c <HAL_Delay>
	{
 8000efc:	e7be      	b.n	8000e7c <StartTask01+0x8>
 8000efe:	bf00      	nop
 8000f00:	20000394 	.word	0x20000394
 8000f04:	20000010 	.word	0x20000010
 8000f08:	20000000 	.word	0x20000000
 8000f0c:	08007720 	.word	0x08007720
 8000f10:	40020000 	.word	0x40020000
 8000f14:	0800772c 	.word	0x0800772c

08000f18 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b082      	sub	sp, #8
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
  /* Infinite loop */
	for(;;) {
			osDelay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f003 fb9a 	bl	800465a <osDelay>

			//osMutexWait(keypadMytexHandleHandle, osWaitForever);
			key = Get_Key();
 8000f26:	f7ff fb49 	bl	80005bc <Get_Key>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4b49      	ldr	r3, [pc, #292]	; (8001054 <StartTask02+0x13c>)
 8000f30:	701a      	strb	r2, [r3, #0]
			//osMutexRelease(keypadMytexHandleHandle);

			if (key == '#') {
 8000f32:	4b48      	ldr	r3, [pc, #288]	; (8001054 <StartTask02+0x13c>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	2b23      	cmp	r3, #35	; 0x23
 8000f38:	d14f      	bne.n	8000fda <StartTask02+0xc2>
				if (!armed) {
 8000f3a:	4b47      	ldr	r3, [pc, #284]	; (8001058 <StartTask02+0x140>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d125      	bne.n	8000f8e <StartTask02+0x76>
					// If the system is not armed, arm it with the entered code
					if (codeLength == 4) {
 8000f42:	4b46      	ldr	r3, [pc, #280]	; (800105c <StartTask02+0x144>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b04      	cmp	r3, #4
 8000f48:	d113      	bne.n	8000f72 <StartTask02+0x5a>
	//					strcpy(userCode, enteredUserCode);
						strcpy(code, enteredUserCode);
 8000f4a:	4945      	ldr	r1, [pc, #276]	; (8001060 <StartTask02+0x148>)
 8000f4c:	4845      	ldr	r0, [pc, #276]	; (8001064 <StartTask02+0x14c>)
 8000f4e:	f005 ff33 	bl	8006db8 <strcpy>
						osMutexWait(armMutexHandle, osWaitForever);
 8000f52:	4b45      	ldr	r3, [pc, #276]	; (8001068 <StartTask02+0x150>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f04f 31ff 	mov.w	r1, #4294967295
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f003 fbaa 	bl	80046b4 <osMutexWait>
						armed = 1;
 8000f60:	4b3d      	ldr	r3, [pc, #244]	; (8001058 <StartTask02+0x140>)
 8000f62:	2201      	movs	r2, #1
 8000f64:	601a      	str	r2, [r3, #0]
						osMutexRelease(armMutexHandle);
 8000f66:	4b40      	ldr	r3, [pc, #256]	; (8001068 <StartTask02+0x150>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fbf0 	bl	8004750 <osMutexRelease>
 8000f70:	e7d6      	b.n	8000f20 <StartTask02+0x8>
					} else {
						// If code length is not 4, it's an invalid code
						SSD1306_Clear();
 8000f72:	f000 facc 	bl	800150e <SSD1306_Clear>
						SSD1306_Puts("INVALID", &Font_11x18, 1);
 8000f76:	2201      	movs	r2, #1
 8000f78:	493c      	ldr	r1, [pc, #240]	; (800106c <StartTask02+0x154>)
 8000f7a:	483d      	ldr	r0, [pc, #244]	; (8001070 <StartTask02+0x158>)
 8000f7c:	f000 faa2 	bl	80014c4 <SSD1306_Puts>
						HAL_Delay (2000);
 8000f80:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f84:	f000 fd72 	bl	8001a6c <HAL_Delay>
						SSD1306_Clear();
 8000f88:	f000 fac1 	bl	800150e <SSD1306_Clear>
 8000f8c:	e7c8      	b.n	8000f20 <StartTask02+0x8>

					}
				} else {
					// If the system is armed, disarm it if the entered code matches
					if (strncmp(code, enteredUserCode, 4) == 0) {
 8000f8e:	2204      	movs	r2, #4
 8000f90:	4933      	ldr	r1, [pc, #204]	; (8001060 <StartTask02+0x148>)
 8000f92:	4834      	ldr	r0, [pc, #208]	; (8001064 <StartTask02+0x14c>)
 8000f94:	f005 fed2 	bl	8006d3c <strncmp>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <StartTask02+0xa6>
						osMutexWait(armMutexHandle, osWaitForever);
 8000f9e:	4b32      	ldr	r3, [pc, #200]	; (8001068 <StartTask02+0x150>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f04f 31ff 	mov.w	r1, #4294967295
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f003 fb84 	bl	80046b4 <osMutexWait>
						armed = 0;
 8000fac:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <StartTask02+0x140>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
						osMutexRelease(armMutexHandle);
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <StartTask02+0x150>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fbca 	bl	8004750 <osMutexRelease>
 8000fbc:	e7b0      	b.n	8000f20 <StartTask02+0x8>
					} else {
						// If code doesn't match, it's an invalid code
						SSD1306_Clear();
 8000fbe:	f000 faa6 	bl	800150e <SSD1306_Clear>
						SSD1306_Puts("INVALID", &Font_11x18, 1);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	4929      	ldr	r1, [pc, #164]	; (800106c <StartTask02+0x154>)
 8000fc6:	482a      	ldr	r0, [pc, #168]	; (8001070 <StartTask02+0x158>)
 8000fc8:	f000 fa7c 	bl	80014c4 <SSD1306_Puts>
						HAL_Delay (2000);
 8000fcc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000fd0:	f000 fd4c 	bl	8001a6c <HAL_Delay>
						SSD1306_Clear();
 8000fd4:	f000 fa9b 	bl	800150e <SSD1306_Clear>
 8000fd8:	e7a2      	b.n	8000f20 <StartTask02+0x8>
					}
				}

			} else {
				// Collect keys to form the entered code
				if (codeLength < 4) {
 8000fda:	4b20      	ldr	r3, [pc, #128]	; (800105c <StartTask02+0x144>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	2b03      	cmp	r3, #3
 8000fe0:	dc2f      	bgt.n	8001042 <StartTask02+0x12a>
					enteredUserCode[codeLength] = key;
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <StartTask02+0x144>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a1b      	ldr	r2, [pc, #108]	; (8001054 <StartTask02+0x13c>)
 8000fe8:	7811      	ldrb	r1, [r2, #0]
 8000fea:	4a1d      	ldr	r2, [pc, #116]	; (8001060 <StartTask02+0x148>)
 8000fec:	54d1      	strb	r1, [r2, r3]
					codeLength++;
 8000fee:	4b1b      	ldr	r3, [pc, #108]	; (800105c <StartTask02+0x144>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <StartTask02+0x144>)
 8000ff6:	6013      	str	r3, [r2, #0]
					sprintf(msg, "code length: %d\n", codeLength);
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <StartTask02+0x144>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	491d      	ldr	r1, [pc, #116]	; (8001074 <StartTask02+0x15c>)
 8001000:	481d      	ldr	r0, [pc, #116]	; (8001078 <StartTask02+0x160>)
 8001002:	f005 fe73 	bl	8006cec <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 8001006:	481c      	ldr	r0, [pc, #112]	; (8001078 <StartTask02+0x160>)
 8001008:	f7ff f902 	bl	8000210 <strlen>
 800100c:	4603      	mov	r3, r0
 800100e:	b29a      	uxth	r2, r3
 8001010:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001014:	4918      	ldr	r1, [pc, #96]	; (8001078 <StartTask02+0x160>)
 8001016:	4819      	ldr	r0, [pc, #100]	; (800107c <StartTask02+0x164>)
 8001018:	f002 fee6 	bl	8003de8 <HAL_UART_Transmit>
					sprintf(msg, "armed: %d\n", armed);
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <StartTask02+0x140>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	461a      	mov	r2, r3
 8001022:	4917      	ldr	r1, [pc, #92]	; (8001080 <StartTask02+0x168>)
 8001024:	4814      	ldr	r0, [pc, #80]	; (8001078 <StartTask02+0x160>)
 8001026:	f005 fe61 	bl	8006cec <siprintf>
					HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 1000);
 800102a:	4813      	ldr	r0, [pc, #76]	; (8001078 <StartTask02+0x160>)
 800102c:	f7ff f8f0 	bl	8000210 <strlen>
 8001030:	4603      	mov	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001038:	490f      	ldr	r1, [pc, #60]	; (8001078 <StartTask02+0x160>)
 800103a:	4810      	ldr	r0, [pc, #64]	; (800107c <StartTask02+0x164>)
 800103c:	f002 fed4 	bl	8003de8 <HAL_UART_Transmit>
 8001040:	e76e      	b.n	8000f20 <StartTask02+0x8>
				} else {
					// If more than 4 keys are entered, reset the code.
					memset(enteredUserCode, 0, sizeof(enteredUserCode));
 8001042:	2205      	movs	r2, #5
 8001044:	2100      	movs	r1, #0
 8001046:	4806      	ldr	r0, [pc, #24]	; (8001060 <StartTask02+0x148>)
 8001048:	f005 fe70 	bl	8006d2c <memset>
					codeLength = 0;
 800104c:	4b03      	ldr	r3, [pc, #12]	; (800105c <StartTask02+0x144>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			osDelay(1);
 8001052:	e765      	b.n	8000f20 <StartTask02+0x8>
 8001054:	20000090 	.word	0x20000090
 8001058:	20000010 	.word	0x20000010
 800105c:	200003d8 	.word	0x200003d8
 8001060:	200003d0 	.word	0x200003d0
 8001064:	20000008 	.word	0x20000008
 8001068:	20000394 	.word	0x20000394
 800106c:	20000000 	.word	0x20000000
 8001070:	08007738 	.word	0x08007738
 8001074:	08007740 	.word	0x08007740
 8001078:	2000039c 	.word	0x2000039c
 800107c:	2000033c 	.word	0x2000033c
 8001080:	08007754 	.word	0x08007754

08001084 <StartTask03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask03 */
void StartTask03(void const * argument)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
//	      	if(pirState == 1){
//	      		pirState = 0;
//	      	}
//	      }

		osDelay(1);
 800108c:	2001      	movs	r0, #1
 800108e:	f003 fae4 	bl	800465a <osDelay>
 8001092:	e7fb      	b.n	800108c <StartTask03+0x8>

08001094 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d101      	bne.n	80010aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010a6:	f000 fcc1 	bl	8001a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40001000 	.word	0x40001000

080010b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010bc:	b672      	cpsid	i
}
 80010be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <Error_Handler+0x8>
	...

080010c4 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010ca:	f000 fa29 	bl	8001520 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010ce:	f644 6320 	movw	r3, #20000	; 0x4e20
 80010d2:	2201      	movs	r2, #1
 80010d4:	2178      	movs	r1, #120	; 0x78
 80010d6:	485b      	ldr	r0, [pc, #364]	; (8001244 <SSD1306_Init+0x180>)
 80010d8:	f001 f9f0 	bl	80024bc <HAL_I2C_IsDeviceReady>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010e2:	2300      	movs	r3, #0
 80010e4:	e0a9      	b.n	800123a <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80010e6:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80010ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010ec:	e002      	b.n	80010f4 <SSD1306_Init+0x30>
		p--;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	3b01      	subs	r3, #1
 80010f2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d1f9      	bne.n	80010ee <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010fa:	22ae      	movs	r2, #174	; 0xae
 80010fc:	2100      	movs	r1, #0
 80010fe:	2078      	movs	r0, #120	; 0x78
 8001100:	f000 fa8a 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001104:	2220      	movs	r2, #32
 8001106:	2100      	movs	r1, #0
 8001108:	2078      	movs	r0, #120	; 0x78
 800110a:	f000 fa85 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800110e:	2210      	movs	r2, #16
 8001110:	2100      	movs	r1, #0
 8001112:	2078      	movs	r0, #120	; 0x78
 8001114:	f000 fa80 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001118:	22b0      	movs	r2, #176	; 0xb0
 800111a:	2100      	movs	r1, #0
 800111c:	2078      	movs	r0, #120	; 0x78
 800111e:	f000 fa7b 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001122:	22c8      	movs	r2, #200	; 0xc8
 8001124:	2100      	movs	r1, #0
 8001126:	2078      	movs	r0, #120	; 0x78
 8001128:	f000 fa76 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2078      	movs	r0, #120	; 0x78
 8001132:	f000 fa71 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001136:	2210      	movs	r2, #16
 8001138:	2100      	movs	r1, #0
 800113a:	2078      	movs	r0, #120	; 0x78
 800113c:	f000 fa6c 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001140:	2240      	movs	r2, #64	; 0x40
 8001142:	2100      	movs	r1, #0
 8001144:	2078      	movs	r0, #120	; 0x78
 8001146:	f000 fa67 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800114a:	2281      	movs	r2, #129	; 0x81
 800114c:	2100      	movs	r1, #0
 800114e:	2078      	movs	r0, #120	; 0x78
 8001150:	f000 fa62 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001154:	22ff      	movs	r2, #255	; 0xff
 8001156:	2100      	movs	r1, #0
 8001158:	2078      	movs	r0, #120	; 0x78
 800115a:	f000 fa5d 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800115e:	22a1      	movs	r2, #161	; 0xa1
 8001160:	2100      	movs	r1, #0
 8001162:	2078      	movs	r0, #120	; 0x78
 8001164:	f000 fa58 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001168:	22a6      	movs	r2, #166	; 0xa6
 800116a:	2100      	movs	r1, #0
 800116c:	2078      	movs	r0, #120	; 0x78
 800116e:	f000 fa53 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001172:	22a8      	movs	r2, #168	; 0xa8
 8001174:	2100      	movs	r1, #0
 8001176:	2078      	movs	r0, #120	; 0x78
 8001178:	f000 fa4e 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800117c:	223f      	movs	r2, #63	; 0x3f
 800117e:	2100      	movs	r1, #0
 8001180:	2078      	movs	r0, #120	; 0x78
 8001182:	f000 fa49 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001186:	22a4      	movs	r2, #164	; 0xa4
 8001188:	2100      	movs	r1, #0
 800118a:	2078      	movs	r0, #120	; 0x78
 800118c:	f000 fa44 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001190:	22d3      	movs	r2, #211	; 0xd3
 8001192:	2100      	movs	r1, #0
 8001194:	2078      	movs	r0, #120	; 0x78
 8001196:	f000 fa3f 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2078      	movs	r0, #120	; 0x78
 80011a0:	f000 fa3a 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80011a4:	22d5      	movs	r2, #213	; 0xd5
 80011a6:	2100      	movs	r1, #0
 80011a8:	2078      	movs	r0, #120	; 0x78
 80011aa:	f000 fa35 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011ae:	22f0      	movs	r2, #240	; 0xf0
 80011b0:	2100      	movs	r1, #0
 80011b2:	2078      	movs	r0, #120	; 0x78
 80011b4:	f000 fa30 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011b8:	22d9      	movs	r2, #217	; 0xd9
 80011ba:	2100      	movs	r1, #0
 80011bc:	2078      	movs	r0, #120	; 0x78
 80011be:	f000 fa2b 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011c2:	2222      	movs	r2, #34	; 0x22
 80011c4:	2100      	movs	r1, #0
 80011c6:	2078      	movs	r0, #120	; 0x78
 80011c8:	f000 fa26 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011cc:	22da      	movs	r2, #218	; 0xda
 80011ce:	2100      	movs	r1, #0
 80011d0:	2078      	movs	r0, #120	; 0x78
 80011d2:	f000 fa21 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011d6:	2212      	movs	r2, #18
 80011d8:	2100      	movs	r1, #0
 80011da:	2078      	movs	r0, #120	; 0x78
 80011dc:	f000 fa1c 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011e0:	22db      	movs	r2, #219	; 0xdb
 80011e2:	2100      	movs	r1, #0
 80011e4:	2078      	movs	r0, #120	; 0x78
 80011e6:	f000 fa17 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011ea:	2220      	movs	r2, #32
 80011ec:	2100      	movs	r1, #0
 80011ee:	2078      	movs	r0, #120	; 0x78
 80011f0:	f000 fa12 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011f4:	228d      	movs	r2, #141	; 0x8d
 80011f6:	2100      	movs	r1, #0
 80011f8:	2078      	movs	r0, #120	; 0x78
 80011fa:	f000 fa0d 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011fe:	2214      	movs	r2, #20
 8001200:	2100      	movs	r1, #0
 8001202:	2078      	movs	r0, #120	; 0x78
 8001204:	f000 fa08 	bl	8001618 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001208:	22af      	movs	r2, #175	; 0xaf
 800120a:	2100      	movs	r1, #0
 800120c:	2078      	movs	r0, #120	; 0x78
 800120e:	f000 fa03 	bl	8001618 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001212:	222e      	movs	r2, #46	; 0x2e
 8001214:	2100      	movs	r1, #0
 8001216:	2078      	movs	r0, #120	; 0x78
 8001218:	f000 f9fe 	bl	8001618 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800121c:	2000      	movs	r0, #0
 800121e:	f000 f843 	bl	80012a8 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001222:	f000 f813 	bl	800124c <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <SSD1306_Init+0x184>)
 8001228:	2200      	movs	r2, #0
 800122a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SSD1306_Init+0x184>)
 800122e:	2200      	movs	r2, #0
 8001230:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001232:	4b05      	ldr	r3, [pc, #20]	; (8001248 <SSD1306_Init+0x184>)
 8001234:	2201      	movs	r2, #1
 8001236:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002e8 	.word	0x200002e8
 8001248:	200007dc 	.word	0x200007dc

0800124c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
 8001256:	e01d      	b.n	8001294 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	3b50      	subs	r3, #80	; 0x50
 800125c:	b2db      	uxtb	r3, r3
 800125e:	461a      	mov	r2, r3
 8001260:	2100      	movs	r1, #0
 8001262:	2078      	movs	r0, #120	; 0x78
 8001264:	f000 f9d8 	bl	8001618 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001268:	2200      	movs	r2, #0
 800126a:	2100      	movs	r1, #0
 800126c:	2078      	movs	r0, #120	; 0x78
 800126e:	f000 f9d3 	bl	8001618 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001272:	2210      	movs	r2, #16
 8001274:	2100      	movs	r1, #0
 8001276:	2078      	movs	r0, #120	; 0x78
 8001278:	f000 f9ce 	bl	8001618 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <SSD1306_UpdateScreen+0x58>)
 8001282:	441a      	add	r2, r3
 8001284:	2380      	movs	r3, #128	; 0x80
 8001286:	2140      	movs	r1, #64	; 0x40
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f000 f95f 	bl	800154c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	3301      	adds	r3, #1
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	2b07      	cmp	r3, #7
 8001298:	d9de      	bls.n	8001258 <SSD1306_UpdateScreen+0xc>
	}
}
 800129a:	bf00      	nop
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200003dc 	.word	0x200003dc

080012a8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <SSD1306_Fill+0x14>
 80012b8:	2300      	movs	r3, #0
 80012ba:	e000      	b.n	80012be <SSD1306_Fill+0x16>
 80012bc:	23ff      	movs	r3, #255	; 0xff
 80012be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012c2:	4619      	mov	r1, r3
 80012c4:	4803      	ldr	r0, [pc, #12]	; (80012d4 <SSD1306_Fill+0x2c>)
 80012c6:	f005 fd31 	bl	8006d2c <memset>
}
 80012ca:	bf00      	nop
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200003dc 	.word	0x200003dc

080012d8 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	80fb      	strh	r3, [r7, #6]
 80012e2:	460b      	mov	r3, r1
 80012e4:	80bb      	strh	r3, [r7, #4]
 80012e6:	4613      	mov	r3, r2
 80012e8:	70fb      	strb	r3, [r7, #3]
	if (
 80012ea:	88fb      	ldrh	r3, [r7, #6]
 80012ec:	2b7f      	cmp	r3, #127	; 0x7f
 80012ee:	d848      	bhi.n	8001382 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012f0:	88bb      	ldrh	r3, [r7, #4]
 80012f2:	2b3f      	cmp	r3, #63	; 0x3f
 80012f4:	d845      	bhi.n	8001382 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012f6:	4b26      	ldr	r3, [pc, #152]	; (8001390 <SSD1306_DrawPixel+0xb8>)
 80012f8:	791b      	ldrb	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d006      	beq.n	800130c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012fe:	78fb      	ldrb	r3, [r7, #3]
 8001300:	2b00      	cmp	r3, #0
 8001302:	bf0c      	ite	eq
 8001304:	2301      	moveq	r3, #1
 8001306:	2300      	movne	r3, #0
 8001308:	b2db      	uxtb	r3, r3
 800130a:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800130c:	78fb      	ldrb	r3, [r7, #3]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d11a      	bne.n	8001348 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	88bb      	ldrh	r3, [r7, #4]
 8001316:	08db      	lsrs	r3, r3, #3
 8001318:	b298      	uxth	r0, r3
 800131a:	4603      	mov	r3, r0
 800131c:	01db      	lsls	r3, r3, #7
 800131e:	4413      	add	r3, r2
 8001320:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <SSD1306_DrawPixel+0xbc>)
 8001322:	5cd3      	ldrb	r3, [r2, r3]
 8001324:	b25a      	sxtb	r2, r3
 8001326:	88bb      	ldrh	r3, [r7, #4]
 8001328:	f003 0307 	and.w	r3, r3, #7
 800132c:	2101      	movs	r1, #1
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	b25b      	sxtb	r3, r3
 8001334:	4313      	orrs	r3, r2
 8001336:	b259      	sxtb	r1, r3
 8001338:	88fa      	ldrh	r2, [r7, #6]
 800133a:	4603      	mov	r3, r0
 800133c:	01db      	lsls	r3, r3, #7
 800133e:	4413      	add	r3, r2
 8001340:	b2c9      	uxtb	r1, r1
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <SSD1306_DrawPixel+0xbc>)
 8001344:	54d1      	strb	r1, [r2, r3]
 8001346:	e01d      	b.n	8001384 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001348:	88fa      	ldrh	r2, [r7, #6]
 800134a:	88bb      	ldrh	r3, [r7, #4]
 800134c:	08db      	lsrs	r3, r3, #3
 800134e:	b298      	uxth	r0, r3
 8001350:	4603      	mov	r3, r0
 8001352:	01db      	lsls	r3, r3, #7
 8001354:	4413      	add	r3, r2
 8001356:	4a0f      	ldr	r2, [pc, #60]	; (8001394 <SSD1306_DrawPixel+0xbc>)
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	b25a      	sxtb	r2, r3
 800135c:	88bb      	ldrh	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	2101      	movs	r1, #1
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	b25b      	sxtb	r3, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	b25b      	sxtb	r3, r3
 800136e:	4013      	ands	r3, r2
 8001370:	b259      	sxtb	r1, r3
 8001372:	88fa      	ldrh	r2, [r7, #6]
 8001374:	4603      	mov	r3, r0
 8001376:	01db      	lsls	r3, r3, #7
 8001378:	4413      	add	r3, r2
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	4a05      	ldr	r2, [pc, #20]	; (8001394 <SSD1306_DrawPixel+0xbc>)
 800137e:	54d1      	strb	r1, [r2, r3]
 8001380:	e000      	b.n	8001384 <SSD1306_DrawPixel+0xac>
		return;
 8001382:	bf00      	nop
	}
}
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	200007dc 	.word	0x200007dc
 8001394:	200003dc 	.word	0x200003dc

08001398 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	80fb      	strh	r3, [r7, #6]
 80013a4:	4613      	mov	r3, r2
 80013a6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80013a8:	4a05      	ldr	r2, [pc, #20]	; (80013c0 <SSD1306_GotoXY+0x28>)
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013ae:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <SSD1306_GotoXY+0x28>)
 80013b0:	88bb      	ldrh	r3, [r7, #4]
 80013b2:	8053      	strh	r3, [r2, #2]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	200007dc 	.word	0x200007dc

080013c4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	6039      	str	r1, [r7, #0]
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013d4:	4b3a      	ldr	r3, [pc, #232]	; (80014c0 <SSD1306_Putc+0xfc>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
	if (
 80013e0:	2b7f      	cmp	r3, #127	; 0x7f
 80013e2:	dc07      	bgt.n	80013f4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013e4:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <SSD1306_Putc+0xfc>)
 80013e6:	885b      	ldrh	r3, [r3, #2]
 80013e8:	461a      	mov	r2, r3
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	785b      	ldrb	r3, [r3, #1]
 80013ee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013f0:	2b3f      	cmp	r3, #63	; 0x3f
 80013f2:	dd01      	ble.n	80013f8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013f4:	2300      	movs	r3, #0
 80013f6:	e05e      	b.n	80014b6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e04b      	b.n	8001496 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685a      	ldr	r2, [r3, #4]
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	3b20      	subs	r3, #32
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	7849      	ldrb	r1, [r1, #1]
 800140a:	fb01 f303 	mul.w	r3, r1, r3
 800140e:	4619      	mov	r1, r3
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	440b      	add	r3, r1
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	881b      	ldrh	r3, [r3, #0]
 800141a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800141c:	2300      	movs	r3, #0
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	e030      	b.n	8001484 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d010      	beq.n	8001454 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <SSD1306_Putc+0xfc>)
 8001434:	881a      	ldrh	r2, [r3, #0]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4413      	add	r3, r2
 800143c:	b298      	uxth	r0, r3
 800143e:	4b20      	ldr	r3, [pc, #128]	; (80014c0 <SSD1306_Putc+0xfc>)
 8001440:	885a      	ldrh	r2, [r3, #2]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	b29b      	uxth	r3, r3
 8001446:	4413      	add	r3, r2
 8001448:	b29b      	uxth	r3, r3
 800144a:	79ba      	ldrb	r2, [r7, #6]
 800144c:	4619      	mov	r1, r3
 800144e:	f7ff ff43 	bl	80012d8 <SSD1306_DrawPixel>
 8001452:	e014      	b.n	800147e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <SSD1306_Putc+0xfc>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b298      	uxth	r0, r3
 8001460:	4b17      	ldr	r3, [pc, #92]	; (80014c0 <SSD1306_Putc+0xfc>)
 8001462:	885a      	ldrh	r2, [r3, #2]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	b29b      	uxth	r3, r3
 8001468:	4413      	add	r3, r2
 800146a:	b299      	uxth	r1, r3
 800146c:	79bb      	ldrb	r3, [r7, #6]
 800146e:	2b00      	cmp	r3, #0
 8001470:	bf0c      	ite	eq
 8001472:	2301      	moveq	r3, #1
 8001474:	2300      	movne	r3, #0
 8001476:	b2db      	uxtb	r3, r3
 8001478:	461a      	mov	r2, r3
 800147a:	f7ff ff2d 	bl	80012d8 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	3301      	adds	r3, #1
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	4293      	cmp	r3, r2
 800148e:	d3c8      	bcc.n	8001422 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	3301      	adds	r3, #1
 8001494:	617b      	str	r3, [r7, #20]
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	785b      	ldrb	r3, [r3, #1]
 800149a:	461a      	mov	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	4293      	cmp	r3, r2
 80014a0:	d3ad      	bcc.n	80013fe <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80014a2:	4b07      	ldr	r3, [pc, #28]	; (80014c0 <SSD1306_Putc+0xfc>)
 80014a4:	881a      	ldrh	r2, [r3, #0]
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	4413      	add	r3, r2
 80014ae:	b29a      	uxth	r2, r3
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <SSD1306_Putc+0xfc>)
 80014b2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80014b4:	79fb      	ldrb	r3, [r7, #7]
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200007dc 	.word	0x200007dc

080014c4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	60b9      	str	r1, [r7, #8]
 80014ce:	4613      	mov	r3, r2
 80014d0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014d2:	e012      	b.n	80014fa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	79fa      	ldrb	r2, [r7, #7]
 80014da:	68b9      	ldr	r1, [r7, #8]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff71 	bl	80013c4 <SSD1306_Putc>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d002      	beq.n	80014f4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	e008      	b.n	8001506 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	3301      	adds	r3, #1
 80014f8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d1e8      	bne.n	80014d4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	781b      	ldrb	r3, [r3, #0]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001512:	2000      	movs	r0, #0
 8001514:	f7ff fec8 	bl	80012a8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001518:	f7ff fe98 	bl	800124c <SSD1306_UpdateScreen>
}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}

08001520 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <ssd1306_I2C_Init+0x28>)
 8001528:	607b      	str	r3, [r7, #4]
	while(p>0)
 800152a:	e002      	b.n	8001532 <ssd1306_I2C_Init+0x12>
		p--;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f9      	bne.n	800152c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	0003d090 	.word	0x0003d090

0800154c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 800154c:	b590      	push	{r4, r7, lr}
 800154e:	b0c7      	sub	sp, #284	; 0x11c
 8001550:	af02      	add	r7, sp, #8
 8001552:	4604      	mov	r4, r0
 8001554:	4608      	mov	r0, r1
 8001556:	f507 7188 	add.w	r1, r7, #272	; 0x110
 800155a:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800155e:	600a      	str	r2, [r1, #0]
 8001560:	4619      	mov	r1, r3
 8001562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001566:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800156a:	4622      	mov	r2, r4
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001572:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001576:	4602      	mov	r2, r0
 8001578:	701a      	strb	r2, [r3, #0]
 800157a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800157e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001582:	460a      	mov	r2, r1
 8001584:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001586:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800158a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800158e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001592:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001596:	7812      	ldrb	r2, [r2, #0]
 8001598:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 800159a:	2300      	movs	r3, #0
 800159c:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015a0:	e015      	b.n	80015ce <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80015a2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015aa:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	441a      	add	r2, r3
 80015b2:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015b6:	3301      	adds	r3, #1
 80015b8:	7811      	ldrb	r1, [r2, #0]
 80015ba:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015be:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80015c2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015c4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015c8:	3301      	adds	r3, #1
 80015ca:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80015ce:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80015d8:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80015dc:	8812      	ldrh	r2, [r2, #0]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d8df      	bhi.n	80015a2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015e2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015e6:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	b299      	uxth	r1, r3
 80015ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80015f2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80015f6:	881b      	ldrh	r3, [r3, #0]
 80015f8:	3301      	adds	r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	f107 020c 	add.w	r2, r7, #12
 8001600:	200a      	movs	r0, #10
 8001602:	9000      	str	r0, [sp, #0]
 8001604:	4803      	ldr	r0, [pc, #12]	; (8001614 <ssd1306_I2C_WriteMulti+0xc8>)
 8001606:	f000 fe5b 	bl	80022c0 <HAL_I2C_Master_Transmit>
}
 800160a:	bf00      	nop
 800160c:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001610:	46bd      	mov	sp, r7
 8001612:	bd90      	pop	{r4, r7, pc}
 8001614:	200002e8 	.word	0x200002e8

08001618 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af02      	add	r7, sp, #8
 800161e:	4603      	mov	r3, r0
 8001620:	71fb      	strb	r3, [r7, #7]
 8001622:	460b      	mov	r3, r1
 8001624:	71bb      	strb	r3, [r7, #6]
 8001626:	4613      	mov	r3, r2
 8001628:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800162a:	79bb      	ldrb	r3, [r7, #6]
 800162c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	b299      	uxth	r1, r3
 8001636:	f107 020c 	add.w	r2, r7, #12
 800163a:	230a      	movs	r3, #10
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2302      	movs	r3, #2
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <ssd1306_I2C_Write+0x38>)
 8001642:	f000 fe3d 	bl	80022c0 <HAL_I2C_Master_Transmit>
}
 8001646:	bf00      	nop
 8001648:	3710      	adds	r7, #16
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	200002e8 	.word	0x200002e8

08001654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800165a:	2300      	movs	r3, #0
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_MspInit+0x54>)
 8001660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001662:	4a11      	ldr	r2, [pc, #68]	; (80016a8 <HAL_MspInit+0x54>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6453      	str	r3, [r2, #68]	; 0x44
 800166a:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <HAL_MspInit+0x54>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	607b      	str	r3, [r7, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <HAL_MspInit+0x54>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a0a      	ldr	r2, [pc, #40]	; (80016a8 <HAL_MspInit+0x54>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <HAL_MspInit+0x54>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001692:	2200      	movs	r2, #0
 8001694:	210f      	movs	r1, #15
 8001696:	f06f 0001 	mvn.w	r0, #1
 800169a:	f000 fac3 	bl	8001c24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40023800 	.word	0x40023800

080016ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	; 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	; (8001730 <HAL_I2C_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12c      	bne.n	8001728 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	; (8001734 <HAL_I2C_MspInit+0x88>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a17      	ldr	r2, [pc, #92]	; (8001734 <HAL_I2C_MspInit+0x88>)
 80016d8:	f043 0302 	orr.w	r3, r3, #2
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b15      	ldr	r3, [pc, #84]	; (8001734 <HAL_I2C_MspInit+0x88>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80016ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f0:	2312      	movs	r3, #18
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f8:	2303      	movs	r3, #3
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016fc:	2304      	movs	r3, #4
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0314 	add.w	r3, r7, #20
 8001704:	4619      	mov	r1, r3
 8001706:	480c      	ldr	r0, [pc, #48]	; (8001738 <HAL_I2C_MspInit+0x8c>)
 8001708:	f000 fab6 	bl	8001c78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170c:	2300      	movs	r3, #0
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	4b08      	ldr	r3, [pc, #32]	; (8001734 <HAL_I2C_MspInit+0x88>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	4a07      	ldr	r2, [pc, #28]	; (8001734 <HAL_I2C_MspInit+0x88>)
 8001716:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800171a:	6413      	str	r3, [r2, #64]	; 0x40
 800171c:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_I2C_MspInit+0x88>)
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001724:	60fb      	str	r3, [r7, #12]
 8001726:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001728:	bf00      	nop
 800172a:	3728      	adds	r7, #40	; 0x28
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40005400 	.word	0x40005400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020400 	.word	0x40020400

0800173c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b08a      	sub	sp, #40	; 0x28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	f107 0314 	add.w	r3, r7, #20
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <HAL_UART_MspInit+0x84>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d12b      	bne.n	80017b6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b18      	ldr	r3, [pc, #96]	; (80017c4 <HAL_UART_MspInit+0x88>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	4a17      	ldr	r2, [pc, #92]	; (80017c4 <HAL_UART_MspInit+0x88>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6413      	str	r3, [r2, #64]	; 0x40
 800176e:	4b15      	ldr	r3, [pc, #84]	; (80017c4 <HAL_UART_MspInit+0x88>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_UART_MspInit+0x88>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a10      	ldr	r2, [pc, #64]	; (80017c4 <HAL_UART_MspInit+0x88>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <HAL_UART_MspInit+0x88>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001796:	230c      	movs	r3, #12
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017a6:	2307      	movs	r3, #7
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <HAL_UART_MspInit+0x8c>)
 80017b2:	f000 fa61 	bl	8001c78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017b6:	bf00      	nop
 80017b8:	3728      	adds	r7, #40	; 0x28
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40004400 	.word	0x40004400
 80017c4:	40023800 	.word	0x40023800
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08e      	sub	sp, #56	; 0x38
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	4b33      	ldr	r3, [pc, #204]	; (80018b0 <HAL_InitTick+0xe4>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e4:	4a32      	ldr	r2, [pc, #200]	; (80018b0 <HAL_InitTick+0xe4>)
 80017e6:	f043 0310 	orr.w	r3, r3, #16
 80017ea:	6413      	str	r3, [r2, #64]	; 0x40
 80017ec:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <HAL_InitTick+0xe4>)
 80017ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f0:	f003 0310 	and.w	r3, r3, #16
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017f8:	f107 0210 	add.w	r2, r7, #16
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4611      	mov	r1, r2
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fafe 	bl	8002e04 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001808:	6a3b      	ldr	r3, [r7, #32]
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800180c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800180e:	2b00      	cmp	r3, #0
 8001810:	d103      	bne.n	800181a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001812:	f001 facf 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8001816:	6378      	str	r0, [r7, #52]	; 0x34
 8001818:	e004      	b.n	8001824 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800181a:	f001 facb 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 800181e:	4603      	mov	r3, r0
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001826:	4a23      	ldr	r2, [pc, #140]	; (80018b4 <HAL_InitTick+0xe8>)
 8001828:	fba2 2303 	umull	r2, r3, r2, r3
 800182c:	0c9b      	lsrs	r3, r3, #18
 800182e:	3b01      	subs	r3, #1
 8001830:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001832:	4b21      	ldr	r3, [pc, #132]	; (80018b8 <HAL_InitTick+0xec>)
 8001834:	4a21      	ldr	r2, [pc, #132]	; (80018bc <HAL_InitTick+0xf0>)
 8001836:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <HAL_InitTick+0xec>)
 800183a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800183e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001840:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <HAL_InitTick+0xec>)
 8001842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001844:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001846:	4b1c      	ldr	r3, [pc, #112]	; (80018b8 <HAL_InitTick+0xec>)
 8001848:	2200      	movs	r2, #0
 800184a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800184c:	4b1a      	ldr	r3, [pc, #104]	; (80018b8 <HAL_InitTick+0xec>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001852:	4b19      	ldr	r3, [pc, #100]	; (80018b8 <HAL_InitTick+0xec>)
 8001854:	2200      	movs	r2, #0
 8001856:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001858:	4817      	ldr	r0, [pc, #92]	; (80018b8 <HAL_InitTick+0xec>)
 800185a:	f001 ffd3 	bl	8003804 <HAL_TIM_Base_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001864:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001868:	2b00      	cmp	r3, #0
 800186a:	d11b      	bne.n	80018a4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <HAL_InitTick+0xec>)
 800186e:	f002 f823 	bl	80038b8 <HAL_TIM_Base_Start_IT>
 8001872:	4603      	mov	r3, r0
 8001874:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001878:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800187c:	2b00      	cmp	r3, #0
 800187e:	d111      	bne.n	80018a4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001880:	2036      	movs	r0, #54	; 0x36
 8001882:	f000 f9eb 	bl	8001c5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d808      	bhi.n	800189e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	2036      	movs	r0, #54	; 0x36
 8001892:	f000 f9c7 	bl	8001c24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001896:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <HAL_InitTick+0xf4>)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	e002      	b.n	80018a4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018a4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3738      	adds	r7, #56	; 0x38
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	431bde83 	.word	0x431bde83
 80018b8:	200007e4 	.word	0x200007e4
 80018bc:	40001000 	.word	0x40001000
 80018c0:	20000018 	.word	0x20000018

080018c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80018c8:	e7fe      	b.n	80018c8 <NMI_Handler+0x4>

080018ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018ce:	e7fe      	b.n	80018ce <HardFault_Handler+0x4>

080018d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <MemManage_Handler+0x4>

080018d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018da:	e7fe      	b.n	80018da <BusFault_Handler+0x4>

080018dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <UsageFault_Handler+0x4>

080018e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <TIM6_DAC_IRQHandler+0x10>)
 80018f6:	f002 f84f 	bl	8003998 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200007e4 	.word	0x200007e4

08001904 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b086      	sub	sp, #24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800190c:	4a14      	ldr	r2, [pc, #80]	; (8001960 <_sbrk+0x5c>)
 800190e:	4b15      	ldr	r3, [pc, #84]	; (8001964 <_sbrk+0x60>)
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001918:	4b13      	ldr	r3, [pc, #76]	; (8001968 <_sbrk+0x64>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d102      	bne.n	8001926 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001920:	4b11      	ldr	r3, [pc, #68]	; (8001968 <_sbrk+0x64>)
 8001922:	4a12      	ldr	r2, [pc, #72]	; (800196c <_sbrk+0x68>)
 8001924:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001926:	4b10      	ldr	r3, [pc, #64]	; (8001968 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	429a      	cmp	r2, r3
 8001932:	d207      	bcs.n	8001944 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001934:	f005 fa14 	bl	8006d60 <__errno>
 8001938:	4603      	mov	r3, r0
 800193a:	220c      	movs	r2, #12
 800193c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800193e:	f04f 33ff 	mov.w	r3, #4294967295
 8001942:	e009      	b.n	8001958 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001944:	4b08      	ldr	r3, [pc, #32]	; (8001968 <_sbrk+0x64>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800194a:	4b07      	ldr	r3, [pc, #28]	; (8001968 <_sbrk+0x64>)
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4413      	add	r3, r2
 8001952:	4a05      	ldr	r2, [pc, #20]	; (8001968 <_sbrk+0x64>)
 8001954:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001956:	68fb      	ldr	r3, [r7, #12]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	20020000 	.word	0x20020000
 8001964:	00000400 	.word	0x00000400
 8001968:	2000082c 	.word	0x2000082c
 800196c:	200046d0 	.word	0x200046d0

08001970 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <SystemInit+0x20>)
 8001976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800197a:	4a05      	ldr	r2, [pc, #20]	; (8001990 <SystemInit+0x20>)
 800197c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001980:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	e000ed00 	.word	0xe000ed00

08001994 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001994:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001998:	f7ff ffea 	bl	8001970 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800199c:	480c      	ldr	r0, [pc, #48]	; (80019d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800199e:	490d      	ldr	r1, [pc, #52]	; (80019d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019a0:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019a4:	e002      	b.n	80019ac <LoopCopyDataInit>

080019a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019aa:	3304      	adds	r3, #4

080019ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019b0:	d3f9      	bcc.n	80019a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019b4:	4c0a      	ldr	r4, [pc, #40]	; (80019e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019b8:	e001      	b.n	80019be <LoopFillZerobss>

080019ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019bc:	3204      	adds	r2, #4

080019be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019c0:	d3fb      	bcc.n	80019ba <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80019c2:	f005 f9d3 	bl	8006d6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019c6:	f7fe ffc7 	bl	8000958 <main>
  bx  lr    
 80019ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019d4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80019d8:	08008520 	.word	0x08008520
  ldr r2, =_sbss
 80019dc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80019e0:	200046d0 	.word	0x200046d0

080019e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019e4:	e7fe      	b.n	80019e4 <ADC_IRQHandler>
	...

080019e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0d      	ldr	r2, [pc, #52]	; (8001a28 <HAL_Init+0x40>)
 80019f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019f8:	4b0b      	ldr	r3, [pc, #44]	; (8001a28 <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a0a      	ldr	r2, [pc, #40]	; (8001a28 <HAL_Init+0x40>)
 80019fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <HAL_Init+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	; (8001a28 <HAL_Init+0x40>)
 8001a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a10:	2003      	movs	r0, #3
 8001a12:	f000 f8fc 	bl	8001c0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fed8 	bl	80017cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a1c:	f7ff fe1a 	bl	8001654 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a20:	2300      	movs	r3, #0
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000001c 	.word	0x2000001c
 8001a50:	20000830 	.word	0x20000830

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000830 	.word	0x20000830

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000001c 	.word	0x2000001c

08001ab4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac4:	4b0c      	ldr	r3, [pc, #48]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac6:	68db      	ldr	r3, [r3, #12]
 8001ac8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aca:	68ba      	ldr	r2, [r7, #8]
 8001acc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001adc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ae6:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	60d3      	str	r3, [r2, #12]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b00:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <__NVIC_GetPriorityGrouping+0x18>)
 8001b02:	68db      	ldr	r3, [r3, #12]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0307 	and.w	r3, r3, #7
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	db0b      	blt.n	8001b42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b2a:	79fb      	ldrb	r3, [r7, #7]
 8001b2c:	f003 021f 	and.w	r2, r3, #31
 8001b30:	4907      	ldr	r1, [pc, #28]	; (8001b50 <__NVIC_EnableIRQ+0x38>)
 8001b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b36:	095b      	lsrs	r3, r3, #5
 8001b38:	2001      	movs	r0, #1
 8001b3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000e100 	.word	0xe000e100

08001b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	db0a      	blt.n	8001b7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	b2da      	uxtb	r2, r3
 8001b6c:	490c      	ldr	r1, [pc, #48]	; (8001ba0 <__NVIC_SetPriority+0x4c>)
 8001b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b72:	0112      	lsls	r2, r2, #4
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	440b      	add	r3, r1
 8001b78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b7c:	e00a      	b.n	8001b94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	b2da      	uxtb	r2, r3
 8001b82:	4908      	ldr	r1, [pc, #32]	; (8001ba4 <__NVIC_SetPriority+0x50>)
 8001b84:	79fb      	ldrb	r3, [r7, #7]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	3b04      	subs	r3, #4
 8001b8c:	0112      	lsls	r2, r2, #4
 8001b8e:	b2d2      	uxtb	r2, r2
 8001b90:	440b      	add	r3, r1
 8001b92:	761a      	strb	r2, [r3, #24]
}
 8001b94:	bf00      	nop
 8001b96:	370c      	adds	r7, #12
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	e000e100 	.word	0xe000e100
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	; 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0307 	and.w	r3, r3, #7
 8001bba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	f1c3 0307 	rsb	r3, r3, #7
 8001bc2:	2b04      	cmp	r3, #4
 8001bc4:	bf28      	it	cs
 8001bc6:	2304      	movcs	r3, #4
 8001bc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3304      	adds	r3, #4
 8001bce:	2b06      	cmp	r3, #6
 8001bd0:	d902      	bls.n	8001bd8 <NVIC_EncodePriority+0x30>
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3b03      	subs	r3, #3
 8001bd6:	e000      	b.n	8001bda <NVIC_EncodePriority+0x32>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43da      	mvns	r2, r3
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	401a      	ands	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c00:	4313      	orrs	r3, r2
         );
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	; 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b082      	sub	sp, #8
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	f7ff ff4c 	bl	8001ab4 <__NVIC_SetPriorityGrouping>
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c36:	f7ff ff61 	bl	8001afc <__NVIC_GetPriorityGrouping>
 8001c3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	68b9      	ldr	r1, [r7, #8]
 8001c40:	6978      	ldr	r0, [r7, #20]
 8001c42:	f7ff ffb1 	bl	8001ba8 <NVIC_EncodePriority>
 8001c46:	4602      	mov	r2, r0
 8001c48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff80 	bl	8001b54 <__NVIC_SetPriority>
}
 8001c54:	bf00      	nop
 8001c56:	3718      	adds	r7, #24
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff54 	bl	8001b18 <__NVIC_EnableIRQ>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b089      	sub	sp, #36	; 0x24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c82:	2300      	movs	r3, #0
 8001c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61fb      	str	r3, [r7, #28]
 8001c92:	e165      	b.n	8001f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c94:	2201      	movs	r2, #1
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	429a      	cmp	r2, r3
 8001cae:	f040 8154 	bne.w	8001f5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d005      	beq.n	8001cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d130      	bne.n	8001d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	2203      	movs	r2, #3
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d00:	2201      	movs	r2, #1
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	091b      	lsrs	r3, r3, #4
 8001d16:	f003 0201 	and.w	r2, r3, #1
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	2b03      	cmp	r3, #3
 8001d36:	d017      	beq.n	8001d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	005b      	lsls	r3, r3, #1
 8001d42:	2203      	movs	r2, #3
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	69b9      	ldr	r1, [r7, #24]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f000 80ae 	beq.w	8001f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60fb      	str	r3, [r7, #12]
 8001e02:	4b5d      	ldr	r3, [pc, #372]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	4a5c      	ldr	r2, [pc, #368]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_GPIO_Init+0x300>)
 8001e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1a:	4a58      	ldr	r2, [pc, #352]	; (8001f7c <HAL_GPIO_Init+0x304>)
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	089b      	lsrs	r3, r3, #2
 8001e20:	3302      	adds	r3, #2
 8001e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	220f      	movs	r2, #15
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	43db      	mvns	r3, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a4f      	ldr	r2, [pc, #316]	; (8001f80 <HAL_GPIO_Init+0x308>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d025      	beq.n	8001e92 <HAL_GPIO_Init+0x21a>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a4e      	ldr	r2, [pc, #312]	; (8001f84 <HAL_GPIO_Init+0x30c>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01f      	beq.n	8001e8e <HAL_GPIO_Init+0x216>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4a4d      	ldr	r2, [pc, #308]	; (8001f88 <HAL_GPIO_Init+0x310>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d019      	beq.n	8001e8a <HAL_GPIO_Init+0x212>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a4c      	ldr	r2, [pc, #304]	; (8001f8c <HAL_GPIO_Init+0x314>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d013      	beq.n	8001e86 <HAL_GPIO_Init+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a4b      	ldr	r2, [pc, #300]	; (8001f90 <HAL_GPIO_Init+0x318>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d00d      	beq.n	8001e82 <HAL_GPIO_Init+0x20a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a4a      	ldr	r2, [pc, #296]	; (8001f94 <HAL_GPIO_Init+0x31c>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d007      	beq.n	8001e7e <HAL_GPIO_Init+0x206>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a49      	ldr	r2, [pc, #292]	; (8001f98 <HAL_GPIO_Init+0x320>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d101      	bne.n	8001e7a <HAL_GPIO_Init+0x202>
 8001e76:	2306      	movs	r3, #6
 8001e78:	e00c      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7a:	2307      	movs	r3, #7
 8001e7c:	e00a      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e7e:	2305      	movs	r3, #5
 8001e80:	e008      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e82:	2304      	movs	r3, #4
 8001e84:	e006      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e86:	2303      	movs	r3, #3
 8001e88:	e004      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e002      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e000      	b.n	8001e94 <HAL_GPIO_Init+0x21c>
 8001e92:	2300      	movs	r3, #0
 8001e94:	69fa      	ldr	r2, [r7, #28]
 8001e96:	f002 0203 	and.w	r2, r2, #3
 8001e9a:	0092      	lsls	r2, r2, #2
 8001e9c:	4093      	lsls	r3, r2
 8001e9e:	69ba      	ldr	r2, [r7, #24]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ea4:	4935      	ldr	r1, [pc, #212]	; (8001f7c <HAL_GPIO_Init+0x304>)
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	089b      	lsrs	r3, r3, #2
 8001eaa:	3302      	adds	r3, #2
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	43db      	mvns	r3, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ece:	69ba      	ldr	r2, [r7, #24]
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed6:	4a31      	ldr	r2, [pc, #196]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001edc:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	69ba      	ldr	r2, [r7, #24]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d003      	beq.n	8001f00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f00:	4a26      	ldr	r2, [pc, #152]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f06:	4b25      	ldr	r3, [pc, #148]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f2a:	4a1c      	ldr	r2, [pc, #112]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f54:	4a11      	ldr	r2, [pc, #68]	; (8001f9c <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f5a:	69fb      	ldr	r3, [r7, #28]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	61fb      	str	r3, [r7, #28]
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f67f ae96 	bls.w	8001c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f68:	bf00      	nop
 8001f6a:	bf00      	nop
 8001f6c:	3724      	adds	r7, #36	; 0x24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40013800 	.word	0x40013800
 8001f80:	40020000 	.word	0x40020000
 8001f84:	40020400 	.word	0x40020400
 8001f88:	40020800 	.word	0x40020800
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	40021000 	.word	0x40021000
 8001f94:	40021400 	.word	0x40021400
 8001f98:	40021800 	.word	0x40021800
 8001f9c:	40013c00 	.word	0x40013c00

08001fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	460b      	mov	r3, r1
 8001faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	887b      	ldrh	r3, [r7, #2]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d002      	beq.n	8001fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	73fb      	strb	r3, [r7, #15]
 8001fbc:	e001      	b.n	8001fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr

08001fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b083      	sub	sp, #12
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe0:	787b      	ldrb	r3, [r7, #1]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fe6:	887a      	ldrh	r2, [r7, #2]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001fec:	e003      	b.n	8001ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001fee:	887b      	ldrh	r3, [r7, #2]
 8001ff0:	041a      	lsls	r2, r3, #16
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	619a      	str	r2, [r3, #24]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002002:	b480      	push	{r7}
 8002004:	b085      	sub	sp, #20
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
 800200a:	460b      	mov	r3, r1
 800200c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	695b      	ldr	r3, [r3, #20]
 8002012:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002014:	887a      	ldrh	r2, [r7, #2]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	4013      	ands	r3, r2
 800201a:	041a      	lsls	r2, r3, #16
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	43d9      	mvns	r1, r3
 8002020:	887b      	ldrh	r3, [r7, #2]
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	619a      	str	r2, [r3, #24]
}
 800202a:	bf00      	nop
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
	...

08002038 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d101      	bne.n	800204a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e12b      	b.n	80022a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002050:	b2db      	uxtb	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d106      	bne.n	8002064 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f7ff fb24 	bl	80016ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2224      	movs	r2, #36	; 0x24
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800208a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800209a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800209c:	f000 fe8a 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80020a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4a81      	ldr	r2, [pc, #516]	; (80022ac <HAL_I2C_Init+0x274>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d807      	bhi.n	80020bc <HAL_I2C_Init+0x84>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	4a80      	ldr	r2, [pc, #512]	; (80022b0 <HAL_I2C_Init+0x278>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	bf94      	ite	ls
 80020b4:	2301      	movls	r3, #1
 80020b6:	2300      	movhi	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	e006      	b.n	80020ca <HAL_I2C_Init+0x92>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	4a7d      	ldr	r2, [pc, #500]	; (80022b4 <HAL_I2C_Init+0x27c>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	bf94      	ite	ls
 80020c4:	2301      	movls	r3, #1
 80020c6:	2300      	movhi	r3, #0
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0e7      	b.n	80022a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	4a78      	ldr	r2, [pc, #480]	; (80022b8 <HAL_I2C_Init+0x280>)
 80020d6:	fba2 2303 	umull	r2, r3, r2, r3
 80020da:	0c9b      	lsrs	r3, r3, #18
 80020dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4a6a      	ldr	r2, [pc, #424]	; (80022ac <HAL_I2C_Init+0x274>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d802      	bhi.n	800210c <HAL_I2C_Init+0xd4>
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	3301      	adds	r3, #1
 800210a:	e009      	b.n	8002120 <HAL_I2C_Init+0xe8>
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	4a69      	ldr	r2, [pc, #420]	; (80022bc <HAL_I2C_Init+0x284>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	099b      	lsrs	r3, r3, #6
 800211e:	3301      	adds	r3, #1
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	6812      	ldr	r2, [r2, #0]
 8002124:	430b      	orrs	r3, r1
 8002126:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	69db      	ldr	r3, [r3, #28]
 800212e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002132:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	495c      	ldr	r1, [pc, #368]	; (80022ac <HAL_I2C_Init+0x274>)
 800213c:	428b      	cmp	r3, r1
 800213e:	d819      	bhi.n	8002174 <HAL_I2C_Init+0x13c>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	1e59      	subs	r1, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	fbb1 f3f3 	udiv	r3, r1, r3
 800214e:	1c59      	adds	r1, r3, #1
 8002150:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002154:	400b      	ands	r3, r1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_I2C_Init+0x138>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	1e59      	subs	r1, r3, #1
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fbb1 f3f3 	udiv	r3, r1, r3
 8002168:	3301      	adds	r3, #1
 800216a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800216e:	e051      	b.n	8002214 <HAL_I2C_Init+0x1dc>
 8002170:	2304      	movs	r3, #4
 8002172:	e04f      	b.n	8002214 <HAL_I2C_Init+0x1dc>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d111      	bne.n	80021a0 <HAL_I2C_Init+0x168>
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1e58      	subs	r0, r3, #1
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	460b      	mov	r3, r1
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	440b      	add	r3, r1
 800218a:	fbb0 f3f3 	udiv	r3, r0, r3
 800218e:	3301      	adds	r3, #1
 8002190:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002194:	2b00      	cmp	r3, #0
 8002196:	bf0c      	ite	eq
 8002198:	2301      	moveq	r3, #1
 800219a:	2300      	movne	r3, #0
 800219c:	b2db      	uxtb	r3, r3
 800219e:	e012      	b.n	80021c6 <HAL_I2C_Init+0x18e>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	1e58      	subs	r0, r3, #1
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6859      	ldr	r1, [r3, #4]
 80021a8:	460b      	mov	r3, r1
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	0099      	lsls	r1, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80021b6:	3301      	adds	r3, #1
 80021b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021bc:	2b00      	cmp	r3, #0
 80021be:	bf0c      	ite	eq
 80021c0:	2301      	moveq	r3, #1
 80021c2:	2300      	movne	r3, #0
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <HAL_I2C_Init+0x196>
 80021ca:	2301      	movs	r3, #1
 80021cc:	e022      	b.n	8002214 <HAL_I2C_Init+0x1dc>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d10e      	bne.n	80021f4 <HAL_I2C_Init+0x1bc>
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	1e58      	subs	r0, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6859      	ldr	r1, [r3, #4]
 80021de:	460b      	mov	r3, r1
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	440b      	add	r3, r1
 80021e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80021e8:	3301      	adds	r3, #1
 80021ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021f2:	e00f      	b.n	8002214 <HAL_I2C_Init+0x1dc>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	1e58      	subs	r0, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6859      	ldr	r1, [r3, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	0099      	lsls	r1, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	fbb0 f3f3 	udiv	r3, r0, r3
 800220a:	3301      	adds	r3, #1
 800220c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002210:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	6809      	ldr	r1, [r1, #0]
 8002218:	4313      	orrs	r3, r2
 800221a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	69da      	ldr	r2, [r3, #28]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002242:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6911      	ldr	r1, [r2, #16]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	68d2      	ldr	r2, [r2, #12]
 800224e:	4311      	orrs	r1, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	430b      	orrs	r3, r1
 8002256:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	431a      	orrs	r2, r3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0201 	orr.w	r2, r2, #1
 8002282:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2220      	movs	r2, #32
 800228e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2200      	movs	r2, #0
 8002296:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	000186a0 	.word	0x000186a0
 80022b0:	001e847f 	.word	0x001e847f
 80022b4:	003d08ff 	.word	0x003d08ff
 80022b8:	431bde83 	.word	0x431bde83
 80022bc:	10624dd3 	.word	0x10624dd3

080022c0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af02      	add	r7, sp, #8
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	607a      	str	r2, [r7, #4]
 80022ca:	461a      	mov	r2, r3
 80022cc:	460b      	mov	r3, r1
 80022ce:	817b      	strh	r3, [r7, #10]
 80022d0:	4613      	mov	r3, r2
 80022d2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022d4:	f7ff fbbe 	bl	8001a54 <HAL_GetTick>
 80022d8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b20      	cmp	r3, #32
 80022e4:	f040 80e0 	bne.w	80024a8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	2319      	movs	r3, #25
 80022ee:	2201      	movs	r2, #1
 80022f0:	4970      	ldr	r1, [pc, #448]	; (80024b4 <HAL_I2C_Master_Transmit+0x1f4>)
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fa92 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022fe:	2302      	movs	r3, #2
 8002300:	e0d3      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002308:	2b01      	cmp	r3, #1
 800230a:	d101      	bne.n	8002310 <HAL_I2C_Master_Transmit+0x50>
 800230c:	2302      	movs	r3, #2
 800230e:	e0cc      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b01      	cmp	r3, #1
 8002324:	d007      	beq.n	8002336 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f042 0201 	orr.w	r2, r2, #1
 8002334:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002344:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2221      	movs	r2, #33	; 0x21
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2210      	movs	r2, #16
 8002352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	893a      	ldrh	r2, [r7, #8]
 8002366:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29a      	uxth	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4a50      	ldr	r2, [pc, #320]	; (80024b8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	6a3a      	ldr	r2, [r7, #32]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f9ca 	bl	8002718 <I2C_MasterRequestWrite>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e08d      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	695b      	ldr	r3, [r3, #20]
 8002398:	613b      	str	r3, [r7, #16]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80023a4:	e066      	b.n	8002474 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	6a39      	ldr	r1, [r7, #32]
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	f000 fb50 	bl	8002a50 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00d      	beq.n	80023d2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d107      	bne.n	80023ce <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023cc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	e06b      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d6:	781a      	ldrb	r2, [r3, #0]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	3b01      	subs	r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695b      	ldr	r3, [r3, #20]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b04      	cmp	r3, #4
 800240e:	d11b      	bne.n	8002448 <HAL_I2C_Master_Transmit+0x188>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002414:	2b00      	cmp	r3, #0
 8002416:	d017      	beq.n	8002448 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241c:	781a      	ldrb	r2, [r3, #0]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	1c5a      	adds	r2, r3, #1
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	3b01      	subs	r3, #1
 8002442:	b29a      	uxth	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002448:	697a      	ldr	r2, [r7, #20]
 800244a:	6a39      	ldr	r1, [r7, #32]
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f000 fb47 	bl	8002ae0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00d      	beq.n	8002474 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	2b04      	cmp	r3, #4
 800245e:	d107      	bne.n	8002470 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	e01a      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002478:	2b00      	cmp	r3, #0
 800247a:	d194      	bne.n	80023a6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2220      	movs	r2, #32
 8002490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a4:	2300      	movs	r3, #0
 80024a6:	e000      	b.n	80024aa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80024a8:	2302      	movs	r3, #2
  }
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3718      	adds	r7, #24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	00100002 	.word	0x00100002
 80024b8:	ffff0000 	.word	0xffff0000

080024bc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08a      	sub	sp, #40	; 0x28
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
 80024c8:	460b      	mov	r3, r1
 80024ca:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80024cc:	f7ff fac2 	bl	8001a54 <HAL_GetTick>
 80024d0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b20      	cmp	r3, #32
 80024e0:	f040 8111 	bne.w	8002706 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2319      	movs	r3, #25
 80024ea:	2201      	movs	r2, #1
 80024ec:	4988      	ldr	r1, [pc, #544]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 80024ee:	68f8      	ldr	r0, [r7, #12]
 80024f0:	f000 f994 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80024fa:	2302      	movs	r3, #2
 80024fc:	e104      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2C_IsDeviceReady+0x50>
 8002508:	2302      	movs	r3, #2
 800250a:	e0fd      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2201      	movs	r2, #1
 8002510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d007      	beq.n	8002532 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002540:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2224      	movs	r2, #36	; 0x24
 8002546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4a70      	ldr	r2, [pc, #448]	; (8002714 <HAL_I2C_IsDeviceReady+0x258>)
 8002554:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002564:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	2200      	movs	r2, #0
 800256e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 f952 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00d      	beq.n	800259a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002588:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800258c:	d103      	bne.n	8002596 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002594:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0b6      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800259a:	897b      	ldrh	r3, [r7, #10]
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80025a8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80025aa:	f7ff fa53 	bl	8001a54 <HAL_GetTick>
 80025ae:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	695b      	ldr	r3, [r3, #20]
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	bf0c      	ite	eq
 80025be:	2301      	moveq	r3, #1
 80025c0:	2300      	movne	r3, #0
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d4:	bf0c      	ite	eq
 80025d6:	2301      	moveq	r3, #1
 80025d8:	2300      	movne	r3, #0
 80025da:	b2db      	uxtb	r3, r3
 80025dc:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80025de:	e025      	b.n	800262c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80025e0:	f7ff fa38 	bl	8001a54 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d302      	bcc.n	80025f6 <HAL_I2C_IsDeviceReady+0x13a>
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d103      	bne.n	80025fe <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	22a0      	movs	r2, #160	; 0xa0
 80025fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b02      	cmp	r3, #2
 800260a:	bf0c      	ite	eq
 800260c:	2301      	moveq	r3, #1
 800260e:	2300      	movne	r3, #0
 8002610:	b2db      	uxtb	r3, r3
 8002612:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002622:	bf0c      	ite	eq
 8002624:	2301      	moveq	r3, #1
 8002626:	2300      	movne	r3, #0
 8002628:	b2db      	uxtb	r3, r3
 800262a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2ba0      	cmp	r3, #160	; 0xa0
 8002636:	d005      	beq.n	8002644 <HAL_I2C_IsDeviceReady+0x188>
 8002638:	7dfb      	ldrb	r3, [r7, #23]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d102      	bne.n	8002644 <HAL_I2C_IsDeviceReady+0x188>
 800263e:	7dbb      	ldrb	r3, [r7, #22]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0cd      	beq.n	80025e0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2220      	movs	r2, #32
 8002648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d129      	bne.n	80026ae <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002668:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	2319      	movs	r3, #25
 8002686:	2201      	movs	r2, #1
 8002688:	4921      	ldr	r1, [pc, #132]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 f8c6 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	e036      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80026aa:	2300      	movs	r3, #0
 80026ac:	e02c      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026bc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80026c6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	9300      	str	r3, [sp, #0]
 80026cc:	2319      	movs	r3, #25
 80026ce:	2201      	movs	r2, #1
 80026d0:	490f      	ldr	r1, [pc, #60]	; (8002710 <HAL_I2C_IsDeviceReady+0x254>)
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f000 f8a2 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d001      	beq.n	80026e2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e012      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	3301      	adds	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80026e8:	69ba      	ldr	r2, [r7, #24]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	f4ff af32 	bcc.w	8002556 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2220      	movs	r2, #32
 80026f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e000      	b.n	8002708 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002706:	2302      	movs	r3, #2
  }
}
 8002708:	4618      	mov	r0, r3
 800270a:	3720      	adds	r7, #32
 800270c:	46bd      	mov	sp, r7
 800270e:	bd80      	pop	{r7, pc}
 8002710:	00100002 	.word	0x00100002
 8002714:	ffff0000 	.word	0xffff0000

08002718 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	2b08      	cmp	r3, #8
 8002732:	d006      	beq.n	8002742 <I2C_MasterRequestWrite+0x2a>
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d003      	beq.n	8002742 <I2C_MasterRequestWrite+0x2a>
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002740:	d108      	bne.n	8002754 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	e00b      	b.n	800276c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	2b12      	cmp	r3, #18
 800275a:	d107      	bne.n	800276c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800276a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f000 f84f 	bl	800281c <I2C_WaitOnFlagUntilTimeout>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d00d      	beq.n	80027a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800278e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002792:	d103      	bne.n	800279c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e035      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a8:	d108      	bne.n	80027bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027aa:	897b      	ldrh	r3, [r7, #10]
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027b8:	611a      	str	r2, [r3, #16]
 80027ba:	e01b      	b.n	80027f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80027bc:	897b      	ldrh	r3, [r7, #10]
 80027be:	11db      	asrs	r3, r3, #7
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	f003 0306 	and.w	r3, r3, #6
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	f063 030f 	orn	r3, r3, #15
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	490e      	ldr	r1, [pc, #56]	; (8002814 <I2C_MasterRequestWrite+0xfc>)
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f898 	bl	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d001      	beq.n	80027ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e010      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80027ea:	897b      	ldrh	r3, [r7, #10]
 80027ec:	b2da      	uxtb	r2, r3
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <I2C_MasterRequestWrite+0x100>)
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f888 	bl	8002910 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	3718      	adds	r7, #24
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	00010008 	.word	0x00010008
 8002818:	00010002 	.word	0x00010002

0800281c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	603b      	str	r3, [r7, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800282c:	e048      	b.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002834:	d044      	beq.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002836:	f7ff f90d 	bl	8001a54 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	429a      	cmp	r2, r3
 8002844:	d302      	bcc.n	800284c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d139      	bne.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b01      	cmp	r3, #1
 8002854:	d10d      	bne.n	8002872 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	43da      	mvns	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	4013      	ands	r3, r2
 8002862:	b29b      	uxth	r3, r3
 8002864:	2b00      	cmp	r3, #0
 8002866:	bf0c      	ite	eq
 8002868:	2301      	moveq	r3, #1
 800286a:	2300      	movne	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	e00c      	b.n	800288c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	43da      	mvns	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	4013      	ands	r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	bf0c      	ite	eq
 8002884:	2301      	moveq	r3, #1
 8002886:	2300      	movne	r3, #0
 8002888:	b2db      	uxtb	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	429a      	cmp	r2, r3
 8002890:	d116      	bne.n	80028c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2200      	movs	r2, #0
 8002896:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2220      	movs	r2, #32
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f043 0220 	orr.w	r2, r3, #32
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e023      	b.n	8002908 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d10d      	bne.n	80028e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	43da      	mvns	r2, r3
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	4013      	ands	r3, r2
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	2b00      	cmp	r3, #0
 80028da:	bf0c      	ite	eq
 80028dc:	2301      	moveq	r3, #1
 80028de:	2300      	movne	r3, #0
 80028e0:	b2db      	uxtb	r3, r3
 80028e2:	461a      	mov	r2, r3
 80028e4:	e00c      	b.n	8002900 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	43da      	mvns	r2, r3
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	4013      	ands	r3, r2
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
 8002900:	79fb      	ldrb	r3, [r7, #7]
 8002902:	429a      	cmp	r2, r3
 8002904:	d093      	beq.n	800282e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	4618      	mov	r0, r3
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
 800291c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800291e:	e071      	b.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800292a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800292e:	d123      	bne.n	8002978 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800293e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002948:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2220      	movs	r2, #32
 8002954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e067      	b.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297e:	d041      	beq.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002980:	f7ff f868 	bl	8001a54 <HAL_GetTick>
 8002984:	4602      	mov	r2, r0
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	1ad3      	subs	r3, r2, r3
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	429a      	cmp	r2, r3
 800298e:	d302      	bcc.n	8002996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d136      	bne.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0c1b      	lsrs	r3, r3, #16
 800299a:	b2db      	uxtb	r3, r3
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10c      	bne.n	80029ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	43da      	mvns	r2, r3
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4013      	ands	r3, r2
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	bf14      	ite	ne
 80029b2:	2301      	movne	r3, #1
 80029b4:	2300      	moveq	r3, #0
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	e00b      	b.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	43da      	mvns	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	4013      	ands	r3, r2
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2220      	movs	r2, #32
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f0:	f043 0220 	orr.w	r2, r3, #32
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e021      	b.n	8002a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	0c1b      	lsrs	r3, r3, #16
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d10c      	bne.n	8002a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	43da      	mvns	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	bf14      	ite	ne
 8002a20:	2301      	movne	r3, #1
 8002a22:	2300      	moveq	r3, #0
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	e00b      	b.n	8002a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	4013      	ands	r3, r2
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	bf14      	ite	ne
 8002a3a:	2301      	movne	r3, #1
 8002a3c:	2300      	moveq	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	f47f af6d 	bne.w	8002920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a5c:	e034      	b.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f886 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e034      	b.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d028      	beq.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a76:	f7fe ffed 	bl	8001a54 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d302      	bcc.n	8002a8c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d11d      	bne.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	695b      	ldr	r3, [r3, #20]
 8002a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a96:	2b80      	cmp	r3, #128	; 0x80
 8002a98:	d016      	beq.n	8002ac8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2220      	movs	r2, #32
 8002aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	f043 0220 	orr.w	r2, r3, #32
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e007      	b.n	8002ad8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	695b      	ldr	r3, [r3, #20]
 8002ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ad2:	2b80      	cmp	r3, #128	; 0x80
 8002ad4:	d1c3      	bne.n	8002a5e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ad6:	2300      	movs	r3, #0
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3710      	adds	r7, #16
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	60f8      	str	r0, [r7, #12]
 8002ae8:	60b9      	str	r1, [r7, #8]
 8002aea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002aec:	e034      	b.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f000 f83e 	bl	8002b70 <I2C_IsAcknowledgeFailed>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d001      	beq.n	8002afe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e034      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b04:	d028      	beq.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b06:	f7fe ffa5 	bl	8001a54 <HAL_GetTick>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	1ad3      	subs	r3, r2, r3
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d11d      	bne.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	695b      	ldr	r3, [r3, #20]
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	2b04      	cmp	r3, #4
 8002b28:	d016      	beq.n	8002b58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2220      	movs	r2, #32
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f043 0220 	orr.w	r2, r3, #32
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e007      	b.n	8002b68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d1c3      	bne.n	8002aee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b86:	d11b      	bne.n	8002bc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	f043 0204 	orr.w	r2, r3, #4
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
	...

08002bd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e0cc      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be4:	4b68      	ldr	r3, [pc, #416]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d90c      	bls.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf2:	4b65      	ldr	r3, [pc, #404]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfa:	4b63      	ldr	r3, [pc, #396]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	683a      	ldr	r2, [r7, #0]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d001      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b8      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d020      	beq.n	8002c5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a58      	ldr	r2, [pc, #352]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c3c:	4b53      	ldr	r3, [pc, #332]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	4a52      	ldr	r2, [pc, #328]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c48:	4b50      	ldr	r3, [pc, #320]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	494d      	ldr	r1, [pc, #308]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d044      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d107      	bne.n	8002c7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6e:	4b47      	ldr	r3, [pc, #284]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d119      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e07f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d107      	bne.n	8002c9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d109      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e06f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	4b3b      	ldr	r3, [pc, #236]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0302 	and.w	r3, r3, #2
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e067      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cae:	4b37      	ldr	r3, [pc, #220]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	f023 0203 	bic.w	r2, r3, #3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	4934      	ldr	r1, [pc, #208]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fec8 	bl	8001a54 <HAL_GetTick>
 8002cc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc6:	e00a      	b.n	8002cde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc8:	f7fe fec4 	bl	8001a54 <HAL_GetTick>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	1ad3      	subs	r3, r2, r3
 8002cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04f      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cde:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 020c 	and.w	r2, r3, #12
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d1eb      	bne.n	8002cc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf0:	4b25      	ldr	r3, [pc, #148]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d20c      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfe:	4b22      	ldr	r3, [pc, #136]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	b2d2      	uxtb	r2, r2
 8002d04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d06:	4b20      	ldr	r3, [pc, #128]	; (8002d88 <HAL_RCC_ClockConfig+0x1b8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 030f 	and.w	r3, r3, #15
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e032      	b.n	8002d7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d008      	beq.n	8002d36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	4916      	ldr	r1, [pc, #88]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d42:	4b12      	ldr	r3, [pc, #72]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	691b      	ldr	r3, [r3, #16]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	490e      	ldr	r1, [pc, #56]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d56:	f000 f887 	bl	8002e68 <HAL_RCC_GetSysClockFreq>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCC_ClockConfig+0x1bc>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	091b      	lsrs	r3, r3, #4
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	490a      	ldr	r1, [pc, #40]	; (8002d90 <HAL_RCC_ClockConfig+0x1c0>)
 8002d68:	5ccb      	ldrb	r3, [r1, r3]
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	4a09      	ldr	r2, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c4>)
 8002d70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d72:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <HAL_RCC_ClockConfig+0x1c8>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe fd28 	bl	80017cc <HAL_InitTick>

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	40023c00 	.word	0x40023c00
 8002d8c:	40023800 	.word	0x40023800
 8002d90:	080084c4 	.word	0x080084c4
 8002d94:	20000014 	.word	0x20000014
 8002d98:	20000018 	.word	0x20000018

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000014 	.word	0x20000014

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	080084d4 	.word	0x080084d4

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	080084d4 	.word	0x080084d4

08002e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	220f      	movs	r2, #15
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_GetClockConfig+0x60>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 020f 	and.w	r2, r3, #15
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e6c:	b0ae      	sub	sp, #184	; 0xb8
 8002e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002e82:	2300      	movs	r3, #0
 8002e84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8e:	4bcb      	ldr	r3, [pc, #812]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002e90:	689b      	ldr	r3, [r3, #8]
 8002e92:	f003 030c 	and.w	r3, r3, #12
 8002e96:	2b0c      	cmp	r3, #12
 8002e98:	f200 8206 	bhi.w	80032a8 <HAL_RCC_GetSysClockFreq+0x440>
 8002e9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ea4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea2:	bf00      	nop
 8002ea4:	08002ed9 	.word	0x08002ed9
 8002ea8:	080032a9 	.word	0x080032a9
 8002eac:	080032a9 	.word	0x080032a9
 8002eb0:	080032a9 	.word	0x080032a9
 8002eb4:	08002ee1 	.word	0x08002ee1
 8002eb8:	080032a9 	.word	0x080032a9
 8002ebc:	080032a9 	.word	0x080032a9
 8002ec0:	080032a9 	.word	0x080032a9
 8002ec4:	08002ee9 	.word	0x08002ee9
 8002ec8:	080032a9 	.word	0x080032a9
 8002ecc:	080032a9 	.word	0x080032a9
 8002ed0:	080032a9 	.word	0x080032a9
 8002ed4:	080030d9 	.word	0x080030d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ed8:	4bb9      	ldr	r3, [pc, #740]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002ede:	e1e7      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ee0:	4bb8      	ldr	r3, [pc, #736]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002ee2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ee6:	e1e3      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ee8:	4bb4      	ldr	r3, [pc, #720]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ef0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ef4:	4bb1      	ldr	r3, [pc, #708]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d071      	beq.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f00:	4bae      	ldr	r3, [pc, #696]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	099b      	lsrs	r3, r3, #6
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f0c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f18:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002f22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f26:	4622      	mov	r2, r4
 8002f28:	462b      	mov	r3, r5
 8002f2a:	f04f 0000 	mov.w	r0, #0
 8002f2e:	f04f 0100 	mov.w	r1, #0
 8002f32:	0159      	lsls	r1, r3, #5
 8002f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f38:	0150      	lsls	r0, r2, #5
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4621      	mov	r1, r4
 8002f40:	1a51      	subs	r1, r2, r1
 8002f42:	6439      	str	r1, [r7, #64]	; 0x40
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb63 0301 	sbc.w	r3, r3, r1
 8002f4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002f58:	4649      	mov	r1, r9
 8002f5a:	018b      	lsls	r3, r1, #6
 8002f5c:	4641      	mov	r1, r8
 8002f5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f62:	4641      	mov	r1, r8
 8002f64:	018a      	lsls	r2, r1, #6
 8002f66:	4641      	mov	r1, r8
 8002f68:	1a51      	subs	r1, r2, r1
 8002f6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002f6c:	4649      	mov	r1, r9
 8002f6e:	eb63 0301 	sbc.w	r3, r3, r1
 8002f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f74:	f04f 0200 	mov.w	r2, #0
 8002f78:	f04f 0300 	mov.w	r3, #0
 8002f7c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002f80:	4649      	mov	r1, r9
 8002f82:	00cb      	lsls	r3, r1, #3
 8002f84:	4641      	mov	r1, r8
 8002f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f8a:	4641      	mov	r1, r8
 8002f8c:	00ca      	lsls	r2, r1, #3
 8002f8e:	4610      	mov	r0, r2
 8002f90:	4619      	mov	r1, r3
 8002f92:	4603      	mov	r3, r0
 8002f94:	4622      	mov	r2, r4
 8002f96:	189b      	adds	r3, r3, r2
 8002f98:	633b      	str	r3, [r7, #48]	; 0x30
 8002f9a:	462b      	mov	r3, r5
 8002f9c:	460a      	mov	r2, r1
 8002f9e:	eb42 0303 	adc.w	r3, r2, r3
 8002fa2:	637b      	str	r3, [r7, #52]	; 0x34
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	024b      	lsls	r3, r1, #9
 8002fb4:	4621      	mov	r1, r4
 8002fb6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002fba:	4621      	mov	r1, r4
 8002fbc:	024a      	lsls	r2, r1, #9
 8002fbe:	4610      	mov	r0, r2
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fcc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fd0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002fd4:	f7fd f974 	bl	80002c0 <__aeabi_uldivmod>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4613      	mov	r3, r2
 8002fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002fe2:	e067      	b.n	80030b4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe4:	4b75      	ldr	r3, [pc, #468]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	099b      	lsrs	r3, r3, #6
 8002fea:	2200      	movs	r2, #0
 8002fec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002ff0:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffc:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ffe:	2300      	movs	r3, #0
 8003000:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003002:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003006:	4622      	mov	r2, r4
 8003008:	462b      	mov	r3, r5
 800300a:	f04f 0000 	mov.w	r0, #0
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	0159      	lsls	r1, r3, #5
 8003014:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003018:	0150      	lsls	r0, r2, #5
 800301a:	4602      	mov	r2, r0
 800301c:	460b      	mov	r3, r1
 800301e:	4621      	mov	r1, r4
 8003020:	1a51      	subs	r1, r2, r1
 8003022:	62b9      	str	r1, [r7, #40]	; 0x28
 8003024:	4629      	mov	r1, r5
 8003026:	eb63 0301 	sbc.w	r3, r3, r1
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800302c:	f04f 0200 	mov.w	r2, #0
 8003030:	f04f 0300 	mov.w	r3, #0
 8003034:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003038:	4649      	mov	r1, r9
 800303a:	018b      	lsls	r3, r1, #6
 800303c:	4641      	mov	r1, r8
 800303e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003042:	4641      	mov	r1, r8
 8003044:	018a      	lsls	r2, r1, #6
 8003046:	4641      	mov	r1, r8
 8003048:	ebb2 0a01 	subs.w	sl, r2, r1
 800304c:	4649      	mov	r1, r9
 800304e:	eb63 0b01 	sbc.w	fp, r3, r1
 8003052:	f04f 0200 	mov.w	r2, #0
 8003056:	f04f 0300 	mov.w	r3, #0
 800305a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800305e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003062:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003066:	4692      	mov	sl, r2
 8003068:	469b      	mov	fp, r3
 800306a:	4623      	mov	r3, r4
 800306c:	eb1a 0303 	adds.w	r3, sl, r3
 8003070:	623b      	str	r3, [r7, #32]
 8003072:	462b      	mov	r3, r5
 8003074:	eb4b 0303 	adc.w	r3, fp, r3
 8003078:	627b      	str	r3, [r7, #36]	; 0x24
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003086:	4629      	mov	r1, r5
 8003088:	028b      	lsls	r3, r1, #10
 800308a:	4621      	mov	r1, r4
 800308c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003090:	4621      	mov	r1, r4
 8003092:	028a      	lsls	r2, r1, #10
 8003094:	4610      	mov	r0, r2
 8003096:	4619      	mov	r1, r3
 8003098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800309c:	2200      	movs	r2, #0
 800309e:	673b      	str	r3, [r7, #112]	; 0x70
 80030a0:	677a      	str	r2, [r7, #116]	; 0x74
 80030a2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80030a6:	f7fd f90b 	bl	80002c0 <__aeabi_uldivmod>
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4613      	mov	r3, r2
 80030b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030b4:	4b41      	ldr	r3, [pc, #260]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	0c1b      	lsrs	r3, r3, #16
 80030ba:	f003 0303 	and.w	r3, r3, #3
 80030be:	3301      	adds	r3, #1
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80030c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80030ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80030ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80030d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80030d6:	e0eb      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030d8:	4b38      	ldr	r3, [pc, #224]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d06b      	beq.n	80031c8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f0:	4b32      	ldr	r3, [pc, #200]	; (80031bc <HAL_RCC_GetSysClockFreq+0x354>)
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	099b      	lsrs	r3, r3, #6
 80030f6:	2200      	movs	r2, #0
 80030f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80030fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80030fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003102:	663b      	str	r3, [r7, #96]	; 0x60
 8003104:	2300      	movs	r3, #0
 8003106:	667b      	str	r3, [r7, #100]	; 0x64
 8003108:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800310c:	4622      	mov	r2, r4
 800310e:	462b      	mov	r3, r5
 8003110:	f04f 0000 	mov.w	r0, #0
 8003114:	f04f 0100 	mov.w	r1, #0
 8003118:	0159      	lsls	r1, r3, #5
 800311a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800311e:	0150      	lsls	r0, r2, #5
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4621      	mov	r1, r4
 8003126:	1a51      	subs	r1, r2, r1
 8003128:	61b9      	str	r1, [r7, #24]
 800312a:	4629      	mov	r1, r5
 800312c:	eb63 0301 	sbc.w	r3, r3, r1
 8003130:	61fb      	str	r3, [r7, #28]
 8003132:	f04f 0200 	mov.w	r2, #0
 8003136:	f04f 0300 	mov.w	r3, #0
 800313a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800313e:	4659      	mov	r1, fp
 8003140:	018b      	lsls	r3, r1, #6
 8003142:	4651      	mov	r1, sl
 8003144:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003148:	4651      	mov	r1, sl
 800314a:	018a      	lsls	r2, r1, #6
 800314c:	4651      	mov	r1, sl
 800314e:	ebb2 0801 	subs.w	r8, r2, r1
 8003152:	4659      	mov	r1, fp
 8003154:	eb63 0901 	sbc.w	r9, r3, r1
 8003158:	f04f 0200 	mov.w	r2, #0
 800315c:	f04f 0300 	mov.w	r3, #0
 8003160:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003164:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003168:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800316c:	4690      	mov	r8, r2
 800316e:	4699      	mov	r9, r3
 8003170:	4623      	mov	r3, r4
 8003172:	eb18 0303 	adds.w	r3, r8, r3
 8003176:	613b      	str	r3, [r7, #16]
 8003178:	462b      	mov	r3, r5
 800317a:	eb49 0303 	adc.w	r3, r9, r3
 800317e:	617b      	str	r3, [r7, #20]
 8003180:	f04f 0200 	mov.w	r2, #0
 8003184:	f04f 0300 	mov.w	r3, #0
 8003188:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800318c:	4629      	mov	r1, r5
 800318e:	024b      	lsls	r3, r1, #9
 8003190:	4621      	mov	r1, r4
 8003192:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003196:	4621      	mov	r1, r4
 8003198:	024a      	lsls	r2, r1, #9
 800319a:	4610      	mov	r0, r2
 800319c:	4619      	mov	r1, r3
 800319e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80031a2:	2200      	movs	r2, #0
 80031a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80031a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80031a8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80031ac:	f7fd f888 	bl	80002c0 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80031ba:	e065      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x420>
 80031bc:	40023800 	.word	0x40023800
 80031c0:	00f42400 	.word	0x00f42400
 80031c4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031c8:	4b3d      	ldr	r3, [pc, #244]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x458>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	099b      	lsrs	r3, r3, #6
 80031ce:	2200      	movs	r2, #0
 80031d0:	4618      	mov	r0, r3
 80031d2:	4611      	mov	r1, r2
 80031d4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80031d8:	653b      	str	r3, [r7, #80]	; 0x50
 80031da:	2300      	movs	r3, #0
 80031dc:	657b      	str	r3, [r7, #84]	; 0x54
 80031de:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80031e2:	4642      	mov	r2, r8
 80031e4:	464b      	mov	r3, r9
 80031e6:	f04f 0000 	mov.w	r0, #0
 80031ea:	f04f 0100 	mov.w	r1, #0
 80031ee:	0159      	lsls	r1, r3, #5
 80031f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031f4:	0150      	lsls	r0, r2, #5
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4641      	mov	r1, r8
 80031fc:	1a51      	subs	r1, r2, r1
 80031fe:	60b9      	str	r1, [r7, #8]
 8003200:	4649      	mov	r1, r9
 8003202:	eb63 0301 	sbc.w	r3, r3, r1
 8003206:	60fb      	str	r3, [r7, #12]
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003214:	4659      	mov	r1, fp
 8003216:	018b      	lsls	r3, r1, #6
 8003218:	4651      	mov	r1, sl
 800321a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800321e:	4651      	mov	r1, sl
 8003220:	018a      	lsls	r2, r1, #6
 8003222:	4651      	mov	r1, sl
 8003224:	1a54      	subs	r4, r2, r1
 8003226:	4659      	mov	r1, fp
 8003228:	eb63 0501 	sbc.w	r5, r3, r1
 800322c:	f04f 0200 	mov.w	r2, #0
 8003230:	f04f 0300 	mov.w	r3, #0
 8003234:	00eb      	lsls	r3, r5, #3
 8003236:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800323a:	00e2      	lsls	r2, r4, #3
 800323c:	4614      	mov	r4, r2
 800323e:	461d      	mov	r5, r3
 8003240:	4643      	mov	r3, r8
 8003242:	18e3      	adds	r3, r4, r3
 8003244:	603b      	str	r3, [r7, #0]
 8003246:	464b      	mov	r3, r9
 8003248:	eb45 0303 	adc.w	r3, r5, r3
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	f04f 0300 	mov.w	r3, #0
 8003256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800325a:	4629      	mov	r1, r5
 800325c:	028b      	lsls	r3, r1, #10
 800325e:	4621      	mov	r1, r4
 8003260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003264:	4621      	mov	r1, r4
 8003266:	028a      	lsls	r2, r1, #10
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003270:	2200      	movs	r2, #0
 8003272:	64bb      	str	r3, [r7, #72]	; 0x48
 8003274:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003276:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800327a:	f7fd f821 	bl	80002c0 <__aeabi_uldivmod>
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4613      	mov	r3, r2
 8003284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003288:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_RCC_GetSysClockFreq+0x458>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	0f1b      	lsrs	r3, r3, #28
 800328e:	f003 0307 	and.w	r3, r3, #7
 8003292:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003296:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800329a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800329e:	fbb2 f3f3 	udiv	r3, r2, r3
 80032a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032a6:	e003      	b.n	80032b0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80032aa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80032ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	37b8      	adds	r7, #184	; 0xb8
 80032b8:	46bd      	mov	sp, r7
 80032ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
 80032c4:	00f42400 	.word	0x00f42400

080032c8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e28d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8083 	beq.w	80033ee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032e8:	4b94      	ldr	r3, [pc, #592]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f003 030c 	and.w	r3, r3, #12
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d019      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80032f4:	4b91      	ldr	r3, [pc, #580]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80032fc:	2b08      	cmp	r3, #8
 80032fe:	d106      	bne.n	800330e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003300:	4b8e      	ldr	r3, [pc, #568]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003308:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330c:	d00c      	beq.n	8003328 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800330e:	4b8b      	ldr	r3, [pc, #556]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003316:	2b0c      	cmp	r3, #12
 8003318:	d112      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800331a:	4b88      	ldr	r3, [pc, #544]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003326:	d10b      	bne.n	8003340 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003328:	4b84      	ldr	r3, [pc, #528]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d05b      	beq.n	80033ec <HAL_RCC_OscConfig+0x124>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d157      	bne.n	80033ec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e25a      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003348:	d106      	bne.n	8003358 <HAL_RCC_OscConfig+0x90>
 800334a:	4b7c      	ldr	r3, [pc, #496]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a7b      	ldr	r2, [pc, #492]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	e01d      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003360:	d10c      	bne.n	800337c <HAL_RCC_OscConfig+0xb4>
 8003362:	4b76      	ldr	r3, [pc, #472]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a75      	ldr	r2, [pc, #468]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003368:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	4b73      	ldr	r3, [pc, #460]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a72      	ldr	r2, [pc, #456]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e00b      	b.n	8003394 <HAL_RCC_OscConfig+0xcc>
 800337c:	4b6f      	ldr	r3, [pc, #444]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a6e      	ldr	r2, [pc, #440]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003386:	6013      	str	r3, [r2, #0]
 8003388:	4b6c      	ldr	r3, [pc, #432]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a6b      	ldr	r2, [pc, #428]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800338e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003392:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800339c:	f7fe fb5a 	bl	8001a54 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fb56 	bl	8001a54 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e21f      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b6:	4b61      	ldr	r3, [pc, #388]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d0f0      	beq.n	80033a4 <HAL_RCC_OscConfig+0xdc>
 80033c2:	e014      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033c4:	f7fe fb46 	bl	8001a54 <HAL_GetTick>
 80033c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ca:	e008      	b.n	80033de <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033cc:	f7fe fb42 	bl	8001a54 <HAL_GetTick>
 80033d0:	4602      	mov	r2, r0
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	1ad3      	subs	r3, r2, r3
 80033d6:	2b64      	cmp	r3, #100	; 0x64
 80033d8:	d901      	bls.n	80033de <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80033da:	2303      	movs	r3, #3
 80033dc:	e20b      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033de:	4b57      	ldr	r3, [pc, #348]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f0      	bne.n	80033cc <HAL_RCC_OscConfig+0x104>
 80033ea:	e000      	b.n	80033ee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d06f      	beq.n	80034da <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80033fa:	4b50      	ldr	r3, [pc, #320]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b00      	cmp	r3, #0
 8003404:	d017      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003406:	4b4d      	ldr	r3, [pc, #308]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800340e:	2b08      	cmp	r3, #8
 8003410:	d105      	bne.n	800341e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341a:	2b00      	cmp	r3, #0
 800341c:	d00b      	beq.n	8003436 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800341e:	4b47      	ldr	r3, [pc, #284]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003426:	2b0c      	cmp	r3, #12
 8003428:	d11c      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b44      	ldr	r3, [pc, #272]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d116      	bne.n	8003464 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003436:	4b41      	ldr	r3, [pc, #260]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d005      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	2b01      	cmp	r3, #1
 8003448:	d001      	beq.n	800344e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e1d3      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800344e:	4b3b      	ldr	r3, [pc, #236]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	4937      	ldr	r1, [pc, #220]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800345e:	4313      	orrs	r3, r2
 8003460:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003462:	e03a      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d020      	beq.n	80034ae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800346c:	4b34      	ldr	r3, [pc, #208]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003472:	f7fe faef 	bl	8001a54 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800347a:	f7fe faeb 	bl	8001a54 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e1b4      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800348c:	4b2b      	ldr	r3, [pc, #172]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0302 	and.w	r3, r3, #2
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003498:	4b28      	ldr	r3, [pc, #160]	; (800353c <HAL_RCC_OscConfig+0x274>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	691b      	ldr	r3, [r3, #16]
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	4925      	ldr	r1, [pc, #148]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	600b      	str	r3, [r1, #0]
 80034ac:	e015      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ae:	4b24      	ldr	r3, [pc, #144]	; (8003540 <HAL_RCC_OscConfig+0x278>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe face 	bl	8001a54 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034bc:	f7fe faca 	bl	8001a54 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e193      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x274>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0308 	and.w	r3, r3, #8
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d036      	beq.n	8003554 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d016      	beq.n	800351c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 80034f0:	2201      	movs	r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f4:	f7fe faae 	bl	8001a54 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe faaa 	bl	8001a54 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e173      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800350e:	4b0b      	ldr	r3, [pc, #44]	; (800353c <HAL_RCC_OscConfig+0x274>)
 8003510:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0f0      	beq.n	80034fc <HAL_RCC_OscConfig+0x234>
 800351a:	e01b      	b.n	8003554 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351c:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_OscConfig+0x27c>)
 800351e:	2200      	movs	r2, #0
 8003520:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003522:	f7fe fa97 	bl	8001a54 <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003528:	e00e      	b.n	8003548 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800352a:	f7fe fa93 	bl	8001a54 <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d907      	bls.n	8003548 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e15c      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 800353c:	40023800 	.word	0x40023800
 8003540:	42470000 	.word	0x42470000
 8003544:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b8a      	ldr	r3, [pc, #552]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800354a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1ea      	bne.n	800352a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8097 	beq.w	8003690 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b83      	ldr	r3, [pc, #524]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10f      	bne.n	8003592 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	4b7f      	ldr	r3, [pc, #508]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a7e      	ldr	r2, [pc, #504]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b7c      	ldr	r3, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	60bb      	str	r3, [r7, #8]
 800358c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358e:	2301      	movs	r3, #1
 8003590:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003592:	4b79      	ldr	r3, [pc, #484]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359a:	2b00      	cmp	r3, #0
 800359c:	d118      	bne.n	80035d0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359e:	4b76      	ldr	r3, [pc, #472]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a75      	ldr	r2, [pc, #468]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035aa:	f7fe fa53 	bl	8001a54 <HAL_GetTick>
 80035ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035b0:	e008      	b.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b2:	f7fe fa4f 	bl	8001a54 <HAL_GetTick>
 80035b6:	4602      	mov	r2, r0
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d901      	bls.n	80035c4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80035c0:	2303      	movs	r3, #3
 80035c2:	e118      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c4:	4b6c      	ldr	r3, [pc, #432]	; (8003778 <HAL_RCC_OscConfig+0x4b0>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d0f0      	beq.n	80035b2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d106      	bne.n	80035e6 <HAL_RCC_OscConfig+0x31e>
 80035d8:	4b66      	ldr	r3, [pc, #408]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035dc:	4a65      	ldr	r2, [pc, #404]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6713      	str	r3, [r2, #112]	; 0x70
 80035e4:	e01c      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2b05      	cmp	r3, #5
 80035ec:	d10c      	bne.n	8003608 <HAL_RCC_OscConfig+0x340>
 80035ee:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f2:	4a60      	ldr	r2, [pc, #384]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035f4:	f043 0304 	orr.w	r3, r3, #4
 80035f8:	6713      	str	r3, [r2, #112]	; 0x70
 80035fa:	4b5e      	ldr	r3, [pc, #376]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5d      	ldr	r2, [pc, #372]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003600:	f043 0301 	orr.w	r3, r3, #1
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	e00b      	b.n	8003620 <HAL_RCC_OscConfig+0x358>
 8003608:	4b5a      	ldr	r3, [pc, #360]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360c:	4a59      	ldr	r2, [pc, #356]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800360e:	f023 0301 	bic.w	r3, r3, #1
 8003612:	6713      	str	r3, [r2, #112]	; 0x70
 8003614:	4b57      	ldr	r3, [pc, #348]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a56      	ldr	r2, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800361a:	f023 0304 	bic.w	r3, r3, #4
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d015      	beq.n	8003654 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fa14 	bl	8001a54 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800362e:	e00a      	b.n	8003646 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003630:	f7fe fa10 	bl	8001a54 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e0d7      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364a:	f003 0302 	and.w	r3, r3, #2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d0ee      	beq.n	8003630 <HAL_RCC_OscConfig+0x368>
 8003652:	e014      	b.n	800367e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003654:	f7fe f9fe 	bl	8001a54 <HAL_GetTick>
 8003658:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800365a:	e00a      	b.n	8003672 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800365c:	f7fe f9fa 	bl	8001a54 <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	f241 3288 	movw	r2, #5000	; 0x1388
 800366a:	4293      	cmp	r3, r2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e0c1      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003672:	4b40      	ldr	r3, [pc, #256]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1ee      	bne.n	800365c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800367e:	7dfb      	ldrb	r3, [r7, #23]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d105      	bne.n	8003690 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003684:	4b3b      	ldr	r3, [pc, #236]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	4a3a      	ldr	r2, [pc, #232]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800368a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800368e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	699b      	ldr	r3, [r3, #24]
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 80ad 	beq.w	80037f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800369a:	4b36      	ldr	r3, [pc, #216]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d060      	beq.n	8003768 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d145      	bne.n	800373a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ae:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7fe f9ce 	bl	8001a54 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f9ca 	bl	8001a54 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e093      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ce:	4b29      	ldr	r3, [pc, #164]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69da      	ldr	r2, [r3, #28]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e8:	019b      	lsls	r3, r3, #6
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f0:	085b      	lsrs	r3, r3, #1
 80036f2:	3b01      	subs	r3, #1
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	061b      	lsls	r3, r3, #24
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003704:	071b      	lsls	r3, r3, #28
 8003706:	491b      	ldr	r1, [pc, #108]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 8003708:	4313      	orrs	r3, r2
 800370a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370c:	4b1b      	ldr	r3, [pc, #108]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800370e:	2201      	movs	r2, #1
 8003710:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003712:	f7fe f99f 	bl	8001a54 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371a:	f7fe f99b 	bl	8001a54 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e064      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800372c:	4b11      	ldr	r3, [pc, #68]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d0f0      	beq.n	800371a <HAL_RCC_OscConfig+0x452>
 8003738:	e05c      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b10      	ldr	r3, [pc, #64]	; (800377c <HAL_RCC_OscConfig+0x4b4>)
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003740:	f7fe f988 	bl	8001a54 <HAL_GetTick>
 8003744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003746:	e008      	b.n	800375a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003748:	f7fe f984 	bl	8001a54 <HAL_GetTick>
 800374c:	4602      	mov	r2, r0
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	1ad3      	subs	r3, r2, r3
 8003752:	2b02      	cmp	r3, #2
 8003754:	d901      	bls.n	800375a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003756:	2303      	movs	r3, #3
 8003758:	e04d      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_OscConfig+0x4ac>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1f0      	bne.n	8003748 <HAL_RCC_OscConfig+0x480>
 8003766:	e045      	b.n	80037f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	699b      	ldr	r3, [r3, #24]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d107      	bne.n	8003780 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e040      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
 8003774:	40023800 	.word	0x40023800
 8003778:	40007000 	.word	0x40007000
 800377c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <HAL_RCC_OscConfig+0x538>)
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	2b01      	cmp	r3, #1
 800378c:	d030      	beq.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003798:	429a      	cmp	r2, r3
 800379a:	d129      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	429a      	cmp	r2, r3
 80037a8:	d122      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b0:	4013      	ands	r3, r2
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d119      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	085b      	lsrs	r3, r3, #1
 80037c8:	3b01      	subs	r3, #1
 80037ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d10f      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037dc:	429a      	cmp	r2, r3
 80037de:	d107      	bne.n	80037f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e000      	b.n	80037f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3718      	adds	r7, #24
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800

08003804 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e041      	b.n	800389a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d106      	bne.n	8003830 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f839 	bl	80038a2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2202      	movs	r2, #2
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	3304      	adds	r3, #4
 8003840:	4619      	mov	r1, r3
 8003842:	4610      	mov	r0, r2
 8003844:	f000 f9c0 	bl	8003bc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2201      	movs	r2, #1
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80038a2:	b480      	push	{r7}
 80038a4:	b083      	sub	sp, #12
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80038aa:	bf00      	nop
 80038ac:	370c      	adds	r7, #12
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b085      	sub	sp, #20
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d001      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e04e      	b.n	800396e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2202      	movs	r2, #2
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68da      	ldr	r2, [r3, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <HAL_TIM_Base_Start_IT+0xc4>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d022      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038fa:	d01d      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a1f      	ldr	r2, [pc, #124]	; (8003980 <HAL_TIM_Base_Start_IT+0xc8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d018      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1e      	ldr	r2, [pc, #120]	; (8003984 <HAL_TIM_Base_Start_IT+0xcc>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d013      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1c      	ldr	r2, [pc, #112]	; (8003988 <HAL_TIM_Base_Start_IT+0xd0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1b      	ldr	r2, [pc, #108]	; (800398c <HAL_TIM_Base_Start_IT+0xd4>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d009      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_TIM_Base_Start_IT+0xd8>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <HAL_TIM_Base_Start_IT+0x80>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_TIM_Base_Start_IT+0xdc>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d111      	bne.n	800395c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2b06      	cmp	r3, #6
 8003948:	d010      	beq.n	800396c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681a      	ldr	r2, [r3, #0]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0201 	orr.w	r2, r2, #1
 8003958:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	e007      	b.n	800396c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40010400 	.word	0x40010400
 8003990:	40014000 	.word	0x40014000
 8003994:	40001800 	.word	0x40001800

08003998 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d020      	beq.n	80039fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d01b      	beq.n	80039fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0202 	mvn.w	r2, #2
 80039cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f8d2 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 f8c4 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8d5 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	f003 0304 	and.w	r3, r3, #4
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d020      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0304 	and.w	r3, r3, #4
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d01b      	beq.n	8003a48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f06f 0204 	mvn.w	r2, #4
 8003a18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2202      	movs	r2, #2
 8003a1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f8ac 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003a34:	e005      	b.n	8003a42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f89e 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f8af 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d020      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0308 	and.w	r3, r3, #8
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d01b      	beq.n	8003a94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0208 	mvn.w	r2, #8
 8003a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2204      	movs	r2, #4
 8003a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	f003 0303 	and.w	r3, r3, #3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f886 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003a80:	e005      	b.n	8003a8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f878 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f000 f889 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f003 0310 	and.w	r3, r3, #16
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d020      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 0310 	and.w	r3, r3, #16
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d01b      	beq.n	8003ae0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0210 	mvn.w	r2, #16
 8003ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	69db      	ldr	r3, [r3, #28]
 8003abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d003      	beq.n	8003ace <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f860 	bl	8003b8c <HAL_TIM_IC_CaptureCallback>
 8003acc:	e005      	b.n	8003ada <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f852 	bl	8003b78 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f000 f863 	bl	8003ba0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2200      	movs	r2, #0
 8003ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00c      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d007      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f06f 0201 	mvn.w	r2, #1
 8003afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f7fd fac8 	bl	8001094 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00c      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d007      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f000 f906 	bl	8003d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00c      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d007      	beq.n	8003b4c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f834 	bl	8003bb4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	f003 0320 	and.w	r3, r3, #32
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00c      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	f003 0320 	and.w	r3, r3, #32
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d007      	beq.n	8003b70 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f06f 0220 	mvn.w	r2, #32
 8003b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8d8 	bl	8003d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b70:	bf00      	nop
 8003b72:	3710      	adds	r7, #16
 8003b74:	46bd      	mov	sp, r7
 8003b76:	bd80      	pop	{r7, pc}

08003b78 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <TIM_Base_SetConfig+0x12c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d013      	beq.n	8003c08 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003be6:	d00f      	beq.n	8003c08 <TIM_Base_SetConfig+0x40>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a43      	ldr	r2, [pc, #268]	; (8003cf8 <TIM_Base_SetConfig+0x130>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a42      	ldr	r2, [pc, #264]	; (8003cfc <TIM_Base_SetConfig+0x134>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a41      	ldr	r2, [pc, #260]	; (8003d00 <TIM_Base_SetConfig+0x138>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d003      	beq.n	8003c08 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a40      	ldr	r2, [pc, #256]	; (8003d04 <TIM_Base_SetConfig+0x13c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d108      	bne.n	8003c1a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	68fa      	ldr	r2, [r7, #12]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a35      	ldr	r2, [pc, #212]	; (8003cf4 <TIM_Base_SetConfig+0x12c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d02b      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c28:	d027      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a32      	ldr	r2, [pc, #200]	; (8003cf8 <TIM_Base_SetConfig+0x130>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d023      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a31      	ldr	r2, [pc, #196]	; (8003cfc <TIM_Base_SetConfig+0x134>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d01f      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a30      	ldr	r2, [pc, #192]	; (8003d00 <TIM_Base_SetConfig+0x138>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d01b      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2f      	ldr	r2, [pc, #188]	; (8003d04 <TIM_Base_SetConfig+0x13c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d017      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2e      	ldr	r2, [pc, #184]	; (8003d08 <TIM_Base_SetConfig+0x140>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d013      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a2d      	ldr	r2, [pc, #180]	; (8003d0c <TIM_Base_SetConfig+0x144>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d00f      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a2c      	ldr	r2, [pc, #176]	; (8003d10 <TIM_Base_SetConfig+0x148>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d00b      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a2b      	ldr	r2, [pc, #172]	; (8003d14 <TIM_Base_SetConfig+0x14c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d007      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <TIM_Base_SetConfig+0x150>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d003      	beq.n	8003c7a <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a29      	ldr	r2, [pc, #164]	; (8003d1c <TIM_Base_SetConfig+0x154>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d108      	bne.n	8003c8c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	68fa      	ldr	r2, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	4a10      	ldr	r2, [pc, #64]	; (8003cf4 <TIM_Base_SetConfig+0x12c>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d003      	beq.n	8003cc0 <TIM_Base_SetConfig+0xf8>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <TIM_Base_SetConfig+0x13c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d103      	bne.n	8003cc8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	691a      	ldr	r2, [r3, #16]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	691b      	ldr	r3, [r3, #16]
 8003cd2:	f003 0301 	and.w	r3, r3, #1
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d105      	bne.n	8003ce6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	f023 0201 	bic.w	r2, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	611a      	str	r2, [r3, #16]
  }
}
 8003ce6:	bf00      	nop
 8003ce8:	3714      	adds	r7, #20
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40010000 	.word	0x40010000
 8003cf8:	40000400 	.word	0x40000400
 8003cfc:	40000800 	.word	0x40000800
 8003d00:	40000c00 	.word	0x40000c00
 8003d04:	40010400 	.word	0x40010400
 8003d08:	40014000 	.word	0x40014000
 8003d0c:	40014400 	.word	0x40014400
 8003d10:	40014800 	.word	0x40014800
 8003d14:	40001800 	.word	0x40001800
 8003d18:	40001c00 	.word	0x40001c00
 8003d1c:	40002000 	.word	0x40002000

08003d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d28:	bf00      	nop
 8003d2a:	370c      	adds	r7, #12
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr

08003d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d3c:	bf00      	nop
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d46:	4770      	bx	lr

08003d48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e042      	b.n	8003de0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d106      	bne.n	8003d74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f7fd fce4 	bl	800173c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2224      	movs	r2, #36	; 0x24
 8003d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68da      	ldr	r2, [r3, #12]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f000 f973 	bl	8004078 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	695a      	ldr	r2, [r3, #20]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68da      	ldr	r2, [r3, #12]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2220      	movs	r2, #32
 8003dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003dde:	2300      	movs	r3, #0
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08a      	sub	sp, #40	; 0x28
 8003dec:	af02      	add	r7, sp, #8
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	603b      	str	r3, [r7, #0]
 8003df4:	4613      	mov	r3, r2
 8003df6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b20      	cmp	r3, #32
 8003e06:	d175      	bne.n	8003ef4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x2c>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e06e      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2221      	movs	r2, #33	; 0x21
 8003e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e26:	f7fd fe15 	bl	8001a54 <HAL_GetTick>
 8003e2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	88fa      	ldrh	r2, [r7, #6]
 8003e30:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	88fa      	ldrh	r2, [r7, #6]
 8003e36:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e40:	d108      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d104      	bne.n	8003e54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	e003      	b.n	8003e5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e5c:	e02e      	b.n	8003ebc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	2200      	movs	r2, #0
 8003e66:	2180      	movs	r1, #128	; 0x80
 8003e68:	68f8      	ldr	r0, [r7, #12]
 8003e6a:	f000 f848 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e03a      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10b      	bne.n	8003e9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	881b      	ldrh	r3, [r3, #0]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e94:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	3302      	adds	r3, #2
 8003e9a:	61bb      	str	r3, [r7, #24]
 8003e9c:	e007      	b.n	8003eae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e9e:	69fb      	ldr	r3, [r7, #28]
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1cb      	bne.n	8003e5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	9300      	str	r3, [sp, #0]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	2140      	movs	r1, #64	; 0x40
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f000 f814 	bl	8003efe <UART_WaitOnFlagUntilTimeout>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d005      	beq.n	8003ee8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2220      	movs	r2, #32
 8003ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e006      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	e000      	b.n	8003ef6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003ef4:	2302      	movs	r3, #2
  }
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3720      	adds	r7, #32
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}

08003efe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003efe:	b580      	push	{r7, lr}
 8003f00:	b086      	sub	sp, #24
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	60f8      	str	r0, [r7, #12]
 8003f06:	60b9      	str	r1, [r7, #8]
 8003f08:	603b      	str	r3, [r7, #0]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0e:	e03b      	b.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f10:	6a3b      	ldr	r3, [r7, #32]
 8003f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f16:	d037      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f18:	f7fd fd9c 	bl	8001a54 <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	6a3a      	ldr	r2, [r7, #32]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d302      	bcc.n	8003f2e <UART_WaitOnFlagUntilTimeout+0x30>
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e03a      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d023      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	2b80      	cmp	r3, #128	; 0x80
 8003f44:	d020      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b40      	cmp	r3, #64	; 0x40
 8003f4a:	d01d      	beq.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0308 	and.w	r3, r3, #8
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d116      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003f70:	68f8      	ldr	r0, [r7, #12]
 8003f72:	f000 f81d 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2208      	movs	r2, #8
 8003f7a:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e00f      	b.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	4013      	ands	r3, r2
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	bf0c      	ite	eq
 8003f98:	2301      	moveq	r3, #1
 8003f9a:	2300      	movne	r3, #0
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d0b4      	beq.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003fa6:	2300      	movs	r3, #0
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b095      	sub	sp, #84	; 0x54
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fd8:	643a      	str	r2, [r7, #64]	; 0x40
 8003fda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003fde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	64bb      	str	r3, [r7, #72]	; 0x48
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800400c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800401a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004024:	2b01      	cmp	r3, #1
 8004026:	d119      	bne.n	800405c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	e853 3f00 	ldrex	r3, [r3]
 8004036:	60bb      	str	r3, [r7, #8]
   return(result);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f023 0310 	bic.w	r3, r3, #16
 800403e:	647b      	str	r3, [r7, #68]	; 0x44
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	330c      	adds	r3, #12
 8004046:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004048:	61ba      	str	r2, [r7, #24]
 800404a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404c:	6979      	ldr	r1, [r7, #20]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	e841 2300 	strex	r3, r2, [r1]
 8004054:	613b      	str	r3, [r7, #16]
   return(result);
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d1e5      	bne.n	8004028 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2220      	movs	r2, #32
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	631a      	str	r2, [r3, #48]	; 0x30
}
 800406a:	bf00      	nop
 800406c:	3754      	adds	r7, #84	; 0x54
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr
	...

08004078 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800407c:	b0c0      	sub	sp, #256	; 0x100
 800407e:	af00      	add	r7, sp, #0
 8004080:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004094:	68d9      	ldr	r1, [r3, #12]
 8004096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	ea40 0301 	orr.w	r3, r0, r1
 80040a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80040a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	431a      	orrs	r2, r3
 80040b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	431a      	orrs	r2, r3
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80040c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80040d0:	f021 010c 	bic.w	r1, r1, #12
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80040de:	430b      	orrs	r3, r1
 80040e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80040ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f2:	6999      	ldr	r1, [r3, #24]
 80040f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	ea40 0301 	orr.w	r3, r0, r1
 80040fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	4b8f      	ldr	r3, [pc, #572]	; (8004344 <UART_SetConfig+0x2cc>)
 8004108:	429a      	cmp	r2, r3
 800410a:	d005      	beq.n	8004118 <UART_SetConfig+0xa0>
 800410c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	4b8d      	ldr	r3, [pc, #564]	; (8004348 <UART_SetConfig+0x2d0>)
 8004114:	429a      	cmp	r2, r3
 8004116:	d104      	bne.n	8004122 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004118:	f7fe fe60 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 800411c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004120:	e003      	b.n	800412a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004122:	f7fe fe47 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 8004126:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800412a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004134:	f040 810c 	bne.w	8004350 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004138:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800413c:	2200      	movs	r2, #0
 800413e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004142:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004146:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800414a:	4622      	mov	r2, r4
 800414c:	462b      	mov	r3, r5
 800414e:	1891      	adds	r1, r2, r2
 8004150:	65b9      	str	r1, [r7, #88]	; 0x58
 8004152:	415b      	adcs	r3, r3
 8004154:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004156:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800415a:	4621      	mov	r1, r4
 800415c:	eb12 0801 	adds.w	r8, r2, r1
 8004160:	4629      	mov	r1, r5
 8004162:	eb43 0901 	adc.w	r9, r3, r1
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004172:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004176:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800417a:	4690      	mov	r8, r2
 800417c:	4699      	mov	r9, r3
 800417e:	4623      	mov	r3, r4
 8004180:	eb18 0303 	adds.w	r3, r8, r3
 8004184:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004188:	462b      	mov	r3, r5
 800418a:	eb49 0303 	adc.w	r3, r9, r3
 800418e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800419e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80041a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80041a6:	460b      	mov	r3, r1
 80041a8:	18db      	adds	r3, r3, r3
 80041aa:	653b      	str	r3, [r7, #80]	; 0x50
 80041ac:	4613      	mov	r3, r2
 80041ae:	eb42 0303 	adc.w	r3, r2, r3
 80041b2:	657b      	str	r3, [r7, #84]	; 0x54
 80041b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80041b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80041bc:	f7fc f880 	bl	80002c0 <__aeabi_uldivmod>
 80041c0:	4602      	mov	r2, r0
 80041c2:	460b      	mov	r3, r1
 80041c4:	4b61      	ldr	r3, [pc, #388]	; (800434c <UART_SetConfig+0x2d4>)
 80041c6:	fba3 2302 	umull	r2, r3, r3, r2
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	011c      	lsls	r4, r3, #4
 80041ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d2:	2200      	movs	r2, #0
 80041d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80041dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80041e0:	4642      	mov	r2, r8
 80041e2:	464b      	mov	r3, r9
 80041e4:	1891      	adds	r1, r2, r2
 80041e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80041e8:	415b      	adcs	r3, r3
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80041f0:	4641      	mov	r1, r8
 80041f2:	eb12 0a01 	adds.w	sl, r2, r1
 80041f6:	4649      	mov	r1, r9
 80041f8:	eb43 0b01 	adc.w	fp, r3, r1
 80041fc:	f04f 0200 	mov.w	r2, #0
 8004200:	f04f 0300 	mov.w	r3, #0
 8004204:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004208:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800420c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004210:	4692      	mov	sl, r2
 8004212:	469b      	mov	fp, r3
 8004214:	4643      	mov	r3, r8
 8004216:	eb1a 0303 	adds.w	r3, sl, r3
 800421a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800421e:	464b      	mov	r3, r9
 8004220:	eb4b 0303 	adc.w	r3, fp, r3
 8004224:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004234:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004238:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800423c:	460b      	mov	r3, r1
 800423e:	18db      	adds	r3, r3, r3
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
 8004242:	4613      	mov	r3, r2
 8004244:	eb42 0303 	adc.w	r3, r2, r3
 8004248:	647b      	str	r3, [r7, #68]	; 0x44
 800424a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800424e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004252:	f7fc f835 	bl	80002c0 <__aeabi_uldivmod>
 8004256:	4602      	mov	r2, r0
 8004258:	460b      	mov	r3, r1
 800425a:	4611      	mov	r1, r2
 800425c:	4b3b      	ldr	r3, [pc, #236]	; (800434c <UART_SetConfig+0x2d4>)
 800425e:	fba3 2301 	umull	r2, r3, r3, r1
 8004262:	095b      	lsrs	r3, r3, #5
 8004264:	2264      	movs	r2, #100	; 0x64
 8004266:	fb02 f303 	mul.w	r3, r2, r3
 800426a:	1acb      	subs	r3, r1, r3
 800426c:	00db      	lsls	r3, r3, #3
 800426e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004272:	4b36      	ldr	r3, [pc, #216]	; (800434c <UART_SetConfig+0x2d4>)
 8004274:	fba3 2302 	umull	r2, r3, r3, r2
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004280:	441c      	add	r4, r3
 8004282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004286:	2200      	movs	r2, #0
 8004288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800428c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004290:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004294:	4642      	mov	r2, r8
 8004296:	464b      	mov	r3, r9
 8004298:	1891      	adds	r1, r2, r2
 800429a:	63b9      	str	r1, [r7, #56]	; 0x38
 800429c:	415b      	adcs	r3, r3
 800429e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80042a4:	4641      	mov	r1, r8
 80042a6:	1851      	adds	r1, r2, r1
 80042a8:	6339      	str	r1, [r7, #48]	; 0x30
 80042aa:	4649      	mov	r1, r9
 80042ac:	414b      	adcs	r3, r1
 80042ae:	637b      	str	r3, [r7, #52]	; 0x34
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80042bc:	4659      	mov	r1, fp
 80042be:	00cb      	lsls	r3, r1, #3
 80042c0:	4651      	mov	r1, sl
 80042c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042c6:	4651      	mov	r1, sl
 80042c8:	00ca      	lsls	r2, r1, #3
 80042ca:	4610      	mov	r0, r2
 80042cc:	4619      	mov	r1, r3
 80042ce:	4603      	mov	r3, r0
 80042d0:	4642      	mov	r2, r8
 80042d2:	189b      	adds	r3, r3, r2
 80042d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042d8:	464b      	mov	r3, r9
 80042da:	460a      	mov	r2, r1
 80042dc:	eb42 0303 	adc.w	r3, r2, r3
 80042e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80042f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80042f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80042f8:	460b      	mov	r3, r1
 80042fa:	18db      	adds	r3, r3, r3
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fe:	4613      	mov	r3, r2
 8004300:	eb42 0303 	adc.w	r3, r2, r3
 8004304:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800430a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800430e:	f7fb ffd7 	bl	80002c0 <__aeabi_uldivmod>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4b0d      	ldr	r3, [pc, #52]	; (800434c <UART_SetConfig+0x2d4>)
 8004318:	fba3 1302 	umull	r1, r3, r3, r2
 800431c:	095b      	lsrs	r3, r3, #5
 800431e:	2164      	movs	r1, #100	; 0x64
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	00db      	lsls	r3, r3, #3
 8004328:	3332      	adds	r3, #50	; 0x32
 800432a:	4a08      	ldr	r2, [pc, #32]	; (800434c <UART_SetConfig+0x2d4>)
 800432c:	fba2 2303 	umull	r2, r3, r2, r3
 8004330:	095b      	lsrs	r3, r3, #5
 8004332:	f003 0207 	and.w	r2, r3, #7
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4422      	add	r2, r4
 800433e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004340:	e106      	b.n	8004550 <UART_SetConfig+0x4d8>
 8004342:	bf00      	nop
 8004344:	40011000 	.word	0x40011000
 8004348:	40011400 	.word	0x40011400
 800434c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004350:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004354:	2200      	movs	r2, #0
 8004356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800435a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800435e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004362:	4642      	mov	r2, r8
 8004364:	464b      	mov	r3, r9
 8004366:	1891      	adds	r1, r2, r2
 8004368:	6239      	str	r1, [r7, #32]
 800436a:	415b      	adcs	r3, r3
 800436c:	627b      	str	r3, [r7, #36]	; 0x24
 800436e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004372:	4641      	mov	r1, r8
 8004374:	1854      	adds	r4, r2, r1
 8004376:	4649      	mov	r1, r9
 8004378:	eb43 0501 	adc.w	r5, r3, r1
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	00eb      	lsls	r3, r5, #3
 8004386:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800438a:	00e2      	lsls	r2, r4, #3
 800438c:	4614      	mov	r4, r2
 800438e:	461d      	mov	r5, r3
 8004390:	4643      	mov	r3, r8
 8004392:	18e3      	adds	r3, r4, r3
 8004394:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004398:	464b      	mov	r3, r9
 800439a:	eb45 0303 	adc.w	r3, r5, r3
 800439e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80043ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80043be:	4629      	mov	r1, r5
 80043c0:	008b      	lsls	r3, r1, #2
 80043c2:	4621      	mov	r1, r4
 80043c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043c8:	4621      	mov	r1, r4
 80043ca:	008a      	lsls	r2, r1, #2
 80043cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80043d0:	f7fb ff76 	bl	80002c0 <__aeabi_uldivmod>
 80043d4:	4602      	mov	r2, r0
 80043d6:	460b      	mov	r3, r1
 80043d8:	4b60      	ldr	r3, [pc, #384]	; (800455c <UART_SetConfig+0x4e4>)
 80043da:	fba3 2302 	umull	r2, r3, r3, r2
 80043de:	095b      	lsrs	r3, r3, #5
 80043e0:	011c      	lsls	r4, r3, #4
 80043e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043e6:	2200      	movs	r2, #0
 80043e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80043f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80043f4:	4642      	mov	r2, r8
 80043f6:	464b      	mov	r3, r9
 80043f8:	1891      	adds	r1, r2, r2
 80043fa:	61b9      	str	r1, [r7, #24]
 80043fc:	415b      	adcs	r3, r3
 80043fe:	61fb      	str	r3, [r7, #28]
 8004400:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004404:	4641      	mov	r1, r8
 8004406:	1851      	adds	r1, r2, r1
 8004408:	6139      	str	r1, [r7, #16]
 800440a:	4649      	mov	r1, r9
 800440c:	414b      	adcs	r3, r1
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	f04f 0200 	mov.w	r2, #0
 8004414:	f04f 0300 	mov.w	r3, #0
 8004418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800441c:	4659      	mov	r1, fp
 800441e:	00cb      	lsls	r3, r1, #3
 8004420:	4651      	mov	r1, sl
 8004422:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004426:	4651      	mov	r1, sl
 8004428:	00ca      	lsls	r2, r1, #3
 800442a:	4610      	mov	r0, r2
 800442c:	4619      	mov	r1, r3
 800442e:	4603      	mov	r3, r0
 8004430:	4642      	mov	r2, r8
 8004432:	189b      	adds	r3, r3, r2
 8004434:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004438:	464b      	mov	r3, r9
 800443a:	460a      	mov	r2, r1
 800443c:	eb42 0303 	adc.w	r3, r2, r3
 8004440:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	67bb      	str	r3, [r7, #120]	; 0x78
 800444e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800445c:	4649      	mov	r1, r9
 800445e:	008b      	lsls	r3, r1, #2
 8004460:	4641      	mov	r1, r8
 8004462:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004466:	4641      	mov	r1, r8
 8004468:	008a      	lsls	r2, r1, #2
 800446a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800446e:	f7fb ff27 	bl	80002c0 <__aeabi_uldivmod>
 8004472:	4602      	mov	r2, r0
 8004474:	460b      	mov	r3, r1
 8004476:	4611      	mov	r1, r2
 8004478:	4b38      	ldr	r3, [pc, #224]	; (800455c <UART_SetConfig+0x4e4>)
 800447a:	fba3 2301 	umull	r2, r3, r3, r1
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	2264      	movs	r2, #100	; 0x64
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	1acb      	subs	r3, r1, r3
 8004488:	011b      	lsls	r3, r3, #4
 800448a:	3332      	adds	r3, #50	; 0x32
 800448c:	4a33      	ldr	r2, [pc, #204]	; (800455c <UART_SetConfig+0x4e4>)
 800448e:	fba2 2303 	umull	r2, r3, r2, r3
 8004492:	095b      	lsrs	r3, r3, #5
 8004494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004498:	441c      	add	r4, r3
 800449a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800449e:	2200      	movs	r2, #0
 80044a0:	673b      	str	r3, [r7, #112]	; 0x70
 80044a2:	677a      	str	r2, [r7, #116]	; 0x74
 80044a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	1891      	adds	r1, r2, r2
 80044ae:	60b9      	str	r1, [r7, #8]
 80044b0:	415b      	adcs	r3, r3
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044b8:	4641      	mov	r1, r8
 80044ba:	1851      	adds	r1, r2, r1
 80044bc:	6039      	str	r1, [r7, #0]
 80044be:	4649      	mov	r1, r9
 80044c0:	414b      	adcs	r3, r1
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	f04f 0200 	mov.w	r2, #0
 80044c8:	f04f 0300 	mov.w	r3, #0
 80044cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80044d0:	4659      	mov	r1, fp
 80044d2:	00cb      	lsls	r3, r1, #3
 80044d4:	4651      	mov	r1, sl
 80044d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044da:	4651      	mov	r1, sl
 80044dc:	00ca      	lsls	r2, r1, #3
 80044de:	4610      	mov	r0, r2
 80044e0:	4619      	mov	r1, r3
 80044e2:	4603      	mov	r3, r0
 80044e4:	4642      	mov	r2, r8
 80044e6:	189b      	adds	r3, r3, r2
 80044e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ea:	464b      	mov	r3, r9
 80044ec:	460a      	mov	r2, r1
 80044ee:	eb42 0303 	adc.w	r3, r2, r3
 80044f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80044f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	663b      	str	r3, [r7, #96]	; 0x60
 80044fe:	667a      	str	r2, [r7, #100]	; 0x64
 8004500:	f04f 0200 	mov.w	r2, #0
 8004504:	f04f 0300 	mov.w	r3, #0
 8004508:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800450c:	4649      	mov	r1, r9
 800450e:	008b      	lsls	r3, r1, #2
 8004510:	4641      	mov	r1, r8
 8004512:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004516:	4641      	mov	r1, r8
 8004518:	008a      	lsls	r2, r1, #2
 800451a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800451e:	f7fb fecf 	bl	80002c0 <__aeabi_uldivmod>
 8004522:	4602      	mov	r2, r0
 8004524:	460b      	mov	r3, r1
 8004526:	4b0d      	ldr	r3, [pc, #52]	; (800455c <UART_SetConfig+0x4e4>)
 8004528:	fba3 1302 	umull	r1, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	2164      	movs	r1, #100	; 0x64
 8004530:	fb01 f303 	mul.w	r3, r1, r3
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	3332      	adds	r3, #50	; 0x32
 800453a:	4a08      	ldr	r2, [pc, #32]	; (800455c <UART_SetConfig+0x4e4>)
 800453c:	fba2 2303 	umull	r2, r3, r2, r3
 8004540:	095b      	lsrs	r3, r3, #5
 8004542:	f003 020f 	and.w	r2, r3, #15
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4422      	add	r2, r4
 800454e:	609a      	str	r2, [r3, #8]
}
 8004550:	bf00      	nop
 8004552:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004556:	46bd      	mov	sp, r7
 8004558:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455c:	51eb851f 	.word	0x51eb851f

08004560 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	4603      	mov	r3, r0
 8004568:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800456a:	2300      	movs	r3, #0
 800456c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800456e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004572:	2b84      	cmp	r3, #132	; 0x84
 8004574:	d005      	beq.n	8004582 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004576:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	3303      	adds	r3, #3
 8004580:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004582:	68fb      	ldr	r3, [r7, #12]
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004596:	f3ef 8305 	mrs	r3, IPSR
 800459a:	607b      	str	r3, [r7, #4]
  return(result);
 800459c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800459e:	2b00      	cmp	r3, #0
 80045a0:	bf14      	ite	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	2300      	moveq	r3, #0
 80045a6:	b2db      	uxtb	r3, r3
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80045b8:	f001 f942 	bl	8005840 <vTaskStartScheduler>
  
  return osOK;
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80045c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c4:	b089      	sub	sp, #36	; 0x24
 80045c6:	af04      	add	r7, sp, #16
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d020      	beq.n	8004616 <osThreadCreate+0x54>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01c      	beq.n	8004616 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685c      	ldr	r4, [r3, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691e      	ldr	r6, [r3, #16]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045ee:	4618      	mov	r0, r3
 80045f0:	f7ff ffb6 	bl	8004560 <makeFreeRtosPriority>
 80045f4:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	695b      	ldr	r3, [r3, #20]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80045fe:	9202      	str	r2, [sp, #8]
 8004600:	9301      	str	r3, [sp, #4]
 8004602:	9100      	str	r1, [sp, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	4632      	mov	r2, r6
 8004608:	4629      	mov	r1, r5
 800460a:	4620      	mov	r0, r4
 800460c:	f000 ff50 	bl	80054b0 <xTaskCreateStatic>
 8004610:	4603      	mov	r3, r0
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e01c      	b.n	8004650 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	685c      	ldr	r4, [r3, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004622:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800462a:	4618      	mov	r0, r3
 800462c:	f7ff ff98 	bl	8004560 <makeFreeRtosPriority>
 8004630:	4602      	mov	r2, r0
 8004632:	f107 030c 	add.w	r3, r7, #12
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	9200      	str	r2, [sp, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	4632      	mov	r2, r6
 800463e:	4629      	mov	r1, r5
 8004640:	4620      	mov	r0, r4
 8004642:	f000 ff92 	bl	800556a <xTaskCreate>
 8004646:	4603      	mov	r3, r0
 8004648:	2b01      	cmp	r3, #1
 800464a:	d001      	beq.n	8004650 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800464c:	2300      	movs	r3, #0
 800464e:	e000      	b.n	8004652 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004650:	68fb      	ldr	r3, [r7, #12]
}
 8004652:	4618      	mov	r0, r3
 8004654:	3714      	adds	r7, #20
 8004656:	46bd      	mov	sp, r7
 8004658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800465a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b084      	sub	sp, #16
 800465e:	af00      	add	r7, sp, #0
 8004660:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <osDelay+0x16>
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	e000      	b.n	8004672 <osDelay+0x18>
 8004670:	2301      	movs	r3, #1
 8004672:	4618      	mov	r0, r3
 8004674:	f001 f8b0 	bl	80057d8 <vTaskDelay>
  
  return osOK;
 8004678:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800467a:	4618      	mov	r0, r3
 800467c:	3710      	adds	r7, #16
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d007      	beq.n	80046a2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	4619      	mov	r1, r3
 8004698:	2001      	movs	r0, #1
 800469a:	f000 faae 	bl	8004bfa <xQueueCreateMutexStatic>
 800469e:	4603      	mov	r3, r0
 80046a0:	e003      	b.n	80046aa <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 80046a2:	2001      	movs	r0, #1
 80046a4:	f000 fa91 	bl	8004bca <xQueueCreateMutex>
 80046a8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
	...

080046b4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80046be:	2300      	movs	r3, #0
 80046c0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d101      	bne.n	80046cc <osMutexWait+0x18>
    return osErrorParameter;
 80046c8:	2380      	movs	r3, #128	; 0x80
 80046ca:	e03a      	b.n	8004742 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d6:	d103      	bne.n	80046e0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80046d8:	f04f 33ff 	mov.w	r3, #4294967295
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	e009      	b.n	80046f4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d006      	beq.n	80046f4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d101      	bne.n	80046f4 <osMutexWait+0x40>
      ticks = 1;
 80046f0:	2301      	movs	r3, #1
 80046f2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80046f4:	f7ff ff4c 	bl	8004590 <inHandlerMode>
 80046f8:	4603      	mov	r3, r0
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d017      	beq.n	800472e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	461a      	mov	r2, r3
 8004704:	2100      	movs	r1, #0
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 fd2a 	bl	8005160 <xQueueReceiveFromISR>
 800470c:	4603      	mov	r3, r0
 800470e:	2b01      	cmp	r3, #1
 8004710:	d001      	beq.n	8004716 <osMutexWait+0x62>
      return osErrorOS;
 8004712:	23ff      	movs	r3, #255	; 0xff
 8004714:	e015      	b.n	8004742 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d011      	beq.n	8004740 <osMutexWait+0x8c>
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <osMutexWait+0x98>)
 800471e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	e008      	b.n	8004740 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 fc09 	bl	8004f48 <xQueueSemaphoreTake>
 8004736:	4603      	mov	r3, r0
 8004738:	2b01      	cmp	r3, #1
 800473a:	d001      	beq.n	8004740 <osMutexWait+0x8c>
    return osErrorOS;
 800473c:	23ff      	movs	r3, #255	; 0xff
 800473e:	e000      	b.n	8004742 <osMutexWait+0x8e>
  }
  
  return osOK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004758:	2300      	movs	r3, #0
 800475a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800475c:	2300      	movs	r3, #0
 800475e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004760:	f7ff ff16 	bl	8004590 <inHandlerMode>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d016      	beq.n	8004798 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4619      	mov	r1, r3
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fb5b 	bl	8004e2c <xQueueGiveFromISR>
 8004776:	4603      	mov	r3, r0
 8004778:	2b01      	cmp	r3, #1
 800477a:	d001      	beq.n	8004780 <osMutexRelease+0x30>
      return osErrorOS;
 800477c:	23ff      	movs	r3, #255	; 0xff
 800477e:	e017      	b.n	80047b0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d013      	beq.n	80047ae <osMutexRelease+0x5e>
 8004786:	4b0c      	ldr	r3, [pc, #48]	; (80047b8 <osMutexRelease+0x68>)
 8004788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	e00a      	b.n	80047ae <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004798:	2300      	movs	r3, #0
 800479a:	2200      	movs	r2, #0
 800479c:	2100      	movs	r1, #0
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fa46 	bl	8004c30 <xQueueGenericSend>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d001      	beq.n	80047ae <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 80047aa:	23ff      	movs	r3, #255	; 0xff
 80047ac:	60fb      	str	r3, [r7, #12]
  }
  return result;
 80047ae:	68fb      	ldr	r3, [r7, #12]
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3710      	adds	r7, #16
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	e000ed04 	.word	0xe000ed04

080047bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f103 0208 	add.w	r2, r3, #8
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f04f 32ff 	mov.w	r2, #4294967295
 80047d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f103 0208 	add.w	r2, r3, #8
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f103 0208 	add.w	r2, r3, #8
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800480a:	bf00      	nop
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	689a      	ldr	r2, [r3, #8]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	601a      	str	r2, [r3, #0]
}
 8004852:	bf00      	nop
 8004854:	3714      	adds	r7, #20
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr

0800485e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800485e:	b480      	push	{r7}
 8004860:	b085      	sub	sp, #20
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d103      	bne.n	800487e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	e00c      	b.n	8004898 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3308      	adds	r3, #8
 8004882:	60fb      	str	r3, [r7, #12]
 8004884:	e002      	b.n	800488c <vListInsert+0x2e>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	60fb      	str	r3, [r7, #12]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68ba      	ldr	r2, [r7, #8]
 8004894:	429a      	cmp	r2, r3
 8004896:	d2f6      	bcs.n	8004886 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	685a      	ldr	r2, [r3, #4]
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68fa      	ldr	r2, [r7, #12]
 80048ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	683a      	ldr	r2, [r7, #0]
 80048b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	601a      	str	r2, [r3, #0]
}
 80048c4:	bf00      	nop
 80048c6:	3714      	adds	r7, #20
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr

080048d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	6892      	ldr	r2, [r2, #8]
 80048e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	6852      	ldr	r2, [r2, #4]
 80048f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d103      	bne.n	8004904 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	1e5a      	subs	r2, r3, #1
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
}
 8004918:	4618      	mov	r0, r3
 800491a:	3714      	adds	r7, #20
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d10a      	bne.n	800494e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493c:	f383 8811 	msr	BASEPRI, r3
 8004940:	f3bf 8f6f 	isb	sy
 8004944:	f3bf 8f4f 	dsb	sy
 8004948:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800494a:	bf00      	nop
 800494c:	e7fe      	b.n	800494c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800494e:	f001 fec1 	bl	80066d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800495e:	fb01 f303 	mul.w	r3, r1, r3
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2200      	movs	r2, #0
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800497e:	3b01      	subs	r3, #1
 8004980:	68f9      	ldr	r1, [r7, #12]
 8004982:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004984:	fb01 f303 	mul.w	r3, r1, r3
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	22ff      	movs	r2, #255	; 0xff
 8004992:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	22ff      	movs	r2, #255	; 0xff
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d114      	bne.n	80049ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d01a      	beq.n	80049e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3310      	adds	r3, #16
 80049b0:	4618      	mov	r0, r3
 80049b2:	f001 f987 	bl	8005cc4 <xTaskRemoveFromEventList>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049bc:	4b0c      	ldr	r3, [pc, #48]	; (80049f0 <xQueueGenericReset+0xcc>)
 80049be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f3bf 8f4f 	dsb	sy
 80049c8:	f3bf 8f6f 	isb	sy
 80049cc:	e009      	b.n	80049e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fef2 	bl	80047bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3324      	adds	r3, #36	; 0x24
 80049dc:	4618      	mov	r0, r3
 80049de:	f7ff feed 	bl	80047bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049e2:	f001 fea7 	bl	8006734 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049e6:	2301      	movs	r3, #1
}
 80049e8:	4618      	mov	r0, r3
 80049ea:	3710      	adds	r7, #16
 80049ec:	46bd      	mov	sp, r7
 80049ee:	bd80      	pop	{r7, pc}
 80049f0:	e000ed04 	.word	0xe000ed04

080049f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b08e      	sub	sp, #56	; 0x38
 80049f8:	af02      	add	r7, sp, #8
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	607a      	str	r2, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d10a      	bne.n	8004a3a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a36:	bf00      	nop
 8004a38:	e7fe      	b.n	8004a38 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <xQueueGenericCreateStatic+0x52>
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <xQueueGenericCreateStatic+0x56>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <xQueueGenericCreateStatic+0x58>
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	623b      	str	r3, [r7, #32]
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d102      	bne.n	8004a72 <xQueueGenericCreateStatic+0x7e>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d101      	bne.n	8004a76 <xQueueGenericCreateStatic+0x82>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <xQueueGenericCreateStatic+0x84>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	61fb      	str	r3, [r7, #28]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a92:	2348      	movs	r3, #72	; 0x48
 8004a94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2b48      	cmp	r3, #72	; 0x48
 8004a9a:	d00a      	beq.n	8004ab2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	61bb      	str	r3, [r7, #24]
}
 8004aae:	bf00      	nop
 8004ab0:	e7fe      	b.n	8004ab0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ab2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d00d      	beq.n	8004ada <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004abe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ac6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f83f 	bl	8004b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3730      	adds	r7, #48	; 0x30
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08a      	sub	sp, #40	; 0x28
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	4613      	mov	r3, r2
 8004af0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	613b      	str	r3, [r7, #16]
}
 8004b0a:	bf00      	nop
 8004b0c:	e7fe      	b.n	8004b0c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	fb02 f303 	mul.w	r3, r2, r3
 8004b16:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3348      	adds	r3, #72	; 0x48
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f001 fefb 	bl	8006918 <pvPortMalloc>
 8004b22:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d011      	beq.n	8004b4e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b2a:	69bb      	ldr	r3, [r7, #24]
 8004b2c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	3348      	adds	r3, #72	; 0x48
 8004b32:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b3c:	79fa      	ldrb	r2, [r7, #7]
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	4613      	mov	r3, r2
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	68f8      	ldr	r0, [r7, #12]
 8004b4a:	f000 f805 	bl	8004b58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
	}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3720      	adds	r7, #32
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b084      	sub	sp, #16
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d103      	bne.n	8004b74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	e002      	b.n	8004b7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b86:	2101      	movs	r1, #1
 8004b88:	69b8      	ldr	r0, [r7, #24]
 8004b8a:	f7ff fecb 	bl	8004924 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b8e:	bf00      	nop
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}

08004b96 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004b96:	b580      	push	{r7, lr}
 8004b98:	b082      	sub	sp, #8
 8004b9a:	af00      	add	r7, sp, #0
 8004b9c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d00e      	beq.n	8004bc2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2100      	movs	r1, #0
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f837 	bl	8004c30 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bc2:	bf00      	nop
 8004bc4:	3708      	adds	r7, #8
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b086      	sub	sp, #24
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	617b      	str	r3, [r7, #20]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004bdc:	79fb      	ldrb	r3, [r7, #7]
 8004bde:	461a      	mov	r2, r3
 8004be0:	6939      	ldr	r1, [r7, #16]
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7ff ff7e 	bl	8004ae4 <xQueueGenericCreate>
 8004be8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff ffd3 	bl	8004b96 <prvInitialiseMutex>

		return xNewQueue;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
	}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b088      	sub	sp, #32
 8004bfe:	af02      	add	r7, sp, #8
 8004c00:	4603      	mov	r3, r0
 8004c02:	6039      	str	r1, [r7, #0]
 8004c04:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c06:	2301      	movs	r3, #1
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c0e:	79fb      	ldrb	r3, [r7, #7]
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2200      	movs	r2, #0
 8004c16:	6939      	ldr	r1, [r7, #16]
 8004c18:	6978      	ldr	r0, [r7, #20]
 8004c1a:	f7ff feeb 	bl	80049f4 <xQueueGenericCreateStatic>
 8004c1e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c20:	68f8      	ldr	r0, [r7, #12]
 8004c22:	f7ff ffb8 	bl	8004b96 <prvInitialiseMutex>

		return xNewQueue;
 8004c26:	68fb      	ldr	r3, [r7, #12]
	}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b08e      	sub	sp, #56	; 0x38
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	607a      	str	r2, [r7, #4]
 8004c3c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10a      	bne.n	8004c62 <xQueueGenericSend+0x32>
	__asm volatile
 8004c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c50:	f383 8811 	msr	BASEPRI, r3
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c5e:	bf00      	nop
 8004c60:	e7fe      	b.n	8004c60 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <xQueueGenericSend+0x40>
 8004c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d101      	bne.n	8004c74 <xQueueGenericSend+0x44>
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <xQueueGenericSend+0x46>
 8004c74:	2300      	movs	r3, #0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10a      	bne.n	8004c90 <xQueueGenericSend+0x60>
	__asm volatile
 8004c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7e:	f383 8811 	msr	BASEPRI, r3
 8004c82:	f3bf 8f6f 	isb	sy
 8004c86:	f3bf 8f4f 	dsb	sy
 8004c8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c8c:	bf00      	nop
 8004c8e:	e7fe      	b.n	8004c8e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d103      	bne.n	8004c9e <xQueueGenericSend+0x6e>
 8004c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <xQueueGenericSend+0x72>
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e000      	b.n	8004ca4 <xQueueGenericSend+0x74>
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10a      	bne.n	8004cbe <xQueueGenericSend+0x8e>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	623b      	str	r3, [r7, #32]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cbe:	f001 f9bd 	bl	800603c <xTaskGetSchedulerState>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d102      	bne.n	8004cce <xQueueGenericSend+0x9e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d101      	bne.n	8004cd2 <xQueueGenericSend+0xa2>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e000      	b.n	8004cd4 <xQueueGenericSend+0xa4>
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xQueueGenericSend+0xbe>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	61fb      	str	r3, [r7, #28]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004cee:	f001 fcf1 	bl	80066d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d302      	bcc.n	8004d04 <xQueueGenericSend+0xd4>
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d129      	bne.n	8004d58 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d04:	683a      	ldr	r2, [r7, #0]
 8004d06:	68b9      	ldr	r1, [r7, #8]
 8004d08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d0a:	f000 fac1 	bl	8005290 <prvCopyDataToQueue>
 8004d0e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d010      	beq.n	8004d3a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1a:	3324      	adds	r3, #36	; 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f000 ffd1 	bl	8005cc4 <xTaskRemoveFromEventList>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004d28:	4b3f      	ldr	r3, [pc, #252]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2e:	601a      	str	r2, [r3, #0]
 8004d30:	f3bf 8f4f 	dsb	sy
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	e00a      	b.n	8004d50 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004d40:	4b39      	ldr	r3, [pc, #228]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004d50:	f001 fcf0 	bl	8006734 <vPortExitCritical>
				return pdPASS;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e063      	b.n	8004e20 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004d5e:	f001 fce9 	bl	8006734 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004d62:	2300      	movs	r3, #0
 8004d64:	e05c      	b.n	8004e20 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d106      	bne.n	8004d7a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6c:	f107 0314 	add.w	r3, r7, #20
 8004d70:	4618      	mov	r0, r3
 8004d72:	f001 f809 	bl	8005d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7a:	f001 fcdb 	bl	8006734 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d7e:	f000 fdbf 	bl	8005900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d82:	f001 fca7 	bl	80066d4 <vPortEnterCritical>
 8004d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d92:	d103      	bne.n	8004d9c <xQueueGenericSend+0x16c>
 8004d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da2:	b25b      	sxtb	r3, r3
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d103      	bne.n	8004db2 <xQueueGenericSend+0x182>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	2200      	movs	r2, #0
 8004dae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db2:	f001 fcbf 	bl	8006734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db6:	1d3a      	adds	r2, r7, #4
 8004db8:	f107 0314 	add.w	r3, r7, #20
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 fff8 	bl	8005db4 <xTaskCheckForTimeOut>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d124      	bne.n	8004e14 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004dca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dcc:	f000 fb58 	bl	8005480 <prvIsQueueFull>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d018      	beq.n	8004e08 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd8:	3310      	adds	r3, #16
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4611      	mov	r1, r2
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 ff4c 	bl	8005c7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004de4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004de6:	f000 fae3 	bl	80053b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004dea:	f000 fd97 	bl	800591c <xTaskResumeAll>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f47f af7c 	bne.w	8004cee <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004df6:	4b0c      	ldr	r3, [pc, #48]	; (8004e28 <xQueueGenericSend+0x1f8>)
 8004df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfc:	601a      	str	r2, [r3, #0]
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	e772      	b.n	8004cee <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004e08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e0a:	f000 fad1 	bl	80053b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e0e:	f000 fd85 	bl	800591c <xTaskResumeAll>
 8004e12:	e76c      	b.n	8004cee <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004e14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e16:	f000 facb 	bl	80053b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e1a:	f000 fd7f 	bl	800591c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004e1e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3738      	adds	r7, #56	; 0x38
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b08e      	sub	sp, #56	; 0x38
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d10a      	bne.n	8004e56 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e44:	f383 8811 	msr	BASEPRI, r3
 8004e48:	f3bf 8f6f 	isb	sy
 8004e4c:	f3bf 8f4f 	dsb	sy
 8004e50:	623b      	str	r3, [r7, #32]
}
 8004e52:	bf00      	nop
 8004e54:	e7fe      	b.n	8004e54 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d00a      	beq.n	8004e74 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e62:	f383 8811 	msr	BASEPRI, r3
 8004e66:	f3bf 8f6f 	isb	sy
 8004e6a:	f3bf 8f4f 	dsb	sy
 8004e6e:	61fb      	str	r3, [r7, #28]
}
 8004e70:	bf00      	nop
 8004e72:	e7fe      	b.n	8004e72 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d103      	bne.n	8004e84 <xQueueGiveFromISR+0x58>
 8004e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <xQueueGiveFromISR+0x5c>
 8004e84:	2301      	movs	r3, #1
 8004e86:	e000      	b.n	8004e8a <xQueueGiveFromISR+0x5e>
 8004e88:	2300      	movs	r3, #0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	61bb      	str	r3, [r7, #24]
}
 8004ea0:	bf00      	nop
 8004ea2:	e7fe      	b.n	8004ea2 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ea4:	f001 fcf8 	bl	8006898 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ea8:	f3ef 8211 	mrs	r2, BASEPRI
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	617a      	str	r2, [r7, #20]
 8004ebe:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ec0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ecc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ece:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d22b      	bcs.n	8004f2c <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ed6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ee6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	d112      	bne.n	8004f16 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ef0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d016      	beq.n	8004f26 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efa:	3324      	adds	r3, #36	; 0x24
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fee1 	bl	8005cc4 <xTaskRemoveFromEventList>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00e      	beq.n	8004f26 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2201      	movs	r2, #1
 8004f12:	601a      	str	r2, [r3, #0]
 8004f14:	e007      	b.n	8004f26 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004f16:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	b25a      	sxtb	r2, r3
 8004f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004f26:	2301      	movs	r3, #1
 8004f28:	637b      	str	r3, [r7, #52]	; 0x34
 8004f2a:	e001      	b.n	8004f30 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f32:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004f3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f3e:	4618      	mov	r0, r3
 8004f40:	3738      	adds	r7, #56	; 0x38
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
	...

08004f48 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b08e      	sub	sp, #56	; 0x38
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004f52:	2300      	movs	r3, #0
 8004f54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10a      	bne.n	8004f7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	623b      	str	r3, [r7, #32]
}
 8004f76:	bf00      	nop
 8004f78:	e7fe      	b.n	8004f78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	f3bf 8f4f 	dsb	sy
 8004f92:	61fb      	str	r3, [r7, #28]
}
 8004f94:	bf00      	nop
 8004f96:	e7fe      	b.n	8004f96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f98:	f001 f850 	bl	800603c <xTaskGetSchedulerState>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d102      	bne.n	8004fa8 <xQueueSemaphoreTake+0x60>
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <xQueueSemaphoreTake+0x64>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e000      	b.n	8004fae <xQueueSemaphoreTake+0x66>
 8004fac:	2300      	movs	r3, #0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d10a      	bne.n	8004fc8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb6:	f383 8811 	msr	BASEPRI, r3
 8004fba:	f3bf 8f6f 	isb	sy
 8004fbe:	f3bf 8f4f 	dsb	sy
 8004fc2:	61bb      	str	r3, [r7, #24]
}
 8004fc4:	bf00      	nop
 8004fc6:	e7fe      	b.n	8004fc6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fc8:	f001 fb84 	bl	80066d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d024      	beq.n	8005022 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fda:	1e5a      	subs	r2, r3, #1
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d104      	bne.n	8004ff2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004fe8:	f001 f9d0 	bl	800638c <pvTaskIncrementMutexHeldCount>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ff2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff4:	691b      	ldr	r3, [r3, #16]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00f      	beq.n	800501a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ffc:	3310      	adds	r3, #16
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 fe60 	bl	8005cc4 <xTaskRemoveFromEventList>
 8005004:	4603      	mov	r3, r0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d007      	beq.n	800501a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800500a:	4b54      	ldr	r3, [pc, #336]	; (800515c <xQueueSemaphoreTake+0x214>)
 800500c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800501a:	f001 fb8b 	bl	8006734 <vPortExitCritical>
				return pdPASS;
 800501e:	2301      	movs	r3, #1
 8005020:	e097      	b.n	8005152 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502a:	2b00      	cmp	r3, #0
 800502c:	d00a      	beq.n	8005044 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800502e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005032:	f383 8811 	msr	BASEPRI, r3
 8005036:	f3bf 8f6f 	isb	sy
 800503a:	f3bf 8f4f 	dsb	sy
 800503e:	617b      	str	r3, [r7, #20]
}
 8005040:	bf00      	nop
 8005042:	e7fe      	b.n	8005042 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005044:	f001 fb76 	bl	8006734 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005048:	2300      	movs	r3, #0
 800504a:	e082      	b.n	8005152 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800504c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800504e:	2b00      	cmp	r3, #0
 8005050:	d106      	bne.n	8005060 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005052:	f107 030c 	add.w	r3, r7, #12
 8005056:	4618      	mov	r0, r3
 8005058:	f000 fe96 	bl	8005d88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800505c:	2301      	movs	r3, #1
 800505e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005060:	f001 fb68 	bl	8006734 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005064:	f000 fc4c 	bl	8005900 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005068:	f001 fb34 	bl	80066d4 <vPortEnterCritical>
 800506c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005072:	b25b      	sxtb	r3, r3
 8005074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005078:	d103      	bne.n	8005082 <xQueueSemaphoreTake+0x13a>
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	2200      	movs	r2, #0
 800507e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005084:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005088:	b25b      	sxtb	r3, r3
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d103      	bne.n	8005098 <xQueueSemaphoreTake+0x150>
 8005090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005092:	2200      	movs	r2, #0
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005098:	f001 fb4c 	bl	8006734 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800509c:	463a      	mov	r2, r7
 800509e:	f107 030c 	add.w	r3, r7, #12
 80050a2:	4611      	mov	r1, r2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 fe85 	bl	8005db4 <xTaskCheckForTimeOut>
 80050aa:	4603      	mov	r3, r0
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d132      	bne.n	8005116 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80050b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050b2:	f000 f9cf 	bl	8005454 <prvIsQueueEmpty>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d026      	beq.n	800510a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d109      	bne.n	80050d8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80050c4:	f001 fb06 	bl	80066d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80050c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 ffd3 	bl	8006078 <xTaskPriorityInherit>
 80050d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80050d4:	f001 fb2e 	bl	8006734 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80050d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050da:	3324      	adds	r3, #36	; 0x24
 80050dc:	683a      	ldr	r2, [r7, #0]
 80050de:	4611      	mov	r1, r2
 80050e0:	4618      	mov	r0, r3
 80050e2:	f000 fdcb 	bl	8005c7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80050e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050e8:	f000 f962 	bl	80053b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80050ec:	f000 fc16 	bl	800591c <xTaskResumeAll>
 80050f0:	4603      	mov	r3, r0
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	f47f af68 	bne.w	8004fc8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80050f8:	4b18      	ldr	r3, [pc, #96]	; (800515c <xQueueSemaphoreTake+0x214>)
 80050fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	e75e      	b.n	8004fc8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800510a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800510c:	f000 f950 	bl	80053b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005110:	f000 fc04 	bl	800591c <xTaskResumeAll>
 8005114:	e758      	b.n	8004fc8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005118:	f000 f94a 	bl	80053b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800511c:	f000 fbfe 	bl	800591c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005120:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005122:	f000 f997 	bl	8005454 <prvIsQueueEmpty>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	f43f af4d 	beq.w	8004fc8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00d      	beq.n	8005150 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005134:	f001 face 	bl	80066d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005138:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800513a:	f000 f891 	bl	8005260 <prvGetDisinheritPriorityAfterTimeout>
 800513e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005146:	4618      	mov	r0, r3
 8005148:	f001 f892 	bl	8006270 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800514c:	f001 faf2 	bl	8006734 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005150:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005152:	4618      	mov	r0, r3
 8005154:	3738      	adds	r7, #56	; 0x38
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	e000ed04 	.word	0xe000ed04

08005160 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b08e      	sub	sp, #56	; 0x38
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005172:	2b00      	cmp	r3, #0
 8005174:	d10a      	bne.n	800518c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517a:	f383 8811 	msr	BASEPRI, r3
 800517e:	f3bf 8f6f 	isb	sy
 8005182:	f3bf 8f4f 	dsb	sy
 8005186:	623b      	str	r3, [r7, #32]
}
 8005188:	bf00      	nop
 800518a:	e7fe      	b.n	800518a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d103      	bne.n	800519a <xQueueReceiveFromISR+0x3a>
 8005192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <xQueueReceiveFromISR+0x3e>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <xQueueReceiveFromISR+0x40>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	61fb      	str	r3, [r7, #28]
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80051ba:	f001 fb6d 	bl	8006898 <vPortValidateInterruptPriority>
	__asm volatile
 80051be:	f3ef 8211 	mrs	r2, BASEPRI
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	61ba      	str	r2, [r7, #24]
 80051d4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80051d6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d02f      	beq.n	8005246 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80051f4:	f000 f8b6 	bl	8005364 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fa:	1e5a      	subs	r2, r3, #1
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005200:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005208:	d112      	bne.n	8005230 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d016      	beq.n	8005240 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	3310      	adds	r3, #16
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fd54 	bl	8005cc4 <xTaskRemoveFromEventList>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00e      	beq.n	8005240 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
 800522e:	e007      	b.n	8005240 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005234:	3301      	adds	r3, #1
 8005236:	b2db      	uxtb	r3, r3
 8005238:	b25a      	sxtb	r2, r3
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005240:	2301      	movs	r3, #1
 8005242:	637b      	str	r3, [r7, #52]	; 0x34
 8005244:	e001      	b.n	800524a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005246:	2300      	movs	r3, #0
 8005248:	637b      	str	r3, [r7, #52]	; 0x34
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f383 8811 	msr	BASEPRI, r3
}
 8005254:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005258:	4618      	mov	r0, r3
 800525a:	3738      	adds	r7, #56	; 0x38
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d006      	beq.n	800527e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f1c3 0307 	rsb	r3, r3, #7
 800527a:	60fb      	str	r3, [r7, #12]
 800527c:	e001      	b.n	8005282 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800527e:	2300      	movs	r3, #0
 8005280:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005282:	68fb      	ldr	r3, [r7, #12]
	}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800529c:	2300      	movs	r3, #0
 800529e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d10d      	bne.n	80052ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d14d      	bne.n	8005352 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 ff52 	bl	8006164 <xTaskPriorityDisinherit>
 80052c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	609a      	str	r2, [r3, #8]
 80052c8:	e043      	b.n	8005352 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d119      	bne.n	8005304 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	6858      	ldr	r0, [r3, #4]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d8:	461a      	mov	r2, r3
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	f001 fd74 	bl	8006dc8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	685a      	ldr	r2, [r3, #4]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e8:	441a      	add	r2, r3
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d32b      	bcc.n	8005352 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681a      	ldr	r2, [r3, #0]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e026      	b.n	8005352 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	68d8      	ldr	r0, [r3, #12]
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800530c:	461a      	mov	r2, r3
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	f001 fd5a 	bl	8006dc8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	68da      	ldr	r2, [r3, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	425b      	negs	r3, r3
 800531e:	441a      	add	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	429a      	cmp	r2, r3
 800532e:	d207      	bcs.n	8005340 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	425b      	negs	r3, r3
 800533a:	441a      	add	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d105      	bne.n	8005352 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	3b01      	subs	r3, #1
 8005350:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800535a:	697b      	ldr	r3, [r7, #20]
}
 800535c:	4618      	mov	r0, r3
 800535e:	3718      	adds	r7, #24
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b082      	sub	sp, #8
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	2b00      	cmp	r3, #0
 8005374:	d018      	beq.n	80053a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	441a      	add	r2, r3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	429a      	cmp	r2, r3
 800538e:	d303      	bcc.n	8005398 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68d9      	ldr	r1, [r3, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	461a      	mov	r2, r3
 80053a2:	6838      	ldr	r0, [r7, #0]
 80053a4:	f001 fd10 	bl	8006dc8 <memcpy>
	}
}
 80053a8:	bf00      	nop
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80053b8:	f001 f98c 	bl	80066d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053c4:	e011      	b.n	80053ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d012      	beq.n	80053f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3324      	adds	r3, #36	; 0x24
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 fc76 	bl	8005cc4 <xTaskRemoveFromEventList>
 80053d8:	4603      	mov	r3, r0
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80053de:	f000 fd4b 	bl	8005e78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80053e2:	7bfb      	ldrb	r3, [r7, #15]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b2db      	uxtb	r3, r3
 80053e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80053ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	dce9      	bgt.n	80053c6 <prvUnlockQueue+0x16>
 80053f2:	e000      	b.n	80053f6 <prvUnlockQueue+0x46>
					break;
 80053f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	22ff      	movs	r2, #255	; 0xff
 80053fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80053fe:	f001 f999 	bl	8006734 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005402:	f001 f967 	bl	80066d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800540c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800540e:	e011      	b.n	8005434 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d012      	beq.n	800543e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	3310      	adds	r3, #16
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fc51 	bl	8005cc4 <xTaskRemoveFromEventList>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005428:	f000 fd26 	bl	8005e78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800542c:	7bbb      	ldrb	r3, [r7, #14]
 800542e:	3b01      	subs	r3, #1
 8005430:	b2db      	uxtb	r3, r3
 8005432:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005434:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005438:	2b00      	cmp	r3, #0
 800543a:	dce9      	bgt.n	8005410 <prvUnlockQueue+0x60>
 800543c:	e000      	b.n	8005440 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800543e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	22ff      	movs	r2, #255	; 0xff
 8005444:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005448:	f001 f974 	bl	8006734 <vPortExitCritical>
}
 800544c:	bf00      	nop
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800545c:	f001 f93a 	bl	80066d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	e001      	b.n	8005472 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800546e:	2300      	movs	r3, #0
 8005470:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005472:	f001 f95f 	bl	8006734 <vPortExitCritical>

	return xReturn;
 8005476:	68fb      	ldr	r3, [r7, #12]
}
 8005478:	4618      	mov	r0, r3
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005488:	f001 f924 	bl	80066d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005494:	429a      	cmp	r2, r3
 8005496:	d102      	bne.n	800549e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80054a2:	f001 f947 	bl	8006734 <vPortExitCritical>

	return xReturn;
 80054a6:	68fb      	ldr	r3, [r7, #12]
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08e      	sub	sp, #56	; 0x38
 80054b4:	af04      	add	r7, sp, #16
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80054be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <xTaskCreateStatic+0x2a>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	623b      	str	r3, [r7, #32]
}
 80054d6:	bf00      	nop
 80054d8:	e7fe      	b.n	80054d8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80054da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xTaskCreateStatic+0x46>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80054f6:	2354      	movs	r3, #84	; 0x54
 80054f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b54      	cmp	r3, #84	; 0x54
 80054fe:	d00a      	beq.n	8005516 <xTaskCreateStatic+0x66>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	61bb      	str	r3, [r7, #24]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005516:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01e      	beq.n	800555c <xTaskCreateStatic+0xac>
 800551e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005520:	2b00      	cmp	r3, #0
 8005522:	d01b      	beq.n	800555c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005526:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800552c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005530:	2202      	movs	r2, #2
 8005532:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005536:	2300      	movs	r3, #0
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	9302      	str	r3, [sp, #8]
 800553e:	f107 0314 	add.w	r3, r7, #20
 8005542:	9301      	str	r3, [sp, #4]
 8005544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	68b9      	ldr	r1, [r7, #8]
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f000 f850 	bl	80055f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005554:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005556:	f000 f8d5 	bl	8005704 <prvAddNewTaskToReadyList>
 800555a:	e001      	b.n	8005560 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800555c:	2300      	movs	r3, #0
 800555e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005560:	697b      	ldr	r3, [r7, #20]
	}
 8005562:	4618      	mov	r0, r3
 8005564:	3728      	adds	r7, #40	; 0x28
 8005566:	46bd      	mov	sp, r7
 8005568:	bd80      	pop	{r7, pc}

0800556a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800556a:	b580      	push	{r7, lr}
 800556c:	b08c      	sub	sp, #48	; 0x30
 800556e:	af04      	add	r7, sp, #16
 8005570:	60f8      	str	r0, [r7, #12]
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	603b      	str	r3, [r7, #0]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	4618      	mov	r0, r3
 8005580:	f001 f9ca 	bl	8006918 <pvPortMalloc>
 8005584:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800558c:	2054      	movs	r0, #84	; 0x54
 800558e:	f001 f9c3 	bl	8006918 <pvPortMalloc>
 8005592:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d003      	beq.n	80055a2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	697a      	ldr	r2, [r7, #20]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
 80055a0:	e005      	b.n	80055ae <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80055a2:	6978      	ldr	r0, [r7, #20]
 80055a4:	f001 fa84 	bl	8006ab0 <vPortFree>
 80055a8:	e001      	b.n	80055ae <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80055aa:	2300      	movs	r3, #0
 80055ac:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80055ae:	69fb      	ldr	r3, [r7, #28]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d017      	beq.n	80055e4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80055bc:	88fa      	ldrh	r2, [r7, #6]
 80055be:	2300      	movs	r3, #0
 80055c0:	9303      	str	r3, [sp, #12]
 80055c2:	69fb      	ldr	r3, [r7, #28]
 80055c4:	9302      	str	r3, [sp, #8]
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	9301      	str	r3, [sp, #4]
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	68b9      	ldr	r1, [r7, #8]
 80055d2:	68f8      	ldr	r0, [r7, #12]
 80055d4:	f000 f80e 	bl	80055f4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80055d8:	69f8      	ldr	r0, [r7, #28]
 80055da:	f000 f893 	bl	8005704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80055de:	2301      	movs	r3, #1
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e002      	b.n	80055ea <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80055e4:	f04f 33ff 	mov.w	r3, #4294967295
 80055e8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80055ea:	69bb      	ldr	r3, [r7, #24]
	}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3720      	adds	r7, #32
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}

080055f4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b088      	sub	sp, #32
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	60f8      	str	r0, [r7, #12]
 80055fc:	60b9      	str	r1, [r7, #8]
 80055fe:	607a      	str	r2, [r7, #4]
 8005600:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800560c:	3b01      	subs	r3, #1
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	f023 0307 	bic.w	r3, r3, #7
 800561a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800562a:	f383 8811 	msr	BASEPRI, r3
 800562e:	f3bf 8f6f 	isb	sy
 8005632:	f3bf 8f4f 	dsb	sy
 8005636:	617b      	str	r3, [r7, #20]
}
 8005638:	bf00      	nop
 800563a:	e7fe      	b.n	800563a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d01f      	beq.n	8005682 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005642:	2300      	movs	r3, #0
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e012      	b.n	800566e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	4413      	add	r3, r2
 800564e:	7819      	ldrb	r1, [r3, #0]
 8005650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	3334      	adds	r3, #52	; 0x34
 8005658:	460a      	mov	r2, r1
 800565a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800565c:	68ba      	ldr	r2, [r7, #8]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	4413      	add	r3, r2
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d006      	beq.n	8005676 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	2b0f      	cmp	r3, #15
 8005672:	d9e9      	bls.n	8005648 <prvInitialiseNewTask+0x54>
 8005674:	e000      	b.n	8005678 <prvInitialiseNewTask+0x84>
			{
				break;
 8005676:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567a:	2200      	movs	r2, #0
 800567c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005680:	e003      	b.n	800568a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	2200      	movs	r2, #0
 8005686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	2b06      	cmp	r3, #6
 800568e:	d901      	bls.n	8005694 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005690:	2306      	movs	r3, #6
 8005692:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005698:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800569a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80056a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a2:	2200      	movs	r2, #0
 80056a4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80056a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a8:	3304      	adds	r3, #4
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7ff f8a6 	bl	80047fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80056b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b2:	3318      	adds	r3, #24
 80056b4:	4618      	mov	r0, r3
 80056b6:	f7ff f8a1 	bl	80047fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80056ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	f1c3 0207 	rsb	r2, r3, #7
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80056ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80056d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d2:	2200      	movs	r2, #0
 80056d4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	68f9      	ldr	r1, [r7, #12]
 80056e2:	69b8      	ldr	r0, [r7, #24]
 80056e4:	f000 fecc 	bl	8006480 <pxPortInitialiseStack>
 80056e8:	4602      	mov	r2, r0
 80056ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80056ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d002      	beq.n	80056fa <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80056f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056fa:	bf00      	nop
 80056fc:	3720      	adds	r7, #32
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b082      	sub	sp, #8
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800570c:	f000 ffe2 	bl	80066d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <prvAddNewTaskToReadyList+0xb8>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	4a29      	ldr	r2, [pc, #164]	; (80057bc <prvAddNewTaskToReadyList+0xb8>)
 8005718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800571a:	4b29      	ldr	r3, [pc, #164]	; (80057c0 <prvAddNewTaskToReadyList+0xbc>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005722:	4a27      	ldr	r2, [pc, #156]	; (80057c0 <prvAddNewTaskToReadyList+0xbc>)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005728:	4b24      	ldr	r3, [pc, #144]	; (80057bc <prvAddNewTaskToReadyList+0xb8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d110      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005730:	f000 fbc6 	bl	8005ec0 <prvInitialiseTaskLists>
 8005734:	e00d      	b.n	8005752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005736:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <prvAddNewTaskToReadyList+0xc0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d109      	bne.n	8005752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800573e:	4b20      	ldr	r3, [pc, #128]	; (80057c0 <prvAddNewTaskToReadyList+0xbc>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	429a      	cmp	r2, r3
 800574a:	d802      	bhi.n	8005752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800574c:	4a1c      	ldr	r2, [pc, #112]	; (80057c0 <prvAddNewTaskToReadyList+0xbc>)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005752:	4b1d      	ldr	r3, [pc, #116]	; (80057c8 <prvAddNewTaskToReadyList+0xc4>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3301      	adds	r3, #1
 8005758:	4a1b      	ldr	r2, [pc, #108]	; (80057c8 <prvAddNewTaskToReadyList+0xc4>)
 800575a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005760:	2201      	movs	r2, #1
 8005762:	409a      	lsls	r2, r3
 8005764:	4b19      	ldr	r3, [pc, #100]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4313      	orrs	r3, r2
 800576a:	4a18      	ldr	r2, [pc, #96]	; (80057cc <prvAddNewTaskToReadyList+0xc8>)
 800576c:	6013      	str	r3, [r2, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	4613      	mov	r3, r2
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	4413      	add	r3, r2
 8005778:	009b      	lsls	r3, r3, #2
 800577a:	4a15      	ldr	r2, [pc, #84]	; (80057d0 <prvAddNewTaskToReadyList+0xcc>)
 800577c:	441a      	add	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	3304      	adds	r3, #4
 8005782:	4619      	mov	r1, r3
 8005784:	4610      	mov	r0, r2
 8005786:	f7ff f846 	bl	8004816 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800578a:	f000 ffd3 	bl	8006734 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800578e:	4b0d      	ldr	r3, [pc, #52]	; (80057c4 <prvAddNewTaskToReadyList+0xc0>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d00e      	beq.n	80057b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005796:	4b0a      	ldr	r3, [pc, #40]	; (80057c0 <prvAddNewTaskToReadyList+0xbc>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d207      	bcs.n	80057b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80057a4:	4b0b      	ldr	r3, [pc, #44]	; (80057d4 <prvAddNewTaskToReadyList+0xd0>)
 80057a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057aa:	601a      	str	r2, [r3, #0]
 80057ac:	f3bf 8f4f 	dsb	sy
 80057b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20000934 	.word	0x20000934
 80057c0:	20000834 	.word	0x20000834
 80057c4:	20000940 	.word	0x20000940
 80057c8:	20000950 	.word	0x20000950
 80057cc:	2000093c 	.word	0x2000093c
 80057d0:	20000838 	.word	0x20000838
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d017      	beq.n	800581a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80057ea:	4b13      	ldr	r3, [pc, #76]	; (8005838 <vTaskDelay+0x60>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00a      	beq.n	8005808 <vTaskDelay+0x30>
	__asm volatile
 80057f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	60bb      	str	r3, [r7, #8]
}
 8005804:	bf00      	nop
 8005806:	e7fe      	b.n	8005806 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005808:	f000 f87a 	bl	8005900 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800580c:	2100      	movs	r1, #0
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f000 fdd0 	bl	80063b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005814:	f000 f882 	bl	800591c <xTaskResumeAll>
 8005818:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d107      	bne.n	8005830 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005820:	4b06      	ldr	r3, [pc, #24]	; (800583c <vTaskDelay+0x64>)
 8005822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	f3bf 8f4f 	dsb	sy
 800582c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	2000095c 	.word	0x2000095c
 800583c:	e000ed04 	.word	0xe000ed04

08005840 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005846:	2300      	movs	r3, #0
 8005848:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800584a:	2300      	movs	r3, #0
 800584c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800584e:	463a      	mov	r2, r7
 8005850:	1d39      	adds	r1, r7, #4
 8005852:	f107 0308 	add.w	r3, r7, #8
 8005856:	4618      	mov	r0, r3
 8005858:	f7fb f864 	bl	8000924 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800585c:	6839      	ldr	r1, [r7, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	9202      	str	r2, [sp, #8]
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	2300      	movs	r3, #0
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	2300      	movs	r3, #0
 800586c:	460a      	mov	r2, r1
 800586e:	491e      	ldr	r1, [pc, #120]	; (80058e8 <vTaskStartScheduler+0xa8>)
 8005870:	481e      	ldr	r0, [pc, #120]	; (80058ec <vTaskStartScheduler+0xac>)
 8005872:	f7ff fe1d 	bl	80054b0 <xTaskCreateStatic>
 8005876:	4603      	mov	r3, r0
 8005878:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <vTaskStartScheduler+0xb0>)
 800587a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800587c:	4b1c      	ldr	r3, [pc, #112]	; (80058f0 <vTaskStartScheduler+0xb0>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d002      	beq.n	800588a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005884:	2301      	movs	r3, #1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e001      	b.n	800588e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800588a:	2300      	movs	r3, #0
 800588c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d116      	bne.n	80058c2 <vTaskStartScheduler+0x82>
	__asm volatile
 8005894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005898:	f383 8811 	msr	BASEPRI, r3
 800589c:	f3bf 8f6f 	isb	sy
 80058a0:	f3bf 8f4f 	dsb	sy
 80058a4:	613b      	str	r3, [r7, #16]
}
 80058a6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80058a8:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <vTaskStartScheduler+0xb4>)
 80058aa:	f04f 32ff 	mov.w	r2, #4294967295
 80058ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80058b0:	4b11      	ldr	r3, [pc, #68]	; (80058f8 <vTaskStartScheduler+0xb8>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80058b6:	4b11      	ldr	r3, [pc, #68]	; (80058fc <vTaskStartScheduler+0xbc>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80058bc:	f000 fe68 	bl	8006590 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80058c0:	e00e      	b.n	80058e0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c8:	d10a      	bne.n	80058e0 <vTaskStartScheduler+0xa0>
	__asm volatile
 80058ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ce:	f383 8811 	msr	BASEPRI, r3
 80058d2:	f3bf 8f6f 	isb	sy
 80058d6:	f3bf 8f4f 	dsb	sy
 80058da:	60fb      	str	r3, [r7, #12]
}
 80058dc:	bf00      	nop
 80058de:	e7fe      	b.n	80058de <vTaskStartScheduler+0x9e>
}
 80058e0:	bf00      	nop
 80058e2:	3718      	adds	r7, #24
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	08007760 	.word	0x08007760
 80058ec:	08005e91 	.word	0x08005e91
 80058f0:	20000958 	.word	0x20000958
 80058f4:	20000954 	.word	0x20000954
 80058f8:	20000940 	.word	0x20000940
 80058fc:	20000938 	.word	0x20000938

08005900 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005900:	b480      	push	{r7}
 8005902:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005904:	4b04      	ldr	r3, [pc, #16]	; (8005918 <vTaskSuspendAll+0x18>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	3301      	adds	r3, #1
 800590a:	4a03      	ldr	r2, [pc, #12]	; (8005918 <vTaskSuspendAll+0x18>)
 800590c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	2000095c 	.word	0x2000095c

0800591c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005926:	2300      	movs	r3, #0
 8005928:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <xTaskResumeAll+0x114>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d10a      	bne.n	8005948 <xTaskResumeAll+0x2c>
	__asm volatile
 8005932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005936:	f383 8811 	msr	BASEPRI, r3
 800593a:	f3bf 8f6f 	isb	sy
 800593e:	f3bf 8f4f 	dsb	sy
 8005942:	603b      	str	r3, [r7, #0]
}
 8005944:	bf00      	nop
 8005946:	e7fe      	b.n	8005946 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005948:	f000 fec4 	bl	80066d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800594c:	4b38      	ldr	r3, [pc, #224]	; (8005a30 <xTaskResumeAll+0x114>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	3b01      	subs	r3, #1
 8005952:	4a37      	ldr	r2, [pc, #220]	; (8005a30 <xTaskResumeAll+0x114>)
 8005954:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <xTaskResumeAll+0x114>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d161      	bne.n	8005a22 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800595e:	4b35      	ldr	r3, [pc, #212]	; (8005a34 <xTaskResumeAll+0x118>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d05d      	beq.n	8005a22 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005966:	e02e      	b.n	80059c6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005968:	4b33      	ldr	r3, [pc, #204]	; (8005a38 <xTaskResumeAll+0x11c>)
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	3318      	adds	r3, #24
 8005974:	4618      	mov	r0, r3
 8005976:	f7fe ffab 	bl	80048d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3304      	adds	r3, #4
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe ffa6 	bl	80048d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005988:	2201      	movs	r2, #1
 800598a:	409a      	lsls	r2, r3
 800598c:	4b2b      	ldr	r3, [pc, #172]	; (8005a3c <xTaskResumeAll+0x120>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4313      	orrs	r3, r2
 8005992:	4a2a      	ldr	r2, [pc, #168]	; (8005a3c <xTaskResumeAll+0x120>)
 8005994:	6013      	str	r3, [r2, #0]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	4613      	mov	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	4a27      	ldr	r2, [pc, #156]	; (8005a40 <xTaskResumeAll+0x124>)
 80059a4:	441a      	add	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3304      	adds	r3, #4
 80059aa:	4619      	mov	r1, r3
 80059ac:	4610      	mov	r0, r2
 80059ae:	f7fe ff32 	bl	8004816 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	4b23      	ldr	r3, [pc, #140]	; (8005a44 <xTaskResumeAll+0x128>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059bc:	429a      	cmp	r2, r3
 80059be:	d302      	bcc.n	80059c6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80059c0:	4b21      	ldr	r3, [pc, #132]	; (8005a48 <xTaskResumeAll+0x12c>)
 80059c2:	2201      	movs	r2, #1
 80059c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80059c6:	4b1c      	ldr	r3, [pc, #112]	; (8005a38 <xTaskResumeAll+0x11c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1cc      	bne.n	8005968 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d001      	beq.n	80059d8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80059d4:	f000 fb12 	bl	8005ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80059d8:	4b1c      	ldr	r3, [pc, #112]	; (8005a4c <xTaskResumeAll+0x130>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d010      	beq.n	8005a06 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80059e4:	f000 f836 	bl	8005a54 <xTaskIncrementTick>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80059ee:	4b16      	ldr	r3, [pc, #88]	; (8005a48 <xTaskResumeAll+0x12c>)
 80059f0:	2201      	movs	r2, #1
 80059f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	3b01      	subs	r3, #1
 80059f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1f1      	bne.n	80059e4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8005a00:	4b12      	ldr	r3, [pc, #72]	; (8005a4c <xTaskResumeAll+0x130>)
 8005a02:	2200      	movs	r2, #0
 8005a04:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005a06:	4b10      	ldr	r3, [pc, #64]	; (8005a48 <xTaskResumeAll+0x12c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d009      	beq.n	8005a22 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <xTaskResumeAll+0x134>)
 8005a14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a18:	601a      	str	r2, [r3, #0]
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a22:	f000 fe87 	bl	8006734 <vPortExitCritical>

	return xAlreadyYielded;
 8005a26:	68bb      	ldr	r3, [r7, #8]
}
 8005a28:	4618      	mov	r0, r3
 8005a2a:	3710      	adds	r7, #16
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	2000095c 	.word	0x2000095c
 8005a34:	20000934 	.word	0x20000934
 8005a38:	200008f4 	.word	0x200008f4
 8005a3c:	2000093c 	.word	0x2000093c
 8005a40:	20000838 	.word	0x20000838
 8005a44:	20000834 	.word	0x20000834
 8005a48:	20000948 	.word	0x20000948
 8005a4c:	20000944 	.word	0x20000944
 8005a50:	e000ed04 	.word	0xe000ed04

08005a54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a5e:	4b4e      	ldr	r3, [pc, #312]	; (8005b98 <xTaskIncrementTick+0x144>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f040 808e 	bne.w	8005b84 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005a68:	4b4c      	ldr	r3, [pc, #304]	; (8005b9c <xTaskIncrementTick+0x148>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	3301      	adds	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005a70:	4a4a      	ldr	r2, [pc, #296]	; (8005b9c <xTaskIncrementTick+0x148>)
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d120      	bne.n	8005abe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005a7c:	4b48      	ldr	r3, [pc, #288]	; (8005ba0 <xTaskIncrementTick+0x14c>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00a      	beq.n	8005a9c <xTaskIncrementTick+0x48>
	__asm volatile
 8005a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8a:	f383 8811 	msr	BASEPRI, r3
 8005a8e:	f3bf 8f6f 	isb	sy
 8005a92:	f3bf 8f4f 	dsb	sy
 8005a96:	603b      	str	r3, [r7, #0]
}
 8005a98:	bf00      	nop
 8005a9a:	e7fe      	b.n	8005a9a <xTaskIncrementTick+0x46>
 8005a9c:	4b40      	ldr	r3, [pc, #256]	; (8005ba0 <xTaskIncrementTick+0x14c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	4b40      	ldr	r3, [pc, #256]	; (8005ba4 <xTaskIncrementTick+0x150>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3e      	ldr	r2, [pc, #248]	; (8005ba0 <xTaskIncrementTick+0x14c>)
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	4a3e      	ldr	r2, [pc, #248]	; (8005ba4 <xTaskIncrementTick+0x150>)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6013      	str	r3, [r2, #0]
 8005ab0:	4b3d      	ldr	r3, [pc, #244]	; (8005ba8 <xTaskIncrementTick+0x154>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3301      	adds	r3, #1
 8005ab6:	4a3c      	ldr	r2, [pc, #240]	; (8005ba8 <xTaskIncrementTick+0x154>)
 8005ab8:	6013      	str	r3, [r2, #0]
 8005aba:	f000 fa9f 	bl	8005ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005abe:	4b3b      	ldr	r3, [pc, #236]	; (8005bac <xTaskIncrementTick+0x158>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	693a      	ldr	r2, [r7, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d348      	bcc.n	8005b5a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac8:	4b35      	ldr	r3, [pc, #212]	; (8005ba0 <xTaskIncrementTick+0x14c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d104      	bne.n	8005adc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ad2:	4b36      	ldr	r3, [pc, #216]	; (8005bac <xTaskIncrementTick+0x158>)
 8005ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ad8:	601a      	str	r2, [r3, #0]
					break;
 8005ada:	e03e      	b.n	8005b5a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005adc:	4b30      	ldr	r3, [pc, #192]	; (8005ba0 <xTaskIncrementTick+0x14c>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d203      	bcs.n	8005afc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005af4:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <xTaskIncrementTick+0x158>)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005afa:	e02e      	b.n	8005b5a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe fee5 	bl	80048d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d004      	beq.n	8005b18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	3318      	adds	r3, #24
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7fe fedc 	bl	80048d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	4b23      	ldr	r3, [pc, #140]	; (8005bb0 <xTaskIncrementTick+0x15c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <xTaskIncrementTick+0x15c>)
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	4613      	mov	r3, r2
 8005b30:	009b      	lsls	r3, r3, #2
 8005b32:	4413      	add	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4a1f      	ldr	r2, [pc, #124]	; (8005bb4 <xTaskIncrementTick+0x160>)
 8005b38:	441a      	add	r2, r3
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	3304      	adds	r3, #4
 8005b3e:	4619      	mov	r1, r3
 8005b40:	4610      	mov	r0, r2
 8005b42:	f7fe fe68 	bl	8004816 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4a:	4b1b      	ldr	r3, [pc, #108]	; (8005bb8 <xTaskIncrementTick+0x164>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d3b9      	bcc.n	8005ac8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005b54:	2301      	movs	r3, #1
 8005b56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b58:	e7b6      	b.n	8005ac8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005b5a:	4b17      	ldr	r3, [pc, #92]	; (8005bb8 <xTaskIncrementTick+0x164>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b60:	4914      	ldr	r1, [pc, #80]	; (8005bb4 <xTaskIncrementTick+0x160>)
 8005b62:	4613      	mov	r3, r2
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	440b      	add	r3, r1
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d901      	bls.n	8005b76 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005b72:	2301      	movs	r3, #1
 8005b74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <xTaskIncrementTick+0x168>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d007      	beq.n	8005b8e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	617b      	str	r3, [r7, #20]
 8005b82:	e004      	b.n	8005b8e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005b84:	4b0e      	ldr	r3, [pc, #56]	; (8005bc0 <xTaskIncrementTick+0x16c>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	3301      	adds	r3, #1
 8005b8a:	4a0d      	ldr	r2, [pc, #52]	; (8005bc0 <xTaskIncrementTick+0x16c>)
 8005b8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005b8e:	697b      	ldr	r3, [r7, #20]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000095c 	.word	0x2000095c
 8005b9c:	20000938 	.word	0x20000938
 8005ba0:	200008ec 	.word	0x200008ec
 8005ba4:	200008f0 	.word	0x200008f0
 8005ba8:	2000094c 	.word	0x2000094c
 8005bac:	20000954 	.word	0x20000954
 8005bb0:	2000093c 	.word	0x2000093c
 8005bb4:	20000838 	.word	0x20000838
 8005bb8:	20000834 	.word	0x20000834
 8005bbc:	20000948 	.word	0x20000948
 8005bc0:	20000944 	.word	0x20000944

08005bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005bca:	4b27      	ldr	r3, [pc, #156]	; (8005c68 <vTaskSwitchContext+0xa4>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005bd2:	4b26      	ldr	r3, [pc, #152]	; (8005c6c <vTaskSwitchContext+0xa8>)
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005bd8:	e03f      	b.n	8005c5a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005bda:	4b24      	ldr	r3, [pc, #144]	; (8005c6c <vTaskSwitchContext+0xa8>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005be0:	4b23      	ldr	r3, [pc, #140]	; (8005c70 <vTaskSwitchContext+0xac>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	fab3 f383 	clz	r3, r3
 8005bec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005bee:	7afb      	ldrb	r3, [r7, #11]
 8005bf0:	f1c3 031f 	rsb	r3, r3, #31
 8005bf4:	617b      	str	r3, [r7, #20]
 8005bf6:	491f      	ldr	r1, [pc, #124]	; (8005c74 <vTaskSwitchContext+0xb0>)
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <vTaskSwitchContext+0x5c>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	607b      	str	r3, [r7, #4]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <vTaskSwitchContext+0x5a>
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4613      	mov	r3, r2
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	4413      	add	r3, r2
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	4a12      	ldr	r2, [pc, #72]	; (8005c74 <vTaskSwitchContext+0xb0>)
 8005c2c:	4413      	add	r3, r2
 8005c2e:	613b      	str	r3, [r7, #16]
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	605a      	str	r2, [r3, #4]
 8005c3a:	693b      	ldr	r3, [r7, #16]
 8005c3c:	685a      	ldr	r2, [r3, #4]
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	3308      	adds	r3, #8
 8005c42:	429a      	cmp	r2, r3
 8005c44:	d104      	bne.n	8005c50 <vTaskSwitchContext+0x8c>
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	605a      	str	r2, [r3, #4]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	4a08      	ldr	r2, [pc, #32]	; (8005c78 <vTaskSwitchContext+0xb4>)
 8005c58:	6013      	str	r3, [r2, #0]
}
 8005c5a:	bf00      	nop
 8005c5c:	371c      	adds	r7, #28
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c64:	4770      	bx	lr
 8005c66:	bf00      	nop
 8005c68:	2000095c 	.word	0x2000095c
 8005c6c:	20000948 	.word	0x20000948
 8005c70:	2000093c 	.word	0x2000093c
 8005c74:	20000838 	.word	0x20000838
 8005c78:	20000834 	.word	0x20000834

08005c7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
 8005c84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d10a      	bne.n	8005ca2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c90:	f383 8811 	msr	BASEPRI, r3
 8005c94:	f3bf 8f6f 	isb	sy
 8005c98:	f3bf 8f4f 	dsb	sy
 8005c9c:	60fb      	str	r3, [r7, #12]
}
 8005c9e:	bf00      	nop
 8005ca0:	e7fe      	b.n	8005ca0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ca2:	4b07      	ldr	r3, [pc, #28]	; (8005cc0 <vTaskPlaceOnEventList+0x44>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f7fe fdd7 	bl	800485e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	6838      	ldr	r0, [r7, #0]
 8005cb4:	f000 fb7e 	bl	80063b4 <prvAddCurrentTaskToDelayedList>
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	20000834 	.word	0x20000834

08005cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b086      	sub	sp, #24
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cde:	f383 8811 	msr	BASEPRI, r3
 8005ce2:	f3bf 8f6f 	isb	sy
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	60fb      	str	r3, [r7, #12]
}
 8005cec:	bf00      	nop
 8005cee:	e7fe      	b.n	8005cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	3318      	adds	r3, #24
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fe fdeb 	bl	80048d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cfa:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <xTaskRemoveFromEventList+0xac>)
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d11c      	bne.n	8005d3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	3304      	adds	r3, #4
 8005d06:	4618      	mov	r0, r3
 8005d08:	f7fe fde2 	bl	80048d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d10:	2201      	movs	r2, #1
 8005d12:	409a      	lsls	r2, r3
 8005d14:	4b17      	ldr	r3, [pc, #92]	; (8005d74 <xTaskRemoveFromEventList+0xb0>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	4a16      	ldr	r2, [pc, #88]	; (8005d74 <xTaskRemoveFromEventList+0xb0>)
 8005d1c:	6013      	str	r3, [r2, #0]
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d22:	4613      	mov	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4a13      	ldr	r2, [pc, #76]	; (8005d78 <xTaskRemoveFromEventList+0xb4>)
 8005d2c:	441a      	add	r2, r3
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f7fe fd6e 	bl	8004816 <vListInsertEnd>
 8005d3a:	e005      	b.n	8005d48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	3318      	adds	r3, #24
 8005d40:	4619      	mov	r1, r3
 8005d42:	480e      	ldr	r0, [pc, #56]	; (8005d7c <xTaskRemoveFromEventList+0xb8>)
 8005d44:	f7fe fd67 	bl	8004816 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4c:	4b0c      	ldr	r3, [pc, #48]	; (8005d80 <xTaskRemoveFromEventList+0xbc>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d905      	bls.n	8005d62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d56:	2301      	movs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d5a:	4b0a      	ldr	r3, [pc, #40]	; (8005d84 <xTaskRemoveFromEventList+0xc0>)
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	601a      	str	r2, [r3, #0]
 8005d60:	e001      	b.n	8005d66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005d66:	697b      	ldr	r3, [r7, #20]
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3718      	adds	r7, #24
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}
 8005d70:	2000095c 	.word	0x2000095c
 8005d74:	2000093c 	.word	0x2000093c
 8005d78:	20000838 	.word	0x20000838
 8005d7c:	200008f4 	.word	0x200008f4
 8005d80:	20000834 	.word	0x20000834
 8005d84:	20000948 	.word	0x20000948

08005d88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d90:	4b06      	ldr	r3, [pc, #24]	; (8005dac <vTaskInternalSetTimeOutState+0x24>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <vTaskInternalSetTimeOutState+0x28>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	605a      	str	r2, [r3, #4]
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr
 8005dac:	2000094c 	.word	0x2000094c
 8005db0:	20000938 	.word	0x20000938

08005db4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d10a      	bne.n	8005dda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc8:	f383 8811 	msr	BASEPRI, r3
 8005dcc:	f3bf 8f6f 	isb	sy
 8005dd0:	f3bf 8f4f 	dsb	sy
 8005dd4:	613b      	str	r3, [r7, #16]
}
 8005dd6:	bf00      	nop
 8005dd8:	e7fe      	b.n	8005dd8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d10a      	bne.n	8005df6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	e7fe      	b.n	8005df4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005df6:	f000 fc6d 	bl	80066d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dfa:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <xTaskCheckForTimeOut+0xbc>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	69ba      	ldr	r2, [r7, #24]
 8005e06:	1ad3      	subs	r3, r2, r3
 8005e08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d102      	bne.n	8005e1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	e023      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b15      	ldr	r3, [pc, #84]	; (8005e74 <xTaskCheckForTimeOut+0xc0>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d007      	beq.n	8005e36 <xTaskCheckForTimeOut+0x82>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	69ba      	ldr	r2, [r7, #24]
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d302      	bcc.n	8005e36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e30:	2301      	movs	r3, #1
 8005e32:	61fb      	str	r3, [r7, #28]
 8005e34:	e015      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d20b      	bcs.n	8005e58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff9b 	bl	8005d88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e004      	b.n	8005e62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e62:	f000 fc67 	bl	8006734 <vPortExitCritical>

	return xReturn;
 8005e66:	69fb      	ldr	r3, [r7, #28]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	20000938 	.word	0x20000938
 8005e74:	2000094c 	.word	0x2000094c

08005e78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e7c:	4b03      	ldr	r3, [pc, #12]	; (8005e8c <vTaskMissedYield+0x14>)
 8005e7e:	2201      	movs	r2, #1
 8005e80:	601a      	str	r2, [r3, #0]
}
 8005e82:	bf00      	nop
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000948 	.word	0x20000948

08005e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e98:	f000 f852 	bl	8005f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e9c:	4b06      	ldr	r3, [pc, #24]	; (8005eb8 <prvIdleTask+0x28>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d9f9      	bls.n	8005e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ea4:	4b05      	ldr	r3, [pc, #20]	; (8005ebc <prvIdleTask+0x2c>)
 8005ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eaa:	601a      	str	r2, [r3, #0]
 8005eac:	f3bf 8f4f 	dsb	sy
 8005eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005eb4:	e7f0      	b.n	8005e98 <prvIdleTask+0x8>
 8005eb6:	bf00      	nop
 8005eb8:	20000838 	.word	0x20000838
 8005ebc:	e000ed04 	.word	0xe000ed04

08005ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	607b      	str	r3, [r7, #4]
 8005eca:	e00c      	b.n	8005ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	4613      	mov	r3, r2
 8005ed0:	009b      	lsls	r3, r3, #2
 8005ed2:	4413      	add	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4a12      	ldr	r2, [pc, #72]	; (8005f20 <prvInitialiseTaskLists+0x60>)
 8005ed8:	4413      	add	r3, r2
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe fc6e 	bl	80047bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	607b      	str	r3, [r7, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2b06      	cmp	r3, #6
 8005eea:	d9ef      	bls.n	8005ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005eec:	480d      	ldr	r0, [pc, #52]	; (8005f24 <prvInitialiseTaskLists+0x64>)
 8005eee:	f7fe fc65 	bl	80047bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ef2:	480d      	ldr	r0, [pc, #52]	; (8005f28 <prvInitialiseTaskLists+0x68>)
 8005ef4:	f7fe fc62 	bl	80047bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ef8:	480c      	ldr	r0, [pc, #48]	; (8005f2c <prvInitialiseTaskLists+0x6c>)
 8005efa:	f7fe fc5f 	bl	80047bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005efe:	480c      	ldr	r0, [pc, #48]	; (8005f30 <prvInitialiseTaskLists+0x70>)
 8005f00:	f7fe fc5c 	bl	80047bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005f04:	480b      	ldr	r0, [pc, #44]	; (8005f34 <prvInitialiseTaskLists+0x74>)
 8005f06:	f7fe fc59 	bl	80047bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005f0a:	4b0b      	ldr	r3, [pc, #44]	; (8005f38 <prvInitialiseTaskLists+0x78>)
 8005f0c:	4a05      	ldr	r2, [pc, #20]	; (8005f24 <prvInitialiseTaskLists+0x64>)
 8005f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <prvInitialiseTaskLists+0x7c>)
 8005f12:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <prvInitialiseTaskLists+0x68>)
 8005f14:	601a      	str	r2, [r3, #0]
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000838 	.word	0x20000838
 8005f24:	200008c4 	.word	0x200008c4
 8005f28:	200008d8 	.word	0x200008d8
 8005f2c:	200008f4 	.word	0x200008f4
 8005f30:	20000908 	.word	0x20000908
 8005f34:	20000920 	.word	0x20000920
 8005f38:	200008ec 	.word	0x200008ec
 8005f3c:	200008f0 	.word	0x200008f0

08005f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b082      	sub	sp, #8
 8005f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f46:	e019      	b.n	8005f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f48:	f000 fbc4 	bl	80066d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f4c:	4b10      	ldr	r3, [pc, #64]	; (8005f90 <prvCheckTasksWaitingTermination+0x50>)
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	3304      	adds	r3, #4
 8005f58:	4618      	mov	r0, r3
 8005f5a:	f7fe fcb9 	bl	80048d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	; (8005f94 <prvCheckTasksWaitingTermination+0x54>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	4a0b      	ldr	r2, [pc, #44]	; (8005f94 <prvCheckTasksWaitingTermination+0x54>)
 8005f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f68:	4b0b      	ldr	r3, [pc, #44]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	4a0a      	ldr	r2, [pc, #40]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f72:	f000 fbdf 	bl	8006734 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f810 	bl	8005f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f7c:	4b06      	ldr	r3, [pc, #24]	; (8005f98 <prvCheckTasksWaitingTermination+0x58>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d1e1      	bne.n	8005f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f84:	bf00      	nop
 8005f86:	bf00      	nop
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000908 	.word	0x20000908
 8005f94:	20000934 	.word	0x20000934
 8005f98:	2000091c 	.word	0x2000091c

08005f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d108      	bne.n	8005fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f000 fd7c 	bl	8006ab0 <vPortFree>
				vPortFree( pxTCB );
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 fd79 	bl	8006ab0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fbe:	e018      	b.n	8005ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d103      	bne.n	8005fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fd70 	bl	8006ab0 <vPortFree>
	}
 8005fd0:	e00f      	b.n	8005ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d00a      	beq.n	8005ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8005fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fe0:	f383 8811 	msr	BASEPRI, r3
 8005fe4:	f3bf 8f6f 	isb	sy
 8005fe8:	f3bf 8f4f 	dsb	sy
 8005fec:	60fb      	str	r3, [r7, #12]
}
 8005fee:	bf00      	nop
 8005ff0:	e7fe      	b.n	8005ff0 <prvDeleteTCB+0x54>
	}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <prvResetNextTaskUnblockTime+0x38>)
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d104      	bne.n	8006016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800600c:	4b0a      	ldr	r3, [pc, #40]	; (8006038 <prvResetNextTaskUnblockTime+0x3c>)
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006014:	e008      	b.n	8006028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006016:	4b07      	ldr	r3, [pc, #28]	; (8006034 <prvResetNextTaskUnblockTime+0x38>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	685b      	ldr	r3, [r3, #4]
 8006024:	4a04      	ldr	r2, [pc, #16]	; (8006038 <prvResetNextTaskUnblockTime+0x3c>)
 8006026:	6013      	str	r3, [r2, #0]
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	200008ec 	.word	0x200008ec
 8006038:	20000954 	.word	0x20000954

0800603c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800603c:	b480      	push	{r7}
 800603e:	b083      	sub	sp, #12
 8006040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006042:	4b0b      	ldr	r3, [pc, #44]	; (8006070 <xTaskGetSchedulerState+0x34>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800604a:	2301      	movs	r3, #1
 800604c:	607b      	str	r3, [r7, #4]
 800604e:	e008      	b.n	8006062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006050:	4b08      	ldr	r3, [pc, #32]	; (8006074 <xTaskGetSchedulerState+0x38>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d102      	bne.n	800605e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006058:	2302      	movs	r3, #2
 800605a:	607b      	str	r3, [r7, #4]
 800605c:	e001      	b.n	8006062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800605e:	2300      	movs	r3, #0
 8006060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006062:	687b      	ldr	r3, [r7, #4]
	}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	20000940 	.word	0x20000940
 8006074:	2000095c 	.word	0x2000095c

08006078 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006084:	2300      	movs	r3, #0
 8006086:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d05e      	beq.n	800614c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006092:	4b31      	ldr	r3, [pc, #196]	; (8006158 <xTaskPriorityInherit+0xe0>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d24e      	bcs.n	800613a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	699b      	ldr	r3, [r3, #24]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	db06      	blt.n	80060b2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060a4:	4b2c      	ldr	r3, [pc, #176]	; (8006158 <xTaskPriorityInherit+0xe0>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060aa:	f1c3 0207 	rsb	r2, r3, #7
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	6959      	ldr	r1, [r3, #20]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	4a26      	ldr	r2, [pc, #152]	; (800615c <xTaskPriorityInherit+0xe4>)
 80060c4:	4413      	add	r3, r2
 80060c6:	4299      	cmp	r1, r3
 80060c8:	d12f      	bne.n	800612a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fbfe 	bl	80048d0 <uxListRemove>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060de:	2201      	movs	r2, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	43da      	mvns	r2, r3
 80060e6:	4b1e      	ldr	r3, [pc, #120]	; (8006160 <xTaskPriorityInherit+0xe8>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4013      	ands	r3, r2
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <xTaskPriorityInherit+0xe8>)
 80060ee:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <xTaskPriorityInherit+0xe0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060fe:	2201      	movs	r2, #1
 8006100:	409a      	lsls	r2, r3
 8006102:	4b17      	ldr	r3, [pc, #92]	; (8006160 <xTaskPriorityInherit+0xe8>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4313      	orrs	r3, r2
 8006108:	4a15      	ldr	r2, [pc, #84]	; (8006160 <xTaskPriorityInherit+0xe8>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a10      	ldr	r2, [pc, #64]	; (800615c <xTaskPriorityInherit+0xe4>)
 800611a:	441a      	add	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fe fb77 	bl	8004816 <vListInsertEnd>
 8006128:	e004      	b.n	8006134 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <xTaskPriorityInherit+0xe0>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006134:	2301      	movs	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	e008      	b.n	800614c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613e:	4b06      	ldr	r3, [pc, #24]	; (8006158 <xTaskPriorityInherit+0xe0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	429a      	cmp	r2, r3
 8006146:	d201      	bcs.n	800614c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006148:	2301      	movs	r3, #1
 800614a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800614c:	68fb      	ldr	r3, [r7, #12]
	}
 800614e:	4618      	mov	r0, r3
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20000834 	.word	0x20000834
 800615c:	20000838 	.word	0x20000838
 8006160:	2000093c 	.word	0x2000093c

08006164 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d06e      	beq.n	8006258 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800617a:	4b3a      	ldr	r3, [pc, #232]	; (8006264 <xTaskPriorityDisinherit+0x100>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	429a      	cmp	r2, r3
 8006182:	d00a      	beq.n	800619a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006188:	f383 8811 	msr	BASEPRI, r3
 800618c:	f3bf 8f6f 	isb	sy
 8006190:	f3bf 8f4f 	dsb	sy
 8006194:	60fb      	str	r3, [r7, #12]
}
 8006196:	bf00      	nop
 8006198:	e7fe      	b.n	8006198 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10a      	bne.n	80061b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80061a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061a6:	f383 8811 	msr	BASEPRI, r3
 80061aa:	f3bf 8f6f 	isb	sy
 80061ae:	f3bf 8f4f 	dsb	sy
 80061b2:	60bb      	str	r3, [r7, #8]
}
 80061b4:	bf00      	nop
 80061b6:	e7fe      	b.n	80061b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061bc:	1e5a      	subs	r2, r3, #1
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d044      	beq.n	8006258 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d140      	bne.n	8006258 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	3304      	adds	r3, #4
 80061da:	4618      	mov	r0, r3
 80061dc:	f7fe fb78 	bl	80048d0 <uxListRemove>
 80061e0:	4603      	mov	r3, r0
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d115      	bne.n	8006212 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	491f      	ldr	r1, [pc, #124]	; (8006268 <xTaskPriorityDisinherit+0x104>)
 80061ec:	4613      	mov	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	4413      	add	r3, r2
 80061f2:	009b      	lsls	r3, r3, #2
 80061f4:	440b      	add	r3, r1
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xTaskPriorityDisinherit+0xae>
 80061fc:	693b      	ldr	r3, [r7, #16]
 80061fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006200:	2201      	movs	r2, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	43da      	mvns	r2, r3
 8006208:	4b18      	ldr	r3, [pc, #96]	; (800626c <xTaskPriorityDisinherit+0x108>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4013      	ands	r3, r2
 800620e:	4a17      	ldr	r2, [pc, #92]	; (800626c <xTaskPriorityDisinherit+0x108>)
 8006210:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	693b      	ldr	r3, [r7, #16]
 8006218:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621e:	f1c3 0207 	rsb	r2, r3, #7
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622a:	2201      	movs	r2, #1
 800622c:	409a      	lsls	r2, r3
 800622e:	4b0f      	ldr	r3, [pc, #60]	; (800626c <xTaskPriorityDisinherit+0x108>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4313      	orrs	r3, r2
 8006234:	4a0d      	ldr	r2, [pc, #52]	; (800626c <xTaskPriorityDisinherit+0x108>)
 8006236:	6013      	str	r3, [r2, #0]
 8006238:	693b      	ldr	r3, [r7, #16]
 800623a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800623c:	4613      	mov	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4a08      	ldr	r2, [pc, #32]	; (8006268 <xTaskPriorityDisinherit+0x104>)
 8006246:	441a      	add	r2, r3
 8006248:	693b      	ldr	r3, [r7, #16]
 800624a:	3304      	adds	r3, #4
 800624c:	4619      	mov	r1, r3
 800624e:	4610      	mov	r0, r2
 8006250:	f7fe fae1 	bl	8004816 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006254:	2301      	movs	r3, #1
 8006256:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006258:	697b      	ldr	r3, [r7, #20]
	}
 800625a:	4618      	mov	r0, r3
 800625c:	3718      	adds	r7, #24
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000834 	.word	0x20000834
 8006268:	20000838 	.word	0x20000838
 800626c:	2000093c 	.word	0x2000093c

08006270 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b088      	sub	sp, #32
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800627e:	2301      	movs	r3, #1
 8006280:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d077      	beq.n	8006378 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	60fb      	str	r3, [r7, #12]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80062a6:	69bb      	ldr	r3, [r7, #24]
 80062a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062aa:	683a      	ldr	r2, [r7, #0]
 80062ac:	429a      	cmp	r2, r3
 80062ae:	d902      	bls.n	80062b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	e002      	b.n	80062bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d058      	beq.n	8006378 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062ca:	697a      	ldr	r2, [r7, #20]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d153      	bne.n	8006378 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80062d0:	4b2b      	ldr	r3, [pc, #172]	; (8006380 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d10a      	bne.n	80062f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	60bb      	str	r3, [r7, #8]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80062f6:	69bb      	ldr	r3, [r7, #24]
 80062f8:	69fa      	ldr	r2, [r7, #28]
 80062fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	699b      	ldr	r3, [r3, #24]
 8006300:	2b00      	cmp	r3, #0
 8006302:	db04      	blt.n	800630e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f1c3 0207 	rsb	r2, r3, #7
 800630a:	69bb      	ldr	r3, [r7, #24]
 800630c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	6959      	ldr	r1, [r3, #20]
 8006312:	693a      	ldr	r2, [r7, #16]
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4a19      	ldr	r2, [pc, #100]	; (8006384 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800631e:	4413      	add	r3, r2
 8006320:	4299      	cmp	r1, r3
 8006322:	d129      	bne.n	8006378 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	3304      	adds	r3, #4
 8006328:	4618      	mov	r0, r3
 800632a:	f7fe fad1 	bl	80048d0 <uxListRemove>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d10a      	bne.n	800634a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006338:	2201      	movs	r2, #1
 800633a:	fa02 f303 	lsl.w	r3, r2, r3
 800633e:	43da      	mvns	r2, r3
 8006340:	4b11      	ldr	r3, [pc, #68]	; (8006388 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4013      	ands	r3, r2
 8006346:	4a10      	ldr	r2, [pc, #64]	; (8006388 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006348:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634e:	2201      	movs	r2, #1
 8006350:	409a      	lsls	r2, r3
 8006352:	4b0d      	ldr	r3, [pc, #52]	; (8006388 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4313      	orrs	r3, r2
 8006358:	4a0b      	ldr	r2, [pc, #44]	; (8006388 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800635a:	6013      	str	r3, [r2, #0]
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006360:	4613      	mov	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	4413      	add	r3, r2
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	4a06      	ldr	r2, [pc, #24]	; (8006384 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800636a:	441a      	add	r2, r3
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f7fe fa4f 	bl	8004816 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006378:	bf00      	nop
 800637a:	3720      	adds	r7, #32
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	20000834 	.word	0x20000834
 8006384:	20000838 	.word	0x20000838
 8006388:	2000093c 	.word	0x2000093c

0800638c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800638c:	b480      	push	{r7}
 800638e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006390:	4b07      	ldr	r3, [pc, #28]	; (80063b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006398:	4b05      	ldr	r3, [pc, #20]	; (80063b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639e:	3201      	adds	r2, #1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80063a2:	4b03      	ldr	r3, [pc, #12]	; (80063b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80063a4:	681b      	ldr	r3, [r3, #0]
	}
 80063a6:	4618      	mov	r0, r3
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr
 80063b0:	20000834 	.word	0x20000834

080063b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80063be:	4b29      	ldr	r3, [pc, #164]	; (8006464 <prvAddCurrentTaskToDelayedList+0xb0>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80063c4:	4b28      	ldr	r3, [pc, #160]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	3304      	adds	r3, #4
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7fe fa80 	bl	80048d0 <uxListRemove>
 80063d0:	4603      	mov	r3, r0
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10b      	bne.n	80063ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80063d6:	4b24      	ldr	r3, [pc, #144]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	2201      	movs	r2, #1
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43da      	mvns	r2, r3
 80063e4:	4b21      	ldr	r3, [pc, #132]	; (800646c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4013      	ands	r3, r2
 80063ea:	4a20      	ldr	r2, [pc, #128]	; (800646c <prvAddCurrentTaskToDelayedList+0xb8>)
 80063ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063f4:	d10a      	bne.n	800640c <prvAddCurrentTaskToDelayedList+0x58>
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d007      	beq.n	800640c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80063fc:	4b1a      	ldr	r3, [pc, #104]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	481a      	ldr	r0, [pc, #104]	; (8006470 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006406:	f7fe fa06 	bl	8004816 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800640a:	e026      	b.n	800645a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4413      	add	r3, r2
 8006412:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006414:	4b14      	ldr	r3, [pc, #80]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68ba      	ldr	r2, [r7, #8]
 800641a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800641c:	68ba      	ldr	r2, [r7, #8]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	429a      	cmp	r2, r3
 8006422:	d209      	bcs.n	8006438 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006424:	4b13      	ldr	r3, [pc, #76]	; (8006474 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	4b0f      	ldr	r3, [pc, #60]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	3304      	adds	r3, #4
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f7fe fa14 	bl	800485e <vListInsert>
}
 8006436:	e010      	b.n	800645a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006438:	4b0f      	ldr	r3, [pc, #60]	; (8006478 <prvAddCurrentTaskToDelayedList+0xc4>)
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <prvAddCurrentTaskToDelayedList+0xb4>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe fa0a 	bl	800485e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800644a:	4b0c      	ldr	r3, [pc, #48]	; (800647c <prvAddCurrentTaskToDelayedList+0xc8>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	429a      	cmp	r2, r3
 8006452:	d202      	bcs.n	800645a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006454:	4a09      	ldr	r2, [pc, #36]	; (800647c <prvAddCurrentTaskToDelayedList+0xc8>)
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	6013      	str	r3, [r2, #0]
}
 800645a:	bf00      	nop
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000938 	.word	0x20000938
 8006468:	20000834 	.word	0x20000834
 800646c:	2000093c 	.word	0x2000093c
 8006470:	20000920 	.word	0x20000920
 8006474:	200008f0 	.word	0x200008f0
 8006478:	200008ec 	.word	0x200008ec
 800647c:	20000954 	.word	0x20000954

08006480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	60f8      	str	r0, [r7, #12]
 8006488:	60b9      	str	r1, [r7, #8]
 800648a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3b04      	subs	r3, #4
 8006490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	3b04      	subs	r3, #4
 800649e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f023 0201 	bic.w	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	3b04      	subs	r3, #4
 80064ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80064b0:	4a0c      	ldr	r2, [pc, #48]	; (80064e4 <pxPortInitialiseStack+0x64>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	3b14      	subs	r3, #20
 80064ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80064bc:	687a      	ldr	r2, [r7, #4]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	3b04      	subs	r3, #4
 80064c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f06f 0202 	mvn.w	r2, #2
 80064ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3b20      	subs	r3, #32
 80064d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80064d6:	68fb      	ldr	r3, [r7, #12]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3714      	adds	r7, #20
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	080064e9 	.word	0x080064e9

080064e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80064ee:	2300      	movs	r3, #0
 80064f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80064f2:	4b12      	ldr	r3, [pc, #72]	; (800653c <prvTaskExitError+0x54>)
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fa:	d00a      	beq.n	8006512 <prvTaskExitError+0x2a>
	__asm volatile
 80064fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006500:	f383 8811 	msr	BASEPRI, r3
 8006504:	f3bf 8f6f 	isb	sy
 8006508:	f3bf 8f4f 	dsb	sy
 800650c:	60fb      	str	r3, [r7, #12]
}
 800650e:	bf00      	nop
 8006510:	e7fe      	b.n	8006510 <prvTaskExitError+0x28>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006526:	bf00      	nop
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0fc      	beq.n	8006528 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800652e:	bf00      	nop
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	20000020 	.word	0x20000020

08006540 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006540:	4b07      	ldr	r3, [pc, #28]	; (8006560 <pxCurrentTCBConst2>)
 8006542:	6819      	ldr	r1, [r3, #0]
 8006544:	6808      	ldr	r0, [r1, #0]
 8006546:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654a:	f380 8809 	msr	PSP, r0
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f04f 0000 	mov.w	r0, #0
 8006556:	f380 8811 	msr	BASEPRI, r0
 800655a:	4770      	bx	lr
 800655c:	f3af 8000 	nop.w

08006560 <pxCurrentTCBConst2>:
 8006560:	20000834 	.word	0x20000834
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006564:	bf00      	nop
 8006566:	bf00      	nop

08006568 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006568:	4808      	ldr	r0, [pc, #32]	; (800658c <prvPortStartFirstTask+0x24>)
 800656a:	6800      	ldr	r0, [r0, #0]
 800656c:	6800      	ldr	r0, [r0, #0]
 800656e:	f380 8808 	msr	MSP, r0
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f380 8814 	msr	CONTROL, r0
 800657a:	b662      	cpsie	i
 800657c:	b661      	cpsie	f
 800657e:	f3bf 8f4f 	dsb	sy
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	df00      	svc	0
 8006588:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800658a:	bf00      	nop
 800658c:	e000ed08 	.word	0xe000ed08

08006590 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b086      	sub	sp, #24
 8006594:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006596:	4b46      	ldr	r3, [pc, #280]	; (80066b0 <xPortStartScheduler+0x120>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a46      	ldr	r2, [pc, #280]	; (80066b4 <xPortStartScheduler+0x124>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d10a      	bne.n	80065b6 <xPortStartScheduler+0x26>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	613b      	str	r3, [r7, #16]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80065b6:	4b3e      	ldr	r3, [pc, #248]	; (80066b0 <xPortStartScheduler+0x120>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a3f      	ldr	r2, [pc, #252]	; (80066b8 <xPortStartScheduler+0x128>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d10a      	bne.n	80065d6 <xPortStartScheduler+0x46>
	__asm volatile
 80065c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c4:	f383 8811 	msr	BASEPRI, r3
 80065c8:	f3bf 8f6f 	isb	sy
 80065cc:	f3bf 8f4f 	dsb	sy
 80065d0:	60fb      	str	r3, [r7, #12]
}
 80065d2:	bf00      	nop
 80065d4:	e7fe      	b.n	80065d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80065d6:	4b39      	ldr	r3, [pc, #228]	; (80066bc <xPortStartScheduler+0x12c>)
 80065d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	b2db      	uxtb	r3, r3
 80065e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	22ff      	movs	r2, #255	; 0xff
 80065e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	b2db      	uxtb	r3, r3
 80065ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80065f0:	78fb      	ldrb	r3, [r7, #3]
 80065f2:	b2db      	uxtb	r3, r3
 80065f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80065f8:	b2da      	uxtb	r2, r3
 80065fa:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <xPortStartScheduler+0x130>)
 80065fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80065fe:	4b31      	ldr	r3, [pc, #196]	; (80066c4 <xPortStartScheduler+0x134>)
 8006600:	2207      	movs	r2, #7
 8006602:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006604:	e009      	b.n	800661a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006606:	4b2f      	ldr	r3, [pc, #188]	; (80066c4 <xPortStartScheduler+0x134>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3b01      	subs	r3, #1
 800660c:	4a2d      	ldr	r2, [pc, #180]	; (80066c4 <xPortStartScheduler+0x134>)
 800660e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	b2db      	uxtb	r3, r3
 8006614:	005b      	lsls	r3, r3, #1
 8006616:	b2db      	uxtb	r3, r3
 8006618:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	b2db      	uxtb	r3, r3
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b80      	cmp	r3, #128	; 0x80
 8006624:	d0ef      	beq.n	8006606 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006626:	4b27      	ldr	r3, [pc, #156]	; (80066c4 <xPortStartScheduler+0x134>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1c3 0307 	rsb	r3, r3, #7
 800662e:	2b04      	cmp	r3, #4
 8006630:	d00a      	beq.n	8006648 <xPortStartScheduler+0xb8>
	__asm volatile
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	60bb      	str	r3, [r7, #8]
}
 8006644:	bf00      	nop
 8006646:	e7fe      	b.n	8006646 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006648:	4b1e      	ldr	r3, [pc, #120]	; (80066c4 <xPortStartScheduler+0x134>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	021b      	lsls	r3, r3, #8
 800664e:	4a1d      	ldr	r2, [pc, #116]	; (80066c4 <xPortStartScheduler+0x134>)
 8006650:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006652:	4b1c      	ldr	r3, [pc, #112]	; (80066c4 <xPortStartScheduler+0x134>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800665a:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <xPortStartScheduler+0x134>)
 800665c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	b2da      	uxtb	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006666:	4b18      	ldr	r3, [pc, #96]	; (80066c8 <xPortStartScheduler+0x138>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a17      	ldr	r2, [pc, #92]	; (80066c8 <xPortStartScheduler+0x138>)
 800666c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006670:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <xPortStartScheduler+0x138>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <xPortStartScheduler+0x138>)
 8006678:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800667c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800667e:	f000 f8dd 	bl	800683c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006682:	4b12      	ldr	r3, [pc, #72]	; (80066cc <xPortStartScheduler+0x13c>)
 8006684:	2200      	movs	r2, #0
 8006686:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006688:	f000 f8fc 	bl	8006884 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800668c:	4b10      	ldr	r3, [pc, #64]	; (80066d0 <xPortStartScheduler+0x140>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a0f      	ldr	r2, [pc, #60]	; (80066d0 <xPortStartScheduler+0x140>)
 8006692:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006696:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006698:	f7ff ff66 	bl	8006568 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800669c:	f7ff fa92 	bl	8005bc4 <vTaskSwitchContext>
	prvTaskExitError();
 80066a0:	f7ff ff22 	bl	80064e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	e000ed00 	.word	0xe000ed00
 80066b4:	410fc271 	.word	0x410fc271
 80066b8:	410fc270 	.word	0x410fc270
 80066bc:	e000e400 	.word	0xe000e400
 80066c0:	20000960 	.word	0x20000960
 80066c4:	20000964 	.word	0x20000964
 80066c8:	e000ed20 	.word	0xe000ed20
 80066cc:	20000020 	.word	0x20000020
 80066d0:	e000ef34 	.word	0xe000ef34

080066d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	607b      	str	r3, [r7, #4]
}
 80066ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80066ee:	4b0f      	ldr	r3, [pc, #60]	; (800672c <vPortEnterCritical+0x58>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3301      	adds	r3, #1
 80066f4:	4a0d      	ldr	r2, [pc, #52]	; (800672c <vPortEnterCritical+0x58>)
 80066f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <vPortEnterCritical+0x58>)
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d10f      	bne.n	8006720 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006700:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <vPortEnterCritical+0x5c>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00a      	beq.n	8006720 <vPortEnterCritical+0x4c>
	__asm volatile
 800670a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	603b      	str	r3, [r7, #0]
}
 800671c:	bf00      	nop
 800671e:	e7fe      	b.n	800671e <vPortEnterCritical+0x4a>
	}
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr
 800672c:	20000020 	.word	0x20000020
 8006730:	e000ed04 	.word	0xe000ed04

08006734 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800673a:	4b12      	ldr	r3, [pc, #72]	; (8006784 <vPortExitCritical+0x50>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10a      	bne.n	8006758 <vPortExitCritical+0x24>
	__asm volatile
 8006742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006746:	f383 8811 	msr	BASEPRI, r3
 800674a:	f3bf 8f6f 	isb	sy
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	607b      	str	r3, [r7, #4]
}
 8006754:	bf00      	nop
 8006756:	e7fe      	b.n	8006756 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006758:	4b0a      	ldr	r3, [pc, #40]	; (8006784 <vPortExitCritical+0x50>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	3b01      	subs	r3, #1
 800675e:	4a09      	ldr	r2, [pc, #36]	; (8006784 <vPortExitCritical+0x50>)
 8006760:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006762:	4b08      	ldr	r3, [pc, #32]	; (8006784 <vPortExitCritical+0x50>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d105      	bne.n	8006776 <vPortExitCritical+0x42>
 800676a:	2300      	movs	r3, #0
 800676c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	f383 8811 	msr	BASEPRI, r3
}
 8006774:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	20000020 	.word	0x20000020
	...

08006790 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006790:	f3ef 8009 	mrs	r0, PSP
 8006794:	f3bf 8f6f 	isb	sy
 8006798:	4b15      	ldr	r3, [pc, #84]	; (80067f0 <pxCurrentTCBConst>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	f01e 0f10 	tst.w	lr, #16
 80067a0:	bf08      	it	eq
 80067a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80067a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067aa:	6010      	str	r0, [r2, #0]
 80067ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80067b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80067b4:	f380 8811 	msr	BASEPRI, r0
 80067b8:	f3bf 8f4f 	dsb	sy
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f7ff fa00 	bl	8005bc4 <vTaskSwitchContext>
 80067c4:	f04f 0000 	mov.w	r0, #0
 80067c8:	f380 8811 	msr	BASEPRI, r0
 80067cc:	bc09      	pop	{r0, r3}
 80067ce:	6819      	ldr	r1, [r3, #0]
 80067d0:	6808      	ldr	r0, [r1, #0]
 80067d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d6:	f01e 0f10 	tst.w	lr, #16
 80067da:	bf08      	it	eq
 80067dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80067e0:	f380 8809 	msr	PSP, r0
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst>:
 80067f0:	20000834 	.word	0x20000834
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	607b      	str	r3, [r7, #4]
}
 8006810:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006812:	f7ff f91f 	bl	8005a54 <xTaskIncrementTick>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800681c:	4b06      	ldr	r3, [pc, #24]	; (8006838 <SysTick_Handler+0x40>)
 800681e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006822:	601a      	str	r2, [r3, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	f383 8811 	msr	BASEPRI, r3
}
 800682e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	e000ed04 	.word	0xe000ed04

0800683c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800683c:	b480      	push	{r7}
 800683e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <vPortSetupTimerInterrupt+0x34>)
 8006842:	2200      	movs	r2, #0
 8006844:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006846:	4b0b      	ldr	r3, [pc, #44]	; (8006874 <vPortSetupTimerInterrupt+0x38>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <vPortSetupTimerInterrupt+0x3c>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	4a0a      	ldr	r2, [pc, #40]	; (800687c <vPortSetupTimerInterrupt+0x40>)
 8006852:	fba2 2303 	umull	r2, r3, r2, r3
 8006856:	099b      	lsrs	r3, r3, #6
 8006858:	4a09      	ldr	r2, [pc, #36]	; (8006880 <vPortSetupTimerInterrupt+0x44>)
 800685a:	3b01      	subs	r3, #1
 800685c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800685e:	4b04      	ldr	r3, [pc, #16]	; (8006870 <vPortSetupTimerInterrupt+0x34>)
 8006860:	2207      	movs	r2, #7
 8006862:	601a      	str	r2, [r3, #0]
}
 8006864:	bf00      	nop
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr
 800686e:	bf00      	nop
 8006870:	e000e010 	.word	0xe000e010
 8006874:	e000e018 	.word	0xe000e018
 8006878:	20000014 	.word	0x20000014
 800687c:	10624dd3 	.word	0x10624dd3
 8006880:	e000e014 	.word	0xe000e014

08006884 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006884:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006894 <vPortEnableVFP+0x10>
 8006888:	6801      	ldr	r1, [r0, #0]
 800688a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800688e:	6001      	str	r1, [r0, #0]
 8006890:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006892:	bf00      	nop
 8006894:	e000ed88 	.word	0xe000ed88

08006898 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800689e:	f3ef 8305 	mrs	r3, IPSR
 80068a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b0f      	cmp	r3, #15
 80068a8:	d914      	bls.n	80068d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80068aa:	4a17      	ldr	r2, [pc, #92]	; (8006908 <vPortValidateInterruptPriority+0x70>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80068b4:	4b15      	ldr	r3, [pc, #84]	; (800690c <vPortValidateInterruptPriority+0x74>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	7afa      	ldrb	r2, [r7, #11]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d20a      	bcs.n	80068d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80068be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c2:	f383 8811 	msr	BASEPRI, r3
 80068c6:	f3bf 8f6f 	isb	sy
 80068ca:	f3bf 8f4f 	dsb	sy
 80068ce:	607b      	str	r3, [r7, #4]
}
 80068d0:	bf00      	nop
 80068d2:	e7fe      	b.n	80068d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80068d4:	4b0e      	ldr	r3, [pc, #56]	; (8006910 <vPortValidateInterruptPriority+0x78>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80068dc:	4b0d      	ldr	r3, [pc, #52]	; (8006914 <vPortValidateInterruptPriority+0x7c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d90a      	bls.n	80068fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80068e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e8:	f383 8811 	msr	BASEPRI, r3
 80068ec:	f3bf 8f6f 	isb	sy
 80068f0:	f3bf 8f4f 	dsb	sy
 80068f4:	603b      	str	r3, [r7, #0]
}
 80068f6:	bf00      	nop
 80068f8:	e7fe      	b.n	80068f8 <vPortValidateInterruptPriority+0x60>
	}
 80068fa:	bf00      	nop
 80068fc:	3714      	adds	r7, #20
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	e000e3f0 	.word	0xe000e3f0
 800690c:	20000960 	.word	0x20000960
 8006910:	e000ed0c 	.word	0xe000ed0c
 8006914:	20000964 	.word	0x20000964

08006918 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b08a      	sub	sp, #40	; 0x28
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006924:	f7fe ffec 	bl	8005900 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006928:	4b5b      	ldr	r3, [pc, #364]	; (8006a98 <pvPortMalloc+0x180>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006930:	f000 f920 	bl	8006b74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006934:	4b59      	ldr	r3, [pc, #356]	; (8006a9c <pvPortMalloc+0x184>)
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4013      	ands	r3, r2
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8093 	bne.w	8006a68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01d      	beq.n	8006984 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006948:	2208      	movs	r2, #8
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4413      	add	r3, r2
 800694e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f003 0307 	and.w	r3, r3, #7
 8006956:	2b00      	cmp	r3, #0
 8006958:	d014      	beq.n	8006984 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f023 0307 	bic.w	r3, r3, #7
 8006960:	3308      	adds	r3, #8
 8006962:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f003 0307 	and.w	r3, r3, #7
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00a      	beq.n	8006984 <pvPortMalloc+0x6c>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	617b      	str	r3, [r7, #20]
}
 8006980:	bf00      	nop
 8006982:	e7fe      	b.n	8006982 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d06e      	beq.n	8006a68 <pvPortMalloc+0x150>
 800698a:	4b45      	ldr	r3, [pc, #276]	; (8006aa0 <pvPortMalloc+0x188>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	687a      	ldr	r2, [r7, #4]
 8006990:	429a      	cmp	r2, r3
 8006992:	d869      	bhi.n	8006a68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006994:	4b43      	ldr	r3, [pc, #268]	; (8006aa4 <pvPortMalloc+0x18c>)
 8006996:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006998:	4b42      	ldr	r3, [pc, #264]	; (8006aa4 <pvPortMalloc+0x18c>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800699e:	e004      	b.n	80069aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80069a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80069a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d903      	bls.n	80069bc <pvPortMalloc+0xa4>
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d1f1      	bne.n	80069a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80069bc:	4b36      	ldr	r3, [pc, #216]	; (8006a98 <pvPortMalloc+0x180>)
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069c2:	429a      	cmp	r2, r3
 80069c4:	d050      	beq.n	8006a68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	2208      	movs	r2, #8
 80069cc:	4413      	add	r3, r2
 80069ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80069d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80069d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069da:	685a      	ldr	r2, [r3, #4]
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	1ad2      	subs	r2, r2, r3
 80069e0:	2308      	movs	r3, #8
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d91f      	bls.n	8006a28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80069e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	4413      	add	r3, r2
 80069ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	f003 0307 	and.w	r3, r3, #7
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00a      	beq.n	8006a10 <pvPortMalloc+0xf8>
	__asm volatile
 80069fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069fe:	f383 8811 	msr	BASEPRI, r3
 8006a02:	f3bf 8f6f 	isb	sy
 8006a06:	f3bf 8f4f 	dsb	sy
 8006a0a:	613b      	str	r3, [r7, #16]
}
 8006a0c:	bf00      	nop
 8006a0e:	e7fe      	b.n	8006a0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	1ad2      	subs	r2, r2, r3
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006a22:	69b8      	ldr	r0, [r7, #24]
 8006a24:	f000 f908 	bl	8006c38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006a28:	4b1d      	ldr	r3, [pc, #116]	; (8006aa0 <pvPortMalloc+0x188>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	4a1b      	ldr	r2, [pc, #108]	; (8006aa0 <pvPortMalloc+0x188>)
 8006a34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006a36:	4b1a      	ldr	r3, [pc, #104]	; (8006aa0 <pvPortMalloc+0x188>)
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4b1b      	ldr	r3, [pc, #108]	; (8006aa8 <pvPortMalloc+0x190>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d203      	bcs.n	8006a4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006a42:	4b17      	ldr	r3, [pc, #92]	; (8006aa0 <pvPortMalloc+0x188>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a18      	ldr	r2, [pc, #96]	; (8006aa8 <pvPortMalloc+0x190>)
 8006a48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	685a      	ldr	r2, [r3, #4]
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <pvPortMalloc+0x184>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006a5e:	4b13      	ldr	r3, [pc, #76]	; (8006aac <pvPortMalloc+0x194>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3301      	adds	r3, #1
 8006a64:	4a11      	ldr	r2, [pc, #68]	; (8006aac <pvPortMalloc+0x194>)
 8006a66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006a68:	f7fe ff58 	bl	800591c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	f003 0307 	and.w	r3, r3, #7
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d00a      	beq.n	8006a8c <pvPortMalloc+0x174>
	__asm volatile
 8006a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a7a:	f383 8811 	msr	BASEPRI, r3
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f3bf 8f4f 	dsb	sy
 8006a86:	60fb      	str	r3, [r7, #12]
}
 8006a88:	bf00      	nop
 8006a8a:	e7fe      	b.n	8006a8a <pvPortMalloc+0x172>
	return pvReturn;
 8006a8c:	69fb      	ldr	r3, [r7, #28]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3728      	adds	r7, #40	; 0x28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20004570 	.word	0x20004570
 8006a9c:	20004584 	.word	0x20004584
 8006aa0:	20004574 	.word	0x20004574
 8006aa4:	20004568 	.word	0x20004568
 8006aa8:	20004578 	.word	0x20004578
 8006aac:	2000457c 	.word	0x2000457c

08006ab0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d04d      	beq.n	8006b5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	425b      	negs	r3, r3
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4413      	add	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	4b24      	ldr	r3, [pc, #144]	; (8006b68 <vPortFree+0xb8>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4013      	ands	r3, r2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10a      	bne.n	8006af4 <vPortFree+0x44>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	e7fe      	b.n	8006af2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <vPortFree+0x62>
	__asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	60bb      	str	r3, [r7, #8]
}
 8006b0e:	bf00      	nop
 8006b10:	e7fe      	b.n	8006b10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	685a      	ldr	r2, [r3, #4]
 8006b16:	4b14      	ldr	r3, [pc, #80]	; (8006b68 <vPortFree+0xb8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01e      	beq.n	8006b5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d11a      	bne.n	8006b5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	685a      	ldr	r2, [r3, #4]
 8006b2c:	4b0e      	ldr	r3, [pc, #56]	; (8006b68 <vPortFree+0xb8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	43db      	mvns	r3, r3
 8006b32:	401a      	ands	r2, r3
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006b38:	f7fe fee2 	bl	8005900 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	685a      	ldr	r2, [r3, #4]
 8006b40:	4b0a      	ldr	r3, [pc, #40]	; (8006b6c <vPortFree+0xbc>)
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	4413      	add	r3, r2
 8006b46:	4a09      	ldr	r2, [pc, #36]	; (8006b6c <vPortFree+0xbc>)
 8006b48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006b4a:	6938      	ldr	r0, [r7, #16]
 8006b4c:	f000 f874 	bl	8006c38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006b50:	4b07      	ldr	r3, [pc, #28]	; (8006b70 <vPortFree+0xc0>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3301      	adds	r3, #1
 8006b56:	4a06      	ldr	r2, [pc, #24]	; (8006b70 <vPortFree+0xc0>)
 8006b58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006b5a:	f7fe fedf 	bl	800591c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006b5e:	bf00      	nop
 8006b60:	3718      	adds	r7, #24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	bd80      	pop	{r7, pc}
 8006b66:	bf00      	nop
 8006b68:	20004584 	.word	0x20004584
 8006b6c:	20004574 	.word	0x20004574
 8006b70:	20004580 	.word	0x20004580

08006b74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006b74:	b480      	push	{r7}
 8006b76:	b085      	sub	sp, #20
 8006b78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006b7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006b7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006b80:	4b27      	ldr	r3, [pc, #156]	; (8006c20 <prvHeapInit+0xac>)
 8006b82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f003 0307 	and.w	r3, r3, #7
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d00c      	beq.n	8006ba8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3307      	adds	r3, #7
 8006b92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006b9c:	68ba      	ldr	r2, [r7, #8]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	4a1f      	ldr	r2, [pc, #124]	; (8006c20 <prvHeapInit+0xac>)
 8006ba4:	4413      	add	r3, r2
 8006ba6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <prvHeapInit+0xb0>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006bb2:	4b1c      	ldr	r3, [pc, #112]	; (8006c24 <prvHeapInit+0xb0>)
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68ba      	ldr	r2, [r7, #8]
 8006bbc:	4413      	add	r3, r2
 8006bbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	1a9b      	subs	r3, r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f023 0307 	bic.w	r3, r3, #7
 8006bce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a15      	ldr	r2, [pc, #84]	; (8006c28 <prvHeapInit+0xb4>)
 8006bd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006bd6:	4b14      	ldr	r3, [pc, #80]	; (8006c28 <prvHeapInit+0xb4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006bde:	4b12      	ldr	r3, [pc, #72]	; (8006c28 <prvHeapInit+0xb4>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	1ad2      	subs	r2, r2, r3
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006bf4:	4b0c      	ldr	r3, [pc, #48]	; (8006c28 <prvHeapInit+0xb4>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4a0a      	ldr	r2, [pc, #40]	; (8006c2c <prvHeapInit+0xb8>)
 8006c02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	4a09      	ldr	r2, [pc, #36]	; (8006c30 <prvHeapInit+0xbc>)
 8006c0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006c0c:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <prvHeapInit+0xc0>)
 8006c0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	bf00      	nop
 8006c16:	3714      	adds	r7, #20
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	20000968 	.word	0x20000968
 8006c24:	20004568 	.word	0x20004568
 8006c28:	20004570 	.word	0x20004570
 8006c2c:	20004578 	.word	0x20004578
 8006c30:	20004574 	.word	0x20004574
 8006c34:	20004584 	.word	0x20004584

08006c38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006c40:	4b28      	ldr	r3, [pc, #160]	; (8006ce4 <prvInsertBlockIntoFreeList+0xac>)
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	e002      	b.n	8006c4c <prvInsertBlockIntoFreeList+0x14>
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	687a      	ldr	r2, [r7, #4]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d8f7      	bhi.n	8006c46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4413      	add	r3, r2
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d108      	bne.n	8006c7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	441a      	add	r2, r3
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	441a      	add	r2, r3
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d118      	bne.n	8006cc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b15      	ldr	r3, [pc, #84]	; (8006ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d00d      	beq.n	8006cb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	441a      	add	r2, r3
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	601a      	str	r2, [r3, #0]
 8006cb4:	e008      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006cb6:	4b0c      	ldr	r3, [pc, #48]	; (8006ce8 <prvInsertBlockIntoFreeList+0xb0>)
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	e003      	b.n	8006cc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d002      	beq.n	8006cd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cd6:	bf00      	nop
 8006cd8:	3714      	adds	r7, #20
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop
 8006ce4:	20004568 	.word	0x20004568
 8006ce8:	20004570 	.word	0x20004570

08006cec <siprintf>:
 8006cec:	b40e      	push	{r1, r2, r3}
 8006cee:	b500      	push	{lr}
 8006cf0:	b09c      	sub	sp, #112	; 0x70
 8006cf2:	ab1d      	add	r3, sp, #116	; 0x74
 8006cf4:	9002      	str	r0, [sp, #8]
 8006cf6:	9006      	str	r0, [sp, #24]
 8006cf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006cfc:	4809      	ldr	r0, [pc, #36]	; (8006d24 <siprintf+0x38>)
 8006cfe:	9107      	str	r1, [sp, #28]
 8006d00:	9104      	str	r1, [sp, #16]
 8006d02:	4909      	ldr	r1, [pc, #36]	; (8006d28 <siprintf+0x3c>)
 8006d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d08:	9105      	str	r1, [sp, #20]
 8006d0a:	6800      	ldr	r0, [r0, #0]
 8006d0c:	9301      	str	r3, [sp, #4]
 8006d0e:	a902      	add	r1, sp, #8
 8006d10:	f000 f9ba 	bl	8007088 <_svfiprintf_r>
 8006d14:	9b02      	ldr	r3, [sp, #8]
 8006d16:	2200      	movs	r2, #0
 8006d18:	701a      	strb	r2, [r3, #0]
 8006d1a:	b01c      	add	sp, #112	; 0x70
 8006d1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d20:	b003      	add	sp, #12
 8006d22:	4770      	bx	lr
 8006d24:	20000070 	.word	0x20000070
 8006d28:	ffff0208 	.word	0xffff0208

08006d2c <memset>:
 8006d2c:	4402      	add	r2, r0
 8006d2e:	4603      	mov	r3, r0
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d100      	bne.n	8006d36 <memset+0xa>
 8006d34:	4770      	bx	lr
 8006d36:	f803 1b01 	strb.w	r1, [r3], #1
 8006d3a:	e7f9      	b.n	8006d30 <memset+0x4>

08006d3c <strncmp>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	b16a      	cbz	r2, 8006d5c <strncmp+0x20>
 8006d40:	3901      	subs	r1, #1
 8006d42:	1884      	adds	r4, r0, r2
 8006d44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d48:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d103      	bne.n	8006d58 <strncmp+0x1c>
 8006d50:	42a0      	cmp	r0, r4
 8006d52:	d001      	beq.n	8006d58 <strncmp+0x1c>
 8006d54:	2a00      	cmp	r2, #0
 8006d56:	d1f5      	bne.n	8006d44 <strncmp+0x8>
 8006d58:	1ad0      	subs	r0, r2, r3
 8006d5a:	bd10      	pop	{r4, pc}
 8006d5c:	4610      	mov	r0, r2
 8006d5e:	e7fc      	b.n	8006d5a <strncmp+0x1e>

08006d60 <__errno>:
 8006d60:	4b01      	ldr	r3, [pc, #4]	; (8006d68 <__errno+0x8>)
 8006d62:	6818      	ldr	r0, [r3, #0]
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	20000070 	.word	0x20000070

08006d6c <__libc_init_array>:
 8006d6c:	b570      	push	{r4, r5, r6, lr}
 8006d6e:	4d0d      	ldr	r5, [pc, #52]	; (8006da4 <__libc_init_array+0x38>)
 8006d70:	4c0d      	ldr	r4, [pc, #52]	; (8006da8 <__libc_init_array+0x3c>)
 8006d72:	1b64      	subs	r4, r4, r5
 8006d74:	10a4      	asrs	r4, r4, #2
 8006d76:	2600      	movs	r6, #0
 8006d78:	42a6      	cmp	r6, r4
 8006d7a:	d109      	bne.n	8006d90 <__libc_init_array+0x24>
 8006d7c:	4d0b      	ldr	r5, [pc, #44]	; (8006dac <__libc_init_array+0x40>)
 8006d7e:	4c0c      	ldr	r4, [pc, #48]	; (8006db0 <__libc_init_array+0x44>)
 8006d80:	f000 fc72 	bl	8007668 <_init>
 8006d84:	1b64      	subs	r4, r4, r5
 8006d86:	10a4      	asrs	r4, r4, #2
 8006d88:	2600      	movs	r6, #0
 8006d8a:	42a6      	cmp	r6, r4
 8006d8c:	d105      	bne.n	8006d9a <__libc_init_array+0x2e>
 8006d8e:	bd70      	pop	{r4, r5, r6, pc}
 8006d90:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d94:	4798      	blx	r3
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7ee      	b.n	8006d78 <__libc_init_array+0xc>
 8006d9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9e:	4798      	blx	r3
 8006da0:	3601      	adds	r6, #1
 8006da2:	e7f2      	b.n	8006d8a <__libc_init_array+0x1e>
 8006da4:	08008518 	.word	0x08008518
 8006da8:	08008518 	.word	0x08008518
 8006dac:	08008518 	.word	0x08008518
 8006db0:	0800851c 	.word	0x0800851c

08006db4 <__retarget_lock_acquire_recursive>:
 8006db4:	4770      	bx	lr

08006db6 <__retarget_lock_release_recursive>:
 8006db6:	4770      	bx	lr

08006db8 <strcpy>:
 8006db8:	4603      	mov	r3, r0
 8006dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dbe:	f803 2b01 	strb.w	r2, [r3], #1
 8006dc2:	2a00      	cmp	r2, #0
 8006dc4:	d1f9      	bne.n	8006dba <strcpy+0x2>
 8006dc6:	4770      	bx	lr

08006dc8 <memcpy>:
 8006dc8:	440a      	add	r2, r1
 8006dca:	4291      	cmp	r1, r2
 8006dcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006dd0:	d100      	bne.n	8006dd4 <memcpy+0xc>
 8006dd2:	4770      	bx	lr
 8006dd4:	b510      	push	{r4, lr}
 8006dd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dde:	4291      	cmp	r1, r2
 8006de0:	d1f9      	bne.n	8006dd6 <memcpy+0xe>
 8006de2:	bd10      	pop	{r4, pc}

08006de4 <_free_r>:
 8006de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006de6:	2900      	cmp	r1, #0
 8006de8:	d044      	beq.n	8006e74 <_free_r+0x90>
 8006dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dee:	9001      	str	r0, [sp, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	f1a1 0404 	sub.w	r4, r1, #4
 8006df6:	bfb8      	it	lt
 8006df8:	18e4      	addlt	r4, r4, r3
 8006dfa:	f000 f8df 	bl	8006fbc <__malloc_lock>
 8006dfe:	4a1e      	ldr	r2, [pc, #120]	; (8006e78 <_free_r+0x94>)
 8006e00:	9801      	ldr	r0, [sp, #4]
 8006e02:	6813      	ldr	r3, [r2, #0]
 8006e04:	b933      	cbnz	r3, 8006e14 <_free_r+0x30>
 8006e06:	6063      	str	r3, [r4, #4]
 8006e08:	6014      	str	r4, [r2, #0]
 8006e0a:	b003      	add	sp, #12
 8006e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e10:	f000 b8da 	b.w	8006fc8 <__malloc_unlock>
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	d908      	bls.n	8006e2a <_free_r+0x46>
 8006e18:	6825      	ldr	r5, [r4, #0]
 8006e1a:	1961      	adds	r1, r4, r5
 8006e1c:	428b      	cmp	r3, r1
 8006e1e:	bf01      	itttt	eq
 8006e20:	6819      	ldreq	r1, [r3, #0]
 8006e22:	685b      	ldreq	r3, [r3, #4]
 8006e24:	1949      	addeq	r1, r1, r5
 8006e26:	6021      	streq	r1, [r4, #0]
 8006e28:	e7ed      	b.n	8006e06 <_free_r+0x22>
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	b10b      	cbz	r3, 8006e34 <_free_r+0x50>
 8006e30:	42a3      	cmp	r3, r4
 8006e32:	d9fa      	bls.n	8006e2a <_free_r+0x46>
 8006e34:	6811      	ldr	r1, [r2, #0]
 8006e36:	1855      	adds	r5, r2, r1
 8006e38:	42a5      	cmp	r5, r4
 8006e3a:	d10b      	bne.n	8006e54 <_free_r+0x70>
 8006e3c:	6824      	ldr	r4, [r4, #0]
 8006e3e:	4421      	add	r1, r4
 8006e40:	1854      	adds	r4, r2, r1
 8006e42:	42a3      	cmp	r3, r4
 8006e44:	6011      	str	r1, [r2, #0]
 8006e46:	d1e0      	bne.n	8006e0a <_free_r+0x26>
 8006e48:	681c      	ldr	r4, [r3, #0]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	6053      	str	r3, [r2, #4]
 8006e4e:	440c      	add	r4, r1
 8006e50:	6014      	str	r4, [r2, #0]
 8006e52:	e7da      	b.n	8006e0a <_free_r+0x26>
 8006e54:	d902      	bls.n	8006e5c <_free_r+0x78>
 8006e56:	230c      	movs	r3, #12
 8006e58:	6003      	str	r3, [r0, #0]
 8006e5a:	e7d6      	b.n	8006e0a <_free_r+0x26>
 8006e5c:	6825      	ldr	r5, [r4, #0]
 8006e5e:	1961      	adds	r1, r4, r5
 8006e60:	428b      	cmp	r3, r1
 8006e62:	bf04      	itt	eq
 8006e64:	6819      	ldreq	r1, [r3, #0]
 8006e66:	685b      	ldreq	r3, [r3, #4]
 8006e68:	6063      	str	r3, [r4, #4]
 8006e6a:	bf04      	itt	eq
 8006e6c:	1949      	addeq	r1, r1, r5
 8006e6e:	6021      	streq	r1, [r4, #0]
 8006e70:	6054      	str	r4, [r2, #4]
 8006e72:	e7ca      	b.n	8006e0a <_free_r+0x26>
 8006e74:	b003      	add	sp, #12
 8006e76:	bd30      	pop	{r4, r5, pc}
 8006e78:	200046c8 	.word	0x200046c8

08006e7c <sbrk_aligned>:
 8006e7c:	b570      	push	{r4, r5, r6, lr}
 8006e7e:	4e0e      	ldr	r6, [pc, #56]	; (8006eb8 <sbrk_aligned+0x3c>)
 8006e80:	460c      	mov	r4, r1
 8006e82:	6831      	ldr	r1, [r6, #0]
 8006e84:	4605      	mov	r5, r0
 8006e86:	b911      	cbnz	r1, 8006e8e <sbrk_aligned+0x12>
 8006e88:	f000 fba6 	bl	80075d8 <_sbrk_r>
 8006e8c:	6030      	str	r0, [r6, #0]
 8006e8e:	4621      	mov	r1, r4
 8006e90:	4628      	mov	r0, r5
 8006e92:	f000 fba1 	bl	80075d8 <_sbrk_r>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	d00a      	beq.n	8006eb0 <sbrk_aligned+0x34>
 8006e9a:	1cc4      	adds	r4, r0, #3
 8006e9c:	f024 0403 	bic.w	r4, r4, #3
 8006ea0:	42a0      	cmp	r0, r4
 8006ea2:	d007      	beq.n	8006eb4 <sbrk_aligned+0x38>
 8006ea4:	1a21      	subs	r1, r4, r0
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	f000 fb96 	bl	80075d8 <_sbrk_r>
 8006eac:	3001      	adds	r0, #1
 8006eae:	d101      	bne.n	8006eb4 <sbrk_aligned+0x38>
 8006eb0:	f04f 34ff 	mov.w	r4, #4294967295
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}
 8006eb8:	200046cc 	.word	0x200046cc

08006ebc <_malloc_r>:
 8006ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ec0:	1ccd      	adds	r5, r1, #3
 8006ec2:	f025 0503 	bic.w	r5, r5, #3
 8006ec6:	3508      	adds	r5, #8
 8006ec8:	2d0c      	cmp	r5, #12
 8006eca:	bf38      	it	cc
 8006ecc:	250c      	movcc	r5, #12
 8006ece:	2d00      	cmp	r5, #0
 8006ed0:	4607      	mov	r7, r0
 8006ed2:	db01      	blt.n	8006ed8 <_malloc_r+0x1c>
 8006ed4:	42a9      	cmp	r1, r5
 8006ed6:	d905      	bls.n	8006ee4 <_malloc_r+0x28>
 8006ed8:	230c      	movs	r3, #12
 8006eda:	603b      	str	r3, [r7, #0]
 8006edc:	2600      	movs	r6, #0
 8006ede:	4630      	mov	r0, r6
 8006ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ee4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006fb8 <_malloc_r+0xfc>
 8006ee8:	f000 f868 	bl	8006fbc <__malloc_lock>
 8006eec:	f8d8 3000 	ldr.w	r3, [r8]
 8006ef0:	461c      	mov	r4, r3
 8006ef2:	bb5c      	cbnz	r4, 8006f4c <_malloc_r+0x90>
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	4638      	mov	r0, r7
 8006ef8:	f7ff ffc0 	bl	8006e7c <sbrk_aligned>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	4604      	mov	r4, r0
 8006f00:	d155      	bne.n	8006fae <_malloc_r+0xf2>
 8006f02:	f8d8 4000 	ldr.w	r4, [r8]
 8006f06:	4626      	mov	r6, r4
 8006f08:	2e00      	cmp	r6, #0
 8006f0a:	d145      	bne.n	8006f98 <_malloc_r+0xdc>
 8006f0c:	2c00      	cmp	r4, #0
 8006f0e:	d048      	beq.n	8006fa2 <_malloc_r+0xe6>
 8006f10:	6823      	ldr	r3, [r4, #0]
 8006f12:	4631      	mov	r1, r6
 8006f14:	4638      	mov	r0, r7
 8006f16:	eb04 0903 	add.w	r9, r4, r3
 8006f1a:	f000 fb5d 	bl	80075d8 <_sbrk_r>
 8006f1e:	4581      	cmp	r9, r0
 8006f20:	d13f      	bne.n	8006fa2 <_malloc_r+0xe6>
 8006f22:	6821      	ldr	r1, [r4, #0]
 8006f24:	1a6d      	subs	r5, r5, r1
 8006f26:	4629      	mov	r1, r5
 8006f28:	4638      	mov	r0, r7
 8006f2a:	f7ff ffa7 	bl	8006e7c <sbrk_aligned>
 8006f2e:	3001      	adds	r0, #1
 8006f30:	d037      	beq.n	8006fa2 <_malloc_r+0xe6>
 8006f32:	6823      	ldr	r3, [r4, #0]
 8006f34:	442b      	add	r3, r5
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	f8d8 3000 	ldr.w	r3, [r8]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d038      	beq.n	8006fb2 <_malloc_r+0xf6>
 8006f40:	685a      	ldr	r2, [r3, #4]
 8006f42:	42a2      	cmp	r2, r4
 8006f44:	d12b      	bne.n	8006f9e <_malloc_r+0xe2>
 8006f46:	2200      	movs	r2, #0
 8006f48:	605a      	str	r2, [r3, #4]
 8006f4a:	e00f      	b.n	8006f6c <_malloc_r+0xb0>
 8006f4c:	6822      	ldr	r2, [r4, #0]
 8006f4e:	1b52      	subs	r2, r2, r5
 8006f50:	d41f      	bmi.n	8006f92 <_malloc_r+0xd6>
 8006f52:	2a0b      	cmp	r2, #11
 8006f54:	d917      	bls.n	8006f86 <_malloc_r+0xca>
 8006f56:	1961      	adds	r1, r4, r5
 8006f58:	42a3      	cmp	r3, r4
 8006f5a:	6025      	str	r5, [r4, #0]
 8006f5c:	bf18      	it	ne
 8006f5e:	6059      	strne	r1, [r3, #4]
 8006f60:	6863      	ldr	r3, [r4, #4]
 8006f62:	bf08      	it	eq
 8006f64:	f8c8 1000 	streq.w	r1, [r8]
 8006f68:	5162      	str	r2, [r4, r5]
 8006f6a:	604b      	str	r3, [r1, #4]
 8006f6c:	4638      	mov	r0, r7
 8006f6e:	f104 060b 	add.w	r6, r4, #11
 8006f72:	f000 f829 	bl	8006fc8 <__malloc_unlock>
 8006f76:	f026 0607 	bic.w	r6, r6, #7
 8006f7a:	1d23      	adds	r3, r4, #4
 8006f7c:	1af2      	subs	r2, r6, r3
 8006f7e:	d0ae      	beq.n	8006ede <_malloc_r+0x22>
 8006f80:	1b9b      	subs	r3, r3, r6
 8006f82:	50a3      	str	r3, [r4, r2]
 8006f84:	e7ab      	b.n	8006ede <_malloc_r+0x22>
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	6862      	ldr	r2, [r4, #4]
 8006f8a:	d1dd      	bne.n	8006f48 <_malloc_r+0x8c>
 8006f8c:	f8c8 2000 	str.w	r2, [r8]
 8006f90:	e7ec      	b.n	8006f6c <_malloc_r+0xb0>
 8006f92:	4623      	mov	r3, r4
 8006f94:	6864      	ldr	r4, [r4, #4]
 8006f96:	e7ac      	b.n	8006ef2 <_malloc_r+0x36>
 8006f98:	4634      	mov	r4, r6
 8006f9a:	6876      	ldr	r6, [r6, #4]
 8006f9c:	e7b4      	b.n	8006f08 <_malloc_r+0x4c>
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	e7cc      	b.n	8006f3c <_malloc_r+0x80>
 8006fa2:	230c      	movs	r3, #12
 8006fa4:	603b      	str	r3, [r7, #0]
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f000 f80e 	bl	8006fc8 <__malloc_unlock>
 8006fac:	e797      	b.n	8006ede <_malloc_r+0x22>
 8006fae:	6025      	str	r5, [r4, #0]
 8006fb0:	e7dc      	b.n	8006f6c <_malloc_r+0xb0>
 8006fb2:	605b      	str	r3, [r3, #4]
 8006fb4:	deff      	udf	#255	; 0xff
 8006fb6:	bf00      	nop
 8006fb8:	200046c8 	.word	0x200046c8

08006fbc <__malloc_lock>:
 8006fbc:	4801      	ldr	r0, [pc, #4]	; (8006fc4 <__malloc_lock+0x8>)
 8006fbe:	f7ff bef9 	b.w	8006db4 <__retarget_lock_acquire_recursive>
 8006fc2:	bf00      	nop
 8006fc4:	200046c4 	.word	0x200046c4

08006fc8 <__malloc_unlock>:
 8006fc8:	4801      	ldr	r0, [pc, #4]	; (8006fd0 <__malloc_unlock+0x8>)
 8006fca:	f7ff bef4 	b.w	8006db6 <__retarget_lock_release_recursive>
 8006fce:	bf00      	nop
 8006fd0:	200046c4 	.word	0x200046c4

08006fd4 <__ssputs_r>:
 8006fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fd8:	688e      	ldr	r6, [r1, #8]
 8006fda:	461f      	mov	r7, r3
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	680b      	ldr	r3, [r1, #0]
 8006fe0:	4682      	mov	sl, r0
 8006fe2:	460c      	mov	r4, r1
 8006fe4:	4690      	mov	r8, r2
 8006fe6:	d82c      	bhi.n	8007042 <__ssputs_r+0x6e>
 8006fe8:	898a      	ldrh	r2, [r1, #12]
 8006fea:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006fee:	d026      	beq.n	800703e <__ssputs_r+0x6a>
 8006ff0:	6965      	ldr	r5, [r4, #20]
 8006ff2:	6909      	ldr	r1, [r1, #16]
 8006ff4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ff8:	eba3 0901 	sub.w	r9, r3, r1
 8006ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007000:	1c7b      	adds	r3, r7, #1
 8007002:	444b      	add	r3, r9
 8007004:	106d      	asrs	r5, r5, #1
 8007006:	429d      	cmp	r5, r3
 8007008:	bf38      	it	cc
 800700a:	461d      	movcc	r5, r3
 800700c:	0553      	lsls	r3, r2, #21
 800700e:	d527      	bpl.n	8007060 <__ssputs_r+0x8c>
 8007010:	4629      	mov	r1, r5
 8007012:	f7ff ff53 	bl	8006ebc <_malloc_r>
 8007016:	4606      	mov	r6, r0
 8007018:	b360      	cbz	r0, 8007074 <__ssputs_r+0xa0>
 800701a:	6921      	ldr	r1, [r4, #16]
 800701c:	464a      	mov	r2, r9
 800701e:	f7ff fed3 	bl	8006dc8 <memcpy>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	6126      	str	r6, [r4, #16]
 8007030:	6165      	str	r5, [r4, #20]
 8007032:	444e      	add	r6, r9
 8007034:	eba5 0509 	sub.w	r5, r5, r9
 8007038:	6026      	str	r6, [r4, #0]
 800703a:	60a5      	str	r5, [r4, #8]
 800703c:	463e      	mov	r6, r7
 800703e:	42be      	cmp	r6, r7
 8007040:	d900      	bls.n	8007044 <__ssputs_r+0x70>
 8007042:	463e      	mov	r6, r7
 8007044:	6820      	ldr	r0, [r4, #0]
 8007046:	4632      	mov	r2, r6
 8007048:	4641      	mov	r1, r8
 800704a:	f000 faab 	bl	80075a4 <memmove>
 800704e:	68a3      	ldr	r3, [r4, #8]
 8007050:	1b9b      	subs	r3, r3, r6
 8007052:	60a3      	str	r3, [r4, #8]
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	4433      	add	r3, r6
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	2000      	movs	r0, #0
 800705c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007060:	462a      	mov	r2, r5
 8007062:	f000 fac9 	bl	80075f8 <_realloc_r>
 8007066:	4606      	mov	r6, r0
 8007068:	2800      	cmp	r0, #0
 800706a:	d1e0      	bne.n	800702e <__ssputs_r+0x5a>
 800706c:	6921      	ldr	r1, [r4, #16]
 800706e:	4650      	mov	r0, sl
 8007070:	f7ff feb8 	bl	8006de4 <_free_r>
 8007074:	230c      	movs	r3, #12
 8007076:	f8ca 3000 	str.w	r3, [sl]
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007080:	81a3      	strh	r3, [r4, #12]
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	e7e9      	b.n	800705c <__ssputs_r+0x88>

08007088 <_svfiprintf_r>:
 8007088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800708c:	4698      	mov	r8, r3
 800708e:	898b      	ldrh	r3, [r1, #12]
 8007090:	061b      	lsls	r3, r3, #24
 8007092:	b09d      	sub	sp, #116	; 0x74
 8007094:	4607      	mov	r7, r0
 8007096:	460d      	mov	r5, r1
 8007098:	4614      	mov	r4, r2
 800709a:	d50e      	bpl.n	80070ba <_svfiprintf_r+0x32>
 800709c:	690b      	ldr	r3, [r1, #16]
 800709e:	b963      	cbnz	r3, 80070ba <_svfiprintf_r+0x32>
 80070a0:	2140      	movs	r1, #64	; 0x40
 80070a2:	f7ff ff0b 	bl	8006ebc <_malloc_r>
 80070a6:	6028      	str	r0, [r5, #0]
 80070a8:	6128      	str	r0, [r5, #16]
 80070aa:	b920      	cbnz	r0, 80070b6 <_svfiprintf_r+0x2e>
 80070ac:	230c      	movs	r3, #12
 80070ae:	603b      	str	r3, [r7, #0]
 80070b0:	f04f 30ff 	mov.w	r0, #4294967295
 80070b4:	e0d0      	b.n	8007258 <_svfiprintf_r+0x1d0>
 80070b6:	2340      	movs	r3, #64	; 0x40
 80070b8:	616b      	str	r3, [r5, #20]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9309      	str	r3, [sp, #36]	; 0x24
 80070be:	2320      	movs	r3, #32
 80070c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80070c8:	2330      	movs	r3, #48	; 0x30
 80070ca:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007270 <_svfiprintf_r+0x1e8>
 80070ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80070d2:	f04f 0901 	mov.w	r9, #1
 80070d6:	4623      	mov	r3, r4
 80070d8:	469a      	mov	sl, r3
 80070da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80070de:	b10a      	cbz	r2, 80070e4 <_svfiprintf_r+0x5c>
 80070e0:	2a25      	cmp	r2, #37	; 0x25
 80070e2:	d1f9      	bne.n	80070d8 <_svfiprintf_r+0x50>
 80070e4:	ebba 0b04 	subs.w	fp, sl, r4
 80070e8:	d00b      	beq.n	8007102 <_svfiprintf_r+0x7a>
 80070ea:	465b      	mov	r3, fp
 80070ec:	4622      	mov	r2, r4
 80070ee:	4629      	mov	r1, r5
 80070f0:	4638      	mov	r0, r7
 80070f2:	f7ff ff6f 	bl	8006fd4 <__ssputs_r>
 80070f6:	3001      	adds	r0, #1
 80070f8:	f000 80a9 	beq.w	800724e <_svfiprintf_r+0x1c6>
 80070fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070fe:	445a      	add	r2, fp
 8007100:	9209      	str	r2, [sp, #36]	; 0x24
 8007102:	f89a 3000 	ldrb.w	r3, [sl]
 8007106:	2b00      	cmp	r3, #0
 8007108:	f000 80a1 	beq.w	800724e <_svfiprintf_r+0x1c6>
 800710c:	2300      	movs	r3, #0
 800710e:	f04f 32ff 	mov.w	r2, #4294967295
 8007112:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007116:	f10a 0a01 	add.w	sl, sl, #1
 800711a:	9304      	str	r3, [sp, #16]
 800711c:	9307      	str	r3, [sp, #28]
 800711e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007122:	931a      	str	r3, [sp, #104]	; 0x68
 8007124:	4654      	mov	r4, sl
 8007126:	2205      	movs	r2, #5
 8007128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800712c:	4850      	ldr	r0, [pc, #320]	; (8007270 <_svfiprintf_r+0x1e8>)
 800712e:	f7f9 f877 	bl	8000220 <memchr>
 8007132:	9a04      	ldr	r2, [sp, #16]
 8007134:	b9d8      	cbnz	r0, 800716e <_svfiprintf_r+0xe6>
 8007136:	06d0      	lsls	r0, r2, #27
 8007138:	bf44      	itt	mi
 800713a:	2320      	movmi	r3, #32
 800713c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007140:	0711      	lsls	r1, r2, #28
 8007142:	bf44      	itt	mi
 8007144:	232b      	movmi	r3, #43	; 0x2b
 8007146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800714a:	f89a 3000 	ldrb.w	r3, [sl]
 800714e:	2b2a      	cmp	r3, #42	; 0x2a
 8007150:	d015      	beq.n	800717e <_svfiprintf_r+0xf6>
 8007152:	9a07      	ldr	r2, [sp, #28]
 8007154:	4654      	mov	r4, sl
 8007156:	2000      	movs	r0, #0
 8007158:	f04f 0c0a 	mov.w	ip, #10
 800715c:	4621      	mov	r1, r4
 800715e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007162:	3b30      	subs	r3, #48	; 0x30
 8007164:	2b09      	cmp	r3, #9
 8007166:	d94d      	bls.n	8007204 <_svfiprintf_r+0x17c>
 8007168:	b1b0      	cbz	r0, 8007198 <_svfiprintf_r+0x110>
 800716a:	9207      	str	r2, [sp, #28]
 800716c:	e014      	b.n	8007198 <_svfiprintf_r+0x110>
 800716e:	eba0 0308 	sub.w	r3, r0, r8
 8007172:	fa09 f303 	lsl.w	r3, r9, r3
 8007176:	4313      	orrs	r3, r2
 8007178:	9304      	str	r3, [sp, #16]
 800717a:	46a2      	mov	sl, r4
 800717c:	e7d2      	b.n	8007124 <_svfiprintf_r+0x9c>
 800717e:	9b03      	ldr	r3, [sp, #12]
 8007180:	1d19      	adds	r1, r3, #4
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	9103      	str	r1, [sp, #12]
 8007186:	2b00      	cmp	r3, #0
 8007188:	bfbb      	ittet	lt
 800718a:	425b      	neglt	r3, r3
 800718c:	f042 0202 	orrlt.w	r2, r2, #2
 8007190:	9307      	strge	r3, [sp, #28]
 8007192:	9307      	strlt	r3, [sp, #28]
 8007194:	bfb8      	it	lt
 8007196:	9204      	strlt	r2, [sp, #16]
 8007198:	7823      	ldrb	r3, [r4, #0]
 800719a:	2b2e      	cmp	r3, #46	; 0x2e
 800719c:	d10c      	bne.n	80071b8 <_svfiprintf_r+0x130>
 800719e:	7863      	ldrb	r3, [r4, #1]
 80071a0:	2b2a      	cmp	r3, #42	; 0x2a
 80071a2:	d134      	bne.n	800720e <_svfiprintf_r+0x186>
 80071a4:	9b03      	ldr	r3, [sp, #12]
 80071a6:	1d1a      	adds	r2, r3, #4
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	9203      	str	r2, [sp, #12]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	bfb8      	it	lt
 80071b0:	f04f 33ff 	movlt.w	r3, #4294967295
 80071b4:	3402      	adds	r4, #2
 80071b6:	9305      	str	r3, [sp, #20]
 80071b8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007280 <_svfiprintf_r+0x1f8>
 80071bc:	7821      	ldrb	r1, [r4, #0]
 80071be:	2203      	movs	r2, #3
 80071c0:	4650      	mov	r0, sl
 80071c2:	f7f9 f82d 	bl	8000220 <memchr>
 80071c6:	b138      	cbz	r0, 80071d8 <_svfiprintf_r+0x150>
 80071c8:	9b04      	ldr	r3, [sp, #16]
 80071ca:	eba0 000a 	sub.w	r0, r0, sl
 80071ce:	2240      	movs	r2, #64	; 0x40
 80071d0:	4082      	lsls	r2, r0
 80071d2:	4313      	orrs	r3, r2
 80071d4:	3401      	adds	r4, #1
 80071d6:	9304      	str	r3, [sp, #16]
 80071d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071dc:	4825      	ldr	r0, [pc, #148]	; (8007274 <_svfiprintf_r+0x1ec>)
 80071de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80071e2:	2206      	movs	r2, #6
 80071e4:	f7f9 f81c 	bl	8000220 <memchr>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d038      	beq.n	800725e <_svfiprintf_r+0x1d6>
 80071ec:	4b22      	ldr	r3, [pc, #136]	; (8007278 <_svfiprintf_r+0x1f0>)
 80071ee:	bb1b      	cbnz	r3, 8007238 <_svfiprintf_r+0x1b0>
 80071f0:	9b03      	ldr	r3, [sp, #12]
 80071f2:	3307      	adds	r3, #7
 80071f4:	f023 0307 	bic.w	r3, r3, #7
 80071f8:	3308      	adds	r3, #8
 80071fa:	9303      	str	r3, [sp, #12]
 80071fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071fe:	4433      	add	r3, r6
 8007200:	9309      	str	r3, [sp, #36]	; 0x24
 8007202:	e768      	b.n	80070d6 <_svfiprintf_r+0x4e>
 8007204:	fb0c 3202 	mla	r2, ip, r2, r3
 8007208:	460c      	mov	r4, r1
 800720a:	2001      	movs	r0, #1
 800720c:	e7a6      	b.n	800715c <_svfiprintf_r+0xd4>
 800720e:	2300      	movs	r3, #0
 8007210:	3401      	adds	r4, #1
 8007212:	9305      	str	r3, [sp, #20]
 8007214:	4619      	mov	r1, r3
 8007216:	f04f 0c0a 	mov.w	ip, #10
 800721a:	4620      	mov	r0, r4
 800721c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007220:	3a30      	subs	r2, #48	; 0x30
 8007222:	2a09      	cmp	r2, #9
 8007224:	d903      	bls.n	800722e <_svfiprintf_r+0x1a6>
 8007226:	2b00      	cmp	r3, #0
 8007228:	d0c6      	beq.n	80071b8 <_svfiprintf_r+0x130>
 800722a:	9105      	str	r1, [sp, #20]
 800722c:	e7c4      	b.n	80071b8 <_svfiprintf_r+0x130>
 800722e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007232:	4604      	mov	r4, r0
 8007234:	2301      	movs	r3, #1
 8007236:	e7f0      	b.n	800721a <_svfiprintf_r+0x192>
 8007238:	ab03      	add	r3, sp, #12
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	462a      	mov	r2, r5
 800723e:	4b0f      	ldr	r3, [pc, #60]	; (800727c <_svfiprintf_r+0x1f4>)
 8007240:	a904      	add	r1, sp, #16
 8007242:	4638      	mov	r0, r7
 8007244:	f3af 8000 	nop.w
 8007248:	1c42      	adds	r2, r0, #1
 800724a:	4606      	mov	r6, r0
 800724c:	d1d6      	bne.n	80071fc <_svfiprintf_r+0x174>
 800724e:	89ab      	ldrh	r3, [r5, #12]
 8007250:	065b      	lsls	r3, r3, #25
 8007252:	f53f af2d 	bmi.w	80070b0 <_svfiprintf_r+0x28>
 8007256:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007258:	b01d      	add	sp, #116	; 0x74
 800725a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800725e:	ab03      	add	r3, sp, #12
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	462a      	mov	r2, r5
 8007264:	4b05      	ldr	r3, [pc, #20]	; (800727c <_svfiprintf_r+0x1f4>)
 8007266:	a904      	add	r1, sp, #16
 8007268:	4638      	mov	r0, r7
 800726a:	f000 f879 	bl	8007360 <_printf_i>
 800726e:	e7eb      	b.n	8007248 <_svfiprintf_r+0x1c0>
 8007270:	080084dc 	.word	0x080084dc
 8007274:	080084e6 	.word	0x080084e6
 8007278:	00000000 	.word	0x00000000
 800727c:	08006fd5 	.word	0x08006fd5
 8007280:	080084e2 	.word	0x080084e2

08007284 <_printf_common>:
 8007284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007288:	4616      	mov	r6, r2
 800728a:	4699      	mov	r9, r3
 800728c:	688a      	ldr	r2, [r1, #8]
 800728e:	690b      	ldr	r3, [r1, #16]
 8007290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007294:	4293      	cmp	r3, r2
 8007296:	bfb8      	it	lt
 8007298:	4613      	movlt	r3, r2
 800729a:	6033      	str	r3, [r6, #0]
 800729c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072a0:	4607      	mov	r7, r0
 80072a2:	460c      	mov	r4, r1
 80072a4:	b10a      	cbz	r2, 80072aa <_printf_common+0x26>
 80072a6:	3301      	adds	r3, #1
 80072a8:	6033      	str	r3, [r6, #0]
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	0699      	lsls	r1, r3, #26
 80072ae:	bf42      	ittt	mi
 80072b0:	6833      	ldrmi	r3, [r6, #0]
 80072b2:	3302      	addmi	r3, #2
 80072b4:	6033      	strmi	r3, [r6, #0]
 80072b6:	6825      	ldr	r5, [r4, #0]
 80072b8:	f015 0506 	ands.w	r5, r5, #6
 80072bc:	d106      	bne.n	80072cc <_printf_common+0x48>
 80072be:	f104 0a19 	add.w	sl, r4, #25
 80072c2:	68e3      	ldr	r3, [r4, #12]
 80072c4:	6832      	ldr	r2, [r6, #0]
 80072c6:	1a9b      	subs	r3, r3, r2
 80072c8:	42ab      	cmp	r3, r5
 80072ca:	dc26      	bgt.n	800731a <_printf_common+0x96>
 80072cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80072d0:	1e13      	subs	r3, r2, #0
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	bf18      	it	ne
 80072d6:	2301      	movne	r3, #1
 80072d8:	0692      	lsls	r2, r2, #26
 80072da:	d42b      	bmi.n	8007334 <_printf_common+0xb0>
 80072dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80072e0:	4649      	mov	r1, r9
 80072e2:	4638      	mov	r0, r7
 80072e4:	47c0      	blx	r8
 80072e6:	3001      	adds	r0, #1
 80072e8:	d01e      	beq.n	8007328 <_printf_common+0xa4>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	6922      	ldr	r2, [r4, #16]
 80072ee:	f003 0306 	and.w	r3, r3, #6
 80072f2:	2b04      	cmp	r3, #4
 80072f4:	bf02      	ittt	eq
 80072f6:	68e5      	ldreq	r5, [r4, #12]
 80072f8:	6833      	ldreq	r3, [r6, #0]
 80072fa:	1aed      	subeq	r5, r5, r3
 80072fc:	68a3      	ldr	r3, [r4, #8]
 80072fe:	bf0c      	ite	eq
 8007300:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007304:	2500      	movne	r5, #0
 8007306:	4293      	cmp	r3, r2
 8007308:	bfc4      	itt	gt
 800730a:	1a9b      	subgt	r3, r3, r2
 800730c:	18ed      	addgt	r5, r5, r3
 800730e:	2600      	movs	r6, #0
 8007310:	341a      	adds	r4, #26
 8007312:	42b5      	cmp	r5, r6
 8007314:	d11a      	bne.n	800734c <_printf_common+0xc8>
 8007316:	2000      	movs	r0, #0
 8007318:	e008      	b.n	800732c <_printf_common+0xa8>
 800731a:	2301      	movs	r3, #1
 800731c:	4652      	mov	r2, sl
 800731e:	4649      	mov	r1, r9
 8007320:	4638      	mov	r0, r7
 8007322:	47c0      	blx	r8
 8007324:	3001      	adds	r0, #1
 8007326:	d103      	bne.n	8007330 <_printf_common+0xac>
 8007328:	f04f 30ff 	mov.w	r0, #4294967295
 800732c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007330:	3501      	adds	r5, #1
 8007332:	e7c6      	b.n	80072c2 <_printf_common+0x3e>
 8007334:	18e1      	adds	r1, r4, r3
 8007336:	1c5a      	adds	r2, r3, #1
 8007338:	2030      	movs	r0, #48	; 0x30
 800733a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800733e:	4422      	add	r2, r4
 8007340:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007344:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007348:	3302      	adds	r3, #2
 800734a:	e7c7      	b.n	80072dc <_printf_common+0x58>
 800734c:	2301      	movs	r3, #1
 800734e:	4622      	mov	r2, r4
 8007350:	4649      	mov	r1, r9
 8007352:	4638      	mov	r0, r7
 8007354:	47c0      	blx	r8
 8007356:	3001      	adds	r0, #1
 8007358:	d0e6      	beq.n	8007328 <_printf_common+0xa4>
 800735a:	3601      	adds	r6, #1
 800735c:	e7d9      	b.n	8007312 <_printf_common+0x8e>
	...

08007360 <_printf_i>:
 8007360:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007364:	7e0f      	ldrb	r7, [r1, #24]
 8007366:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007368:	2f78      	cmp	r7, #120	; 0x78
 800736a:	4691      	mov	r9, r2
 800736c:	4680      	mov	r8, r0
 800736e:	460c      	mov	r4, r1
 8007370:	469a      	mov	sl, r3
 8007372:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007376:	d807      	bhi.n	8007388 <_printf_i+0x28>
 8007378:	2f62      	cmp	r7, #98	; 0x62
 800737a:	d80a      	bhi.n	8007392 <_printf_i+0x32>
 800737c:	2f00      	cmp	r7, #0
 800737e:	f000 80d4 	beq.w	800752a <_printf_i+0x1ca>
 8007382:	2f58      	cmp	r7, #88	; 0x58
 8007384:	f000 80c0 	beq.w	8007508 <_printf_i+0x1a8>
 8007388:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800738c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007390:	e03a      	b.n	8007408 <_printf_i+0xa8>
 8007392:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007396:	2b15      	cmp	r3, #21
 8007398:	d8f6      	bhi.n	8007388 <_printf_i+0x28>
 800739a:	a101      	add	r1, pc, #4	; (adr r1, 80073a0 <_printf_i+0x40>)
 800739c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80073a0:	080073f9 	.word	0x080073f9
 80073a4:	0800740d 	.word	0x0800740d
 80073a8:	08007389 	.word	0x08007389
 80073ac:	08007389 	.word	0x08007389
 80073b0:	08007389 	.word	0x08007389
 80073b4:	08007389 	.word	0x08007389
 80073b8:	0800740d 	.word	0x0800740d
 80073bc:	08007389 	.word	0x08007389
 80073c0:	08007389 	.word	0x08007389
 80073c4:	08007389 	.word	0x08007389
 80073c8:	08007389 	.word	0x08007389
 80073cc:	08007511 	.word	0x08007511
 80073d0:	08007439 	.word	0x08007439
 80073d4:	080074cb 	.word	0x080074cb
 80073d8:	08007389 	.word	0x08007389
 80073dc:	08007389 	.word	0x08007389
 80073e0:	08007533 	.word	0x08007533
 80073e4:	08007389 	.word	0x08007389
 80073e8:	08007439 	.word	0x08007439
 80073ec:	08007389 	.word	0x08007389
 80073f0:	08007389 	.word	0x08007389
 80073f4:	080074d3 	.word	0x080074d3
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	1d1a      	adds	r2, r3, #4
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	602a      	str	r2, [r5, #0]
 8007400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007404:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007408:	2301      	movs	r3, #1
 800740a:	e09f      	b.n	800754c <_printf_i+0x1ec>
 800740c:	6820      	ldr	r0, [r4, #0]
 800740e:	682b      	ldr	r3, [r5, #0]
 8007410:	0607      	lsls	r7, r0, #24
 8007412:	f103 0104 	add.w	r1, r3, #4
 8007416:	6029      	str	r1, [r5, #0]
 8007418:	d501      	bpl.n	800741e <_printf_i+0xbe>
 800741a:	681e      	ldr	r6, [r3, #0]
 800741c:	e003      	b.n	8007426 <_printf_i+0xc6>
 800741e:	0646      	lsls	r6, r0, #25
 8007420:	d5fb      	bpl.n	800741a <_printf_i+0xba>
 8007422:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007426:	2e00      	cmp	r6, #0
 8007428:	da03      	bge.n	8007432 <_printf_i+0xd2>
 800742a:	232d      	movs	r3, #45	; 0x2d
 800742c:	4276      	negs	r6, r6
 800742e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007432:	485a      	ldr	r0, [pc, #360]	; (800759c <_printf_i+0x23c>)
 8007434:	230a      	movs	r3, #10
 8007436:	e012      	b.n	800745e <_printf_i+0xfe>
 8007438:	682b      	ldr	r3, [r5, #0]
 800743a:	6820      	ldr	r0, [r4, #0]
 800743c:	1d19      	adds	r1, r3, #4
 800743e:	6029      	str	r1, [r5, #0]
 8007440:	0605      	lsls	r5, r0, #24
 8007442:	d501      	bpl.n	8007448 <_printf_i+0xe8>
 8007444:	681e      	ldr	r6, [r3, #0]
 8007446:	e002      	b.n	800744e <_printf_i+0xee>
 8007448:	0641      	lsls	r1, r0, #25
 800744a:	d5fb      	bpl.n	8007444 <_printf_i+0xe4>
 800744c:	881e      	ldrh	r6, [r3, #0]
 800744e:	4853      	ldr	r0, [pc, #332]	; (800759c <_printf_i+0x23c>)
 8007450:	2f6f      	cmp	r7, #111	; 0x6f
 8007452:	bf0c      	ite	eq
 8007454:	2308      	moveq	r3, #8
 8007456:	230a      	movne	r3, #10
 8007458:	2100      	movs	r1, #0
 800745a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800745e:	6865      	ldr	r5, [r4, #4]
 8007460:	60a5      	str	r5, [r4, #8]
 8007462:	2d00      	cmp	r5, #0
 8007464:	bfa2      	ittt	ge
 8007466:	6821      	ldrge	r1, [r4, #0]
 8007468:	f021 0104 	bicge.w	r1, r1, #4
 800746c:	6021      	strge	r1, [r4, #0]
 800746e:	b90e      	cbnz	r6, 8007474 <_printf_i+0x114>
 8007470:	2d00      	cmp	r5, #0
 8007472:	d04b      	beq.n	800750c <_printf_i+0x1ac>
 8007474:	4615      	mov	r5, r2
 8007476:	fbb6 f1f3 	udiv	r1, r6, r3
 800747a:	fb03 6711 	mls	r7, r3, r1, r6
 800747e:	5dc7      	ldrb	r7, [r0, r7]
 8007480:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007484:	4637      	mov	r7, r6
 8007486:	42bb      	cmp	r3, r7
 8007488:	460e      	mov	r6, r1
 800748a:	d9f4      	bls.n	8007476 <_printf_i+0x116>
 800748c:	2b08      	cmp	r3, #8
 800748e:	d10b      	bne.n	80074a8 <_printf_i+0x148>
 8007490:	6823      	ldr	r3, [r4, #0]
 8007492:	07de      	lsls	r6, r3, #31
 8007494:	d508      	bpl.n	80074a8 <_printf_i+0x148>
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	6861      	ldr	r1, [r4, #4]
 800749a:	4299      	cmp	r1, r3
 800749c:	bfde      	ittt	le
 800749e:	2330      	movle	r3, #48	; 0x30
 80074a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074a8:	1b52      	subs	r2, r2, r5
 80074aa:	6122      	str	r2, [r4, #16]
 80074ac:	f8cd a000 	str.w	sl, [sp]
 80074b0:	464b      	mov	r3, r9
 80074b2:	aa03      	add	r2, sp, #12
 80074b4:	4621      	mov	r1, r4
 80074b6:	4640      	mov	r0, r8
 80074b8:	f7ff fee4 	bl	8007284 <_printf_common>
 80074bc:	3001      	adds	r0, #1
 80074be:	d14a      	bne.n	8007556 <_printf_i+0x1f6>
 80074c0:	f04f 30ff 	mov.w	r0, #4294967295
 80074c4:	b004      	add	sp, #16
 80074c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	f043 0320 	orr.w	r3, r3, #32
 80074d0:	6023      	str	r3, [r4, #0]
 80074d2:	4833      	ldr	r0, [pc, #204]	; (80075a0 <_printf_i+0x240>)
 80074d4:	2778      	movs	r7, #120	; 0x78
 80074d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	6829      	ldr	r1, [r5, #0]
 80074de:	061f      	lsls	r7, r3, #24
 80074e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80074e4:	d402      	bmi.n	80074ec <_printf_i+0x18c>
 80074e6:	065f      	lsls	r7, r3, #25
 80074e8:	bf48      	it	mi
 80074ea:	b2b6      	uxthmi	r6, r6
 80074ec:	07df      	lsls	r7, r3, #31
 80074ee:	bf48      	it	mi
 80074f0:	f043 0320 	orrmi.w	r3, r3, #32
 80074f4:	6029      	str	r1, [r5, #0]
 80074f6:	bf48      	it	mi
 80074f8:	6023      	strmi	r3, [r4, #0]
 80074fa:	b91e      	cbnz	r6, 8007504 <_printf_i+0x1a4>
 80074fc:	6823      	ldr	r3, [r4, #0]
 80074fe:	f023 0320 	bic.w	r3, r3, #32
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	2310      	movs	r3, #16
 8007506:	e7a7      	b.n	8007458 <_printf_i+0xf8>
 8007508:	4824      	ldr	r0, [pc, #144]	; (800759c <_printf_i+0x23c>)
 800750a:	e7e4      	b.n	80074d6 <_printf_i+0x176>
 800750c:	4615      	mov	r5, r2
 800750e:	e7bd      	b.n	800748c <_printf_i+0x12c>
 8007510:	682b      	ldr	r3, [r5, #0]
 8007512:	6826      	ldr	r6, [r4, #0]
 8007514:	6961      	ldr	r1, [r4, #20]
 8007516:	1d18      	adds	r0, r3, #4
 8007518:	6028      	str	r0, [r5, #0]
 800751a:	0635      	lsls	r5, r6, #24
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	d501      	bpl.n	8007524 <_printf_i+0x1c4>
 8007520:	6019      	str	r1, [r3, #0]
 8007522:	e002      	b.n	800752a <_printf_i+0x1ca>
 8007524:	0670      	lsls	r0, r6, #25
 8007526:	d5fb      	bpl.n	8007520 <_printf_i+0x1c0>
 8007528:	8019      	strh	r1, [r3, #0]
 800752a:	2300      	movs	r3, #0
 800752c:	6123      	str	r3, [r4, #16]
 800752e:	4615      	mov	r5, r2
 8007530:	e7bc      	b.n	80074ac <_printf_i+0x14c>
 8007532:	682b      	ldr	r3, [r5, #0]
 8007534:	1d1a      	adds	r2, r3, #4
 8007536:	602a      	str	r2, [r5, #0]
 8007538:	681d      	ldr	r5, [r3, #0]
 800753a:	6862      	ldr	r2, [r4, #4]
 800753c:	2100      	movs	r1, #0
 800753e:	4628      	mov	r0, r5
 8007540:	f7f8 fe6e 	bl	8000220 <memchr>
 8007544:	b108      	cbz	r0, 800754a <_printf_i+0x1ea>
 8007546:	1b40      	subs	r0, r0, r5
 8007548:	6060      	str	r0, [r4, #4]
 800754a:	6863      	ldr	r3, [r4, #4]
 800754c:	6123      	str	r3, [r4, #16]
 800754e:	2300      	movs	r3, #0
 8007550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007554:	e7aa      	b.n	80074ac <_printf_i+0x14c>
 8007556:	6923      	ldr	r3, [r4, #16]
 8007558:	462a      	mov	r2, r5
 800755a:	4649      	mov	r1, r9
 800755c:	4640      	mov	r0, r8
 800755e:	47d0      	blx	sl
 8007560:	3001      	adds	r0, #1
 8007562:	d0ad      	beq.n	80074c0 <_printf_i+0x160>
 8007564:	6823      	ldr	r3, [r4, #0]
 8007566:	079b      	lsls	r3, r3, #30
 8007568:	d413      	bmi.n	8007592 <_printf_i+0x232>
 800756a:	68e0      	ldr	r0, [r4, #12]
 800756c:	9b03      	ldr	r3, [sp, #12]
 800756e:	4298      	cmp	r0, r3
 8007570:	bfb8      	it	lt
 8007572:	4618      	movlt	r0, r3
 8007574:	e7a6      	b.n	80074c4 <_printf_i+0x164>
 8007576:	2301      	movs	r3, #1
 8007578:	4632      	mov	r2, r6
 800757a:	4649      	mov	r1, r9
 800757c:	4640      	mov	r0, r8
 800757e:	47d0      	blx	sl
 8007580:	3001      	adds	r0, #1
 8007582:	d09d      	beq.n	80074c0 <_printf_i+0x160>
 8007584:	3501      	adds	r5, #1
 8007586:	68e3      	ldr	r3, [r4, #12]
 8007588:	9903      	ldr	r1, [sp, #12]
 800758a:	1a5b      	subs	r3, r3, r1
 800758c:	42ab      	cmp	r3, r5
 800758e:	dcf2      	bgt.n	8007576 <_printf_i+0x216>
 8007590:	e7eb      	b.n	800756a <_printf_i+0x20a>
 8007592:	2500      	movs	r5, #0
 8007594:	f104 0619 	add.w	r6, r4, #25
 8007598:	e7f5      	b.n	8007586 <_printf_i+0x226>
 800759a:	bf00      	nop
 800759c:	080084ed 	.word	0x080084ed
 80075a0:	080084fe 	.word	0x080084fe

080075a4 <memmove>:
 80075a4:	4288      	cmp	r0, r1
 80075a6:	b510      	push	{r4, lr}
 80075a8:	eb01 0402 	add.w	r4, r1, r2
 80075ac:	d902      	bls.n	80075b4 <memmove+0x10>
 80075ae:	4284      	cmp	r4, r0
 80075b0:	4623      	mov	r3, r4
 80075b2:	d807      	bhi.n	80075c4 <memmove+0x20>
 80075b4:	1e43      	subs	r3, r0, #1
 80075b6:	42a1      	cmp	r1, r4
 80075b8:	d008      	beq.n	80075cc <memmove+0x28>
 80075ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80075c2:	e7f8      	b.n	80075b6 <memmove+0x12>
 80075c4:	4402      	add	r2, r0
 80075c6:	4601      	mov	r1, r0
 80075c8:	428a      	cmp	r2, r1
 80075ca:	d100      	bne.n	80075ce <memmove+0x2a>
 80075cc:	bd10      	pop	{r4, pc}
 80075ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80075d6:	e7f7      	b.n	80075c8 <memmove+0x24>

080075d8 <_sbrk_r>:
 80075d8:	b538      	push	{r3, r4, r5, lr}
 80075da:	4d06      	ldr	r5, [pc, #24]	; (80075f4 <_sbrk_r+0x1c>)
 80075dc:	2300      	movs	r3, #0
 80075de:	4604      	mov	r4, r0
 80075e0:	4608      	mov	r0, r1
 80075e2:	602b      	str	r3, [r5, #0]
 80075e4:	f7fa f98e 	bl	8001904 <_sbrk>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d102      	bne.n	80075f2 <_sbrk_r+0x1a>
 80075ec:	682b      	ldr	r3, [r5, #0]
 80075ee:	b103      	cbz	r3, 80075f2 <_sbrk_r+0x1a>
 80075f0:	6023      	str	r3, [r4, #0]
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	200046c0 	.word	0x200046c0

080075f8 <_realloc_r>:
 80075f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075fc:	4680      	mov	r8, r0
 80075fe:	4614      	mov	r4, r2
 8007600:	460e      	mov	r6, r1
 8007602:	b921      	cbnz	r1, 800760e <_realloc_r+0x16>
 8007604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007608:	4611      	mov	r1, r2
 800760a:	f7ff bc57 	b.w	8006ebc <_malloc_r>
 800760e:	b92a      	cbnz	r2, 800761c <_realloc_r+0x24>
 8007610:	f7ff fbe8 	bl	8006de4 <_free_r>
 8007614:	4625      	mov	r5, r4
 8007616:	4628      	mov	r0, r5
 8007618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800761c:	f000 f81b 	bl	8007656 <_malloc_usable_size_r>
 8007620:	4284      	cmp	r4, r0
 8007622:	4607      	mov	r7, r0
 8007624:	d802      	bhi.n	800762c <_realloc_r+0x34>
 8007626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800762a:	d812      	bhi.n	8007652 <_realloc_r+0x5a>
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fc44 	bl	8006ebc <_malloc_r>
 8007634:	4605      	mov	r5, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d0ed      	beq.n	8007616 <_realloc_r+0x1e>
 800763a:	42bc      	cmp	r4, r7
 800763c:	4622      	mov	r2, r4
 800763e:	4631      	mov	r1, r6
 8007640:	bf28      	it	cs
 8007642:	463a      	movcs	r2, r7
 8007644:	f7ff fbc0 	bl	8006dc8 <memcpy>
 8007648:	4631      	mov	r1, r6
 800764a:	4640      	mov	r0, r8
 800764c:	f7ff fbca 	bl	8006de4 <_free_r>
 8007650:	e7e1      	b.n	8007616 <_realloc_r+0x1e>
 8007652:	4635      	mov	r5, r6
 8007654:	e7df      	b.n	8007616 <_realloc_r+0x1e>

08007656 <_malloc_usable_size_r>:
 8007656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800765a:	1f18      	subs	r0, r3, #4
 800765c:	2b00      	cmp	r3, #0
 800765e:	bfbc      	itt	lt
 8007660:	580b      	ldrlt	r3, [r1, r0]
 8007662:	18c0      	addlt	r0, r0, r3
 8007664:	4770      	bx	lr
	...

08007668 <_init>:
 8007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766a:	bf00      	nop
 800766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800766e:	bc08      	pop	{r3}
 8007670:	469e      	mov	lr, r3
 8007672:	4770      	bx	lr

08007674 <_fini>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	bf00      	nop
 8007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800767a:	bc08      	pop	{r3}
 800767c:	469e      	mov	lr, r3
 800767e:	4770      	bx	lr
